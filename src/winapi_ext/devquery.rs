/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
  storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
  #[inline]
  pub const fn new(storage: Storage) -> Self {
    Self { storage }
  }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
  Storage: AsRef<[u8]> + AsMut<[u8]>,
{
  #[inline]
  pub fn get_bit(&self, index: usize) -> bool {
    debug_assert!(index / 8 < self.storage.as_ref().len());
    let byte_index = index / 8;
    let byte = self.storage.as_ref()[byte_index];
    let bit_index = if cfg!(target_endian = "big") {
      7 - (index % 8)
    } else {
      index % 8
    };
    let mask = 1 << bit_index;
    byte & mask == mask
  }
  #[inline]
  pub fn set_bit(&mut self, index: usize, val: bool) {
    debug_assert!(index / 8 < self.storage.as_ref().len());
    let byte_index = index / 8;
    let byte = &mut self.storage.as_mut()[byte_index];
    let bit_index = if cfg!(target_endian = "big") {
      7 - (index % 8)
    } else {
      index % 8
    };
    let mask = 1 << bit_index;
    if val {
      *byte |= mask;
    } else {
      *byte &= !mask;
    }
  }
  #[inline]
  pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
    debug_assert!(bit_width <= 64);
    debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
    debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
    let mut val = 0;
    for i in 0..(bit_width as usize) {
      if self.get_bit(i + bit_offset) {
        let index = if cfg!(target_endian = "big") {
          bit_width as usize - 1 - i
        } else {
          i
        };
        val |= 1 << index;
      }
    }
    val
  }
  #[inline]
  pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
    debug_assert!(bit_width <= 64);
    debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
    debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
    for i in 0..(bit_width as usize) {
      let mask = 1 << i;
      let val_bit_is_set = val & mask == mask;
      let index = if cfg!(target_endian = "big") {
        bit_width as usize - 1 - i
      } else {
        i
      };
      self.set_bit(index + bit_offset, val_bit_is_set);
    }
  }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
  #[inline]
  pub const fn new() -> Self {
    __IncompleteArrayField(::std::marker::PhantomData, [])
  }
  #[inline]
  pub fn as_ptr(&self) -> *const T {
    self as *const _ as *const T
  }
  #[inline]
  pub fn as_mut_ptr(&mut self) -> *mut T {
    self as *mut _ as *mut T
  }
  #[inline]
  pub unsafe fn as_slice(&self, len: usize) -> &[T] {
    ::std::slice::from_raw_parts(self.as_ptr(), len)
  }
  #[inline]
  pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
    ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
  }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
  fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
    fmt.write_str("__IncompleteArrayField")
  }
}
pub const WINAPI_FAMILY_PC_APP: u32 = 2;
pub const WINAPI_FAMILY_PHONE_APP: u32 = 3;
pub const WINAPI_FAMILY_SYSTEM: u32 = 4;
pub const WINAPI_FAMILY_SERVER: u32 = 5;
pub const WINAPI_FAMILY_GAMES: u32 = 6;
pub const WINAPI_FAMILY_DESKTOP_APP: u32 = 100;
pub const WINAPI_FAMILY_APP: u32 = 2;
pub const WINAPI_FAMILY: u32 = 100;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const __SAL_H_FULL_VER: u32 = 140050727;
pub const __SPECSTRINGS_STRICT_LEVEL: u32 = 1;
pub const __drv_typeConst: u32 = 0;
pub const __drv_typeCond: u32 = 1;
pub const __drv_typeBitset: u32 = 2;
pub const __drv_typeExpr: u32 = 3;
pub const STRICT: u32 = 1;
pub const MAX_PATH: u32 = 260;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _UPPER: u32 = 1;
pub const _LOWER: u32 = 2;
pub const _DIGIT: u32 = 4;
pub const _SPACE: u32 = 8;
pub const _PUNCT: u32 = 16;
pub const _CONTROL: u32 = 32;
pub const _BLANK: u32 = 64;
pub const _HEX: u32 = 128;
pub const _LEADBYTE: u32 = 32768;
pub const _ALPHA: u32 = 259;
pub const ANYSIZE_ARRAY: u32 = 1;
pub const DISPATCH_LEVEL: u32 = 2;
pub const APC_LEVEL: u32 = 1;
pub const PASSIVE_LEVEL: u32 = 0;
pub const HIGH_LEVEL: u32 = 15;
pub const MEMORY_ALLOCATION_ALIGNMENT: u32 = 16;
pub const X86_CACHE_ALIGNMENT_SIZE: u32 = 64;
pub const ARM_CACHE_ALIGNMENT_SIZE: u32 = 128;
pub const SYSTEM_CACHE_ALIGNMENT_SIZE: u32 = 64;
pub const PRAGMA_DEPRECATED_DDK: u32 = 0;
pub const ALL_PROCESSOR_GROUPS: u32 = 65535;
pub const MAXIMUM_PROC_PER_GROUP: u32 = 64;
pub const MAXIMUM_PROCESSORS: u32 = 64;
pub const APPLICATION_ERROR_MASK: u32 = 536870912;
pub const ERROR_SEVERITY_SUCCESS: u32 = 0;
pub const ERROR_SEVERITY_INFORMATIONAL: u32 = 1073741824;
pub const ERROR_SEVERITY_WARNING: u32 = 2147483648;
pub const ERROR_SEVERITY_ERROR: u32 = 3221225472;
pub const MAXLONGLONG: u64 = 9223372036854775807;
pub const UNICODE_STRING_MAX_CHARS: u32 = 32767;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const MINCHAR: u32 = 128;
pub const MAXCHAR: u32 = 127;
pub const MINSHORT: u32 = 32768;
pub const MAXSHORT: u32 = 32767;
pub const MINLONG: u32 = 2147483648;
pub const MAXLONG: u32 = 2147483647;
pub const MAXBYTE: u32 = 255;
pub const MAXWORD: u32 = 65535;
pub const MAXDWORD: u32 = 4294967295;
pub const EXCEPTION_EXECUTE_HANDLER: u32 = 1;
pub const EXCEPTION_CONTINUE_SEARCH: u32 = 0;
pub const EXCEPTION_CONTINUE_EXECUTION: i32 = -1;
pub const ENCLAVE_SHORT_ID_LENGTH: u32 = 16;
pub const ENCLAVE_LONG_ID_LENGTH: u32 = 32;
pub const VER_SERVER_NT: u32 = 2147483648;
pub const VER_WORKSTATION_NT: u32 = 1073741824;
pub const VER_SUITE_SMALLBUSINESS: u32 = 1;
pub const VER_SUITE_ENTERPRISE: u32 = 2;
pub const VER_SUITE_BACKOFFICE: u32 = 4;
pub const VER_SUITE_COMMUNICATIONS: u32 = 8;
pub const VER_SUITE_TERMINAL: u32 = 16;
pub const VER_SUITE_SMALLBUSINESS_RESTRICTED: u32 = 32;
pub const VER_SUITE_EMBEDDEDNT: u32 = 64;
pub const VER_SUITE_DATACENTER: u32 = 128;
pub const VER_SUITE_SINGLEUSERTS: u32 = 256;
pub const VER_SUITE_PERSONAL: u32 = 512;
pub const VER_SUITE_BLADE: u32 = 1024;
pub const VER_SUITE_EMBEDDED_RESTRICTED: u32 = 2048;
pub const VER_SUITE_SECURITY_APPLIANCE: u32 = 4096;
pub const VER_SUITE_STORAGE_SERVER: u32 = 8192;
pub const VER_SUITE_COMPUTE_SERVER: u32 = 16384;
pub const VER_SUITE_WH_SERVER: u32 = 32768;
pub const VER_SUITE_MULTIUSERTS: u32 = 131072;
pub const PRODUCT_UNDEFINED: u32 = 0;
pub const PRODUCT_ULTIMATE: u32 = 1;
pub const PRODUCT_HOME_BASIC: u32 = 2;
pub const PRODUCT_HOME_PREMIUM: u32 = 3;
pub const PRODUCT_ENTERPRISE: u32 = 4;
pub const PRODUCT_HOME_BASIC_N: u32 = 5;
pub const PRODUCT_BUSINESS: u32 = 6;
pub const PRODUCT_STANDARD_SERVER: u32 = 7;
pub const PRODUCT_DATACENTER_SERVER: u32 = 8;
pub const PRODUCT_SMALLBUSINESS_SERVER: u32 = 9;
pub const PRODUCT_ENTERPRISE_SERVER: u32 = 10;
pub const PRODUCT_STARTER: u32 = 11;
pub const PRODUCT_DATACENTER_SERVER_CORE: u32 = 12;
pub const PRODUCT_STANDARD_SERVER_CORE: u32 = 13;
pub const PRODUCT_ENTERPRISE_SERVER_CORE: u32 = 14;
pub const PRODUCT_ENTERPRISE_SERVER_IA64: u32 = 15;
pub const PRODUCT_BUSINESS_N: u32 = 16;
pub const PRODUCT_WEB_SERVER: u32 = 17;
pub const PRODUCT_CLUSTER_SERVER: u32 = 18;
pub const PRODUCT_HOME_SERVER: u32 = 19;
pub const PRODUCT_STORAGE_EXPRESS_SERVER: u32 = 20;
pub const PRODUCT_STORAGE_STANDARD_SERVER: u32 = 21;
pub const PRODUCT_STORAGE_WORKGROUP_SERVER: u32 = 22;
pub const PRODUCT_STORAGE_ENTERPRISE_SERVER: u32 = 23;
pub const PRODUCT_SERVER_FOR_SMALLBUSINESS: u32 = 24;
pub const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM: u32 = 25;
pub const PRODUCT_HOME_PREMIUM_N: u32 = 26;
pub const PRODUCT_ENTERPRISE_N: u32 = 27;
pub const PRODUCT_ULTIMATE_N: u32 = 28;
pub const PRODUCT_WEB_SERVER_CORE: u32 = 29;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT: u32 = 30;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY: u32 = 31;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING: u32 = 32;
pub const PRODUCT_SERVER_FOUNDATION: u32 = 33;
pub const PRODUCT_HOME_PREMIUM_SERVER: u32 = 34;
pub const PRODUCT_SERVER_FOR_SMALLBUSINESS_V: u32 = 35;
pub const PRODUCT_STANDARD_SERVER_V: u32 = 36;
pub const PRODUCT_DATACENTER_SERVER_V: u32 = 37;
pub const PRODUCT_ENTERPRISE_SERVER_V: u32 = 38;
pub const PRODUCT_DATACENTER_SERVER_CORE_V: u32 = 39;
pub const PRODUCT_STANDARD_SERVER_CORE_V: u32 = 40;
pub const PRODUCT_ENTERPRISE_SERVER_CORE_V: u32 = 41;
pub const PRODUCT_HYPERV: u32 = 42;
pub const PRODUCT_STORAGE_EXPRESS_SERVER_CORE: u32 = 43;
pub const PRODUCT_STORAGE_STANDARD_SERVER_CORE: u32 = 44;
pub const PRODUCT_STORAGE_WORKGROUP_SERVER_CORE: u32 = 45;
pub const PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE: u32 = 46;
pub const PRODUCT_STARTER_N: u32 = 47;
pub const PRODUCT_PROFESSIONAL: u32 = 48;
pub const PRODUCT_PROFESSIONAL_N: u32 = 49;
pub const PRODUCT_SB_SOLUTION_SERVER: u32 = 50;
pub const PRODUCT_SERVER_FOR_SB_SOLUTIONS: u32 = 51;
pub const PRODUCT_STANDARD_SERVER_SOLUTIONS: u32 = 52;
pub const PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE: u32 = 53;
pub const PRODUCT_SB_SOLUTION_SERVER_EM: u32 = 54;
pub const PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM: u32 = 55;
pub const PRODUCT_SOLUTION_EMBEDDEDSERVER: u32 = 56;
pub const PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE: u32 = 57;
pub const PRODUCT_PROFESSIONAL_EMBEDDED: u32 = 58;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT: u32 = 59;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL: u32 = 60;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC: u32 = 61;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC: u32 = 62;
pub const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE: u32 = 63;
pub const PRODUCT_CLUSTER_SERVER_V: u32 = 64;
pub const PRODUCT_EMBEDDED: u32 = 65;
pub const PRODUCT_STARTER_E: u32 = 66;
pub const PRODUCT_HOME_BASIC_E: u32 = 67;
pub const PRODUCT_HOME_PREMIUM_E: u32 = 68;
pub const PRODUCT_PROFESSIONAL_E: u32 = 69;
pub const PRODUCT_ENTERPRISE_E: u32 = 70;
pub const PRODUCT_ULTIMATE_E: u32 = 71;
pub const PRODUCT_ENTERPRISE_EVALUATION: u32 = 72;
pub const PRODUCT_MULTIPOINT_STANDARD_SERVER: u32 = 76;
pub const PRODUCT_MULTIPOINT_PREMIUM_SERVER: u32 = 77;
pub const PRODUCT_STANDARD_EVALUATION_SERVER: u32 = 79;
pub const PRODUCT_DATACENTER_EVALUATION_SERVER: u32 = 80;
pub const PRODUCT_ENTERPRISE_N_EVALUATION: u32 = 84;
pub const PRODUCT_EMBEDDED_AUTOMOTIVE: u32 = 85;
pub const PRODUCT_EMBEDDED_INDUSTRY_A: u32 = 86;
pub const PRODUCT_THINPC: u32 = 87;
pub const PRODUCT_EMBEDDED_A: u32 = 88;
pub const PRODUCT_EMBEDDED_INDUSTRY: u32 = 89;
pub const PRODUCT_EMBEDDED_E: u32 = 90;
pub const PRODUCT_EMBEDDED_INDUSTRY_E: u32 = 91;
pub const PRODUCT_EMBEDDED_INDUSTRY_A_E: u32 = 92;
pub const PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER: u32 = 95;
pub const PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER: u32 = 96;
pub const PRODUCT_CORE_ARM: u32 = 97;
pub const PRODUCT_CORE_N: u32 = 98;
pub const PRODUCT_CORE_COUNTRYSPECIFIC: u32 = 99;
pub const PRODUCT_CORE_SINGLELANGUAGE: u32 = 100;
pub const PRODUCT_CORE: u32 = 101;
pub const PRODUCT_PROFESSIONAL_WMC: u32 = 103;
pub const PRODUCT_EMBEDDED_INDUSTRY_EVAL: u32 = 105;
pub const PRODUCT_EMBEDDED_INDUSTRY_E_EVAL: u32 = 106;
pub const PRODUCT_EMBEDDED_EVAL: u32 = 107;
pub const PRODUCT_EMBEDDED_E_EVAL: u32 = 108;
pub const PRODUCT_NANO_SERVER: u32 = 109;
pub const PRODUCT_CLOUD_STORAGE_SERVER: u32 = 110;
pub const PRODUCT_CORE_CONNECTED: u32 = 111;
pub const PRODUCT_PROFESSIONAL_STUDENT: u32 = 112;
pub const PRODUCT_CORE_CONNECTED_N: u32 = 113;
pub const PRODUCT_PROFESSIONAL_STUDENT_N: u32 = 114;
pub const PRODUCT_CORE_CONNECTED_SINGLELANGUAGE: u32 = 115;
pub const PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC: u32 = 116;
pub const PRODUCT_CONNECTED_CAR: u32 = 117;
pub const PRODUCT_INDUSTRY_HANDHELD: u32 = 118;
pub const PRODUCT_PPI_PRO: u32 = 119;
pub const PRODUCT_ARM64_SERVER: u32 = 120;
pub const PRODUCT_EDUCATION: u32 = 121;
pub const PRODUCT_EDUCATION_N: u32 = 122;
pub const PRODUCT_IOTUAP: u32 = 123;
pub const PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER: u32 = 124;
pub const PRODUCT_ENTERPRISE_S: u32 = 125;
pub const PRODUCT_ENTERPRISE_S_N: u32 = 126;
pub const PRODUCT_PROFESSIONAL_S: u32 = 127;
pub const PRODUCT_PROFESSIONAL_S_N: u32 = 128;
pub const PRODUCT_ENTERPRISE_S_EVALUATION: u32 = 129;
pub const PRODUCT_ENTERPRISE_S_N_EVALUATION: u32 = 130;
pub const PRODUCT_HOLOGRAPHIC: u32 = 135;
pub const PRODUCT_HOLOGRAPHIC_BUSINESS: u32 = 136;
pub const PRODUCT_PRO_SINGLE_LANGUAGE: u32 = 138;
pub const PRODUCT_PRO_CHINA: u32 = 139;
pub const PRODUCT_ENTERPRISE_SUBSCRIPTION: u32 = 140;
pub const PRODUCT_ENTERPRISE_SUBSCRIPTION_N: u32 = 141;
pub const PRODUCT_DATACENTER_NANO_SERVER: u32 = 143;
pub const PRODUCT_STANDARD_NANO_SERVER: u32 = 144;
pub const PRODUCT_DATACENTER_A_SERVER_CORE: u32 = 145;
pub const PRODUCT_STANDARD_A_SERVER_CORE: u32 = 146;
pub const PRODUCT_DATACENTER_WS_SERVER_CORE: u32 = 147;
pub const PRODUCT_STANDARD_WS_SERVER_CORE: u32 = 148;
pub const PRODUCT_UTILITY_VM: u32 = 149;
pub const PRODUCT_DATACENTER_EVALUATION_SERVER_CORE: u32 = 159;
pub const PRODUCT_STANDARD_EVALUATION_SERVER_CORE: u32 = 160;
pub const PRODUCT_PRO_WORKSTATION: u32 = 161;
pub const PRODUCT_PRO_WORKSTATION_N: u32 = 162;
pub const PRODUCT_PRO_FOR_EDUCATION: u32 = 164;
pub const PRODUCT_PRO_FOR_EDUCATION_N: u32 = 165;
pub const PRODUCT_AZURE_SERVER_CORE: u32 = 168;
pub const PRODUCT_AZURE_NANO_SERVER: u32 = 169;
pub const PRODUCT_ENTERPRISEG: u32 = 171;
pub const PRODUCT_ENTERPRISEGN: u32 = 172;
pub const PRODUCT_SERVERRDSH: u32 = 175;
pub const PRODUCT_CLOUD: u32 = 178;
pub const PRODUCT_CLOUDN: u32 = 179;
pub const PRODUCT_HUBOS: u32 = 180;
pub const PRODUCT_ONECOREUPDATEOS: u32 = 182;
pub const PRODUCT_CLOUDE: u32 = 183;
pub const PRODUCT_IOTOS: u32 = 185;
pub const PRODUCT_CLOUDEN: u32 = 186;
pub const PRODUCT_IOTEDGEOS: u32 = 187;
pub const PRODUCT_IOTENTERPRISE: u32 = 188;
pub const PRODUCT_LITE: u32 = 189;
pub const PRODUCT_IOTENTERPRISES: u32 = 191;
pub const PRODUCT_XBOX_SYSTEMOS: u32 = 192;
pub const PRODUCT_XBOX_GAMEOS: u32 = 194;
pub const PRODUCT_XBOX_ERAOS: u32 = 195;
pub const PRODUCT_XBOX_DURANGOHOSTOS: u32 = 196;
pub const PRODUCT_XBOX_SCARLETTHOSTOS: u32 = 197;
pub const PRODUCT_XBOX_KEYSTONE: u32 = 198;
pub const PRODUCT_AZURE_SERVER_CLOUDHOST: u32 = 199;
pub const PRODUCT_AZURE_SERVER_CLOUDMOS: u32 = 200;
pub const PRODUCT_CLOUDEDITIONN: u32 = 202;
pub const PRODUCT_CLOUDEDITION: u32 = 203;
pub const PRODUCT_AZURESTACKHCI_SERVER_CORE: u32 = 406;
pub const PRODUCT_DATACENTER_SERVER_AZURE_EDITION: u32 = 407;
pub const PRODUCT_DATACENTER_SERVER_CORE_AZURE_EDITION: u32 = 408;
pub const PRODUCT_UNLICENSED: u32 = 2882382797;
pub const _WIN32_WINNT_NT4: u32 = 1024;
pub const _WIN32_WINNT_WIN2K: u32 = 1280;
pub const _WIN32_WINNT_WINXP: u32 = 1281;
pub const _WIN32_WINNT_WS03: u32 = 1282;
pub const _WIN32_WINNT_WIN6: u32 = 1536;
pub const _WIN32_WINNT_VISTA: u32 = 1536;
pub const _WIN32_WINNT_WS08: u32 = 1536;
pub const _WIN32_WINNT_LONGHORN: u32 = 1536;
pub const _WIN32_WINNT_WIN7: u32 = 1537;
pub const _WIN32_WINNT_WIN8: u32 = 1538;
pub const _WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _WIN32_WINNT_WINTHRESHOLD: u32 = 2560;
pub const _WIN32_WINNT_WIN10: u32 = 2560;
pub const _WIN32_IE_IE20: u32 = 512;
pub const _WIN32_IE_IE30: u32 = 768;
pub const _WIN32_IE_IE302: u32 = 770;
pub const _WIN32_IE_IE40: u32 = 1024;
pub const _WIN32_IE_IE401: u32 = 1025;
pub const _WIN32_IE_IE50: u32 = 1280;
pub const _WIN32_IE_IE501: u32 = 1281;
pub const _WIN32_IE_IE55: u32 = 1360;
pub const _WIN32_IE_IE60: u32 = 1536;
pub const _WIN32_IE_IE60SP1: u32 = 1537;
pub const _WIN32_IE_IE60SP2: u32 = 1539;
pub const _WIN32_IE_IE70: u32 = 1792;
pub const _WIN32_IE_IE80: u32 = 2048;
pub const _WIN32_IE_IE90: u32 = 2304;
pub const _WIN32_IE_IE100: u32 = 2560;
pub const _WIN32_IE_IE110: u32 = 2560;
pub const _WIN32_IE_NT4: u32 = 512;
pub const _WIN32_IE_NT4SP1: u32 = 512;
pub const _WIN32_IE_NT4SP2: u32 = 512;
pub const _WIN32_IE_NT4SP3: u32 = 770;
pub const _WIN32_IE_NT4SP4: u32 = 1025;
pub const _WIN32_IE_NT4SP5: u32 = 1025;
pub const _WIN32_IE_NT4SP6: u32 = 1280;
pub const _WIN32_IE_WIN98: u32 = 1025;
pub const _WIN32_IE_WIN98SE: u32 = 1280;
pub const _WIN32_IE_WINME: u32 = 1360;
pub const _WIN32_IE_WIN2K: u32 = 1281;
pub const _WIN32_IE_WIN2KSP1: u32 = 1281;
pub const _WIN32_IE_WIN2KSP2: u32 = 1281;
pub const _WIN32_IE_WIN2KSP3: u32 = 1281;
pub const _WIN32_IE_WIN2KSP4: u32 = 1281;
pub const _WIN32_IE_XP: u32 = 1536;
pub const _WIN32_IE_XPSP1: u32 = 1537;
pub const _WIN32_IE_XPSP2: u32 = 1539;
pub const _WIN32_IE_WS03: u32 = 1538;
pub const _WIN32_IE_WS03SP1: u32 = 1539;
pub const _WIN32_IE_WIN6: u32 = 1792;
pub const _WIN32_IE_LONGHORN: u32 = 1792;
pub const _WIN32_IE_WIN7: u32 = 2048;
pub const _WIN32_IE_WIN8: u32 = 2560;
pub const _WIN32_IE_WINBLUE: u32 = 2560;
pub const _WIN32_IE_WINTHRESHOLD: u32 = 2560;
pub const _WIN32_IE_WIN10: u32 = 2560;
pub const NTDDI_WIN4: u32 = 67108864;
pub const NTDDI_WIN2K: u32 = 83886080;
pub const NTDDI_WIN2KSP1: u32 = 83886336;
pub const NTDDI_WIN2KSP2: u32 = 83886592;
pub const NTDDI_WIN2KSP3: u32 = 83886848;
pub const NTDDI_WIN2KSP4: u32 = 83887104;
pub const NTDDI_WINXP: u32 = 83951616;
pub const NTDDI_WINXPSP1: u32 = 83951872;
pub const NTDDI_WINXPSP2: u32 = 83952128;
pub const NTDDI_WINXPSP3: u32 = 83952384;
pub const NTDDI_WINXPSP4: u32 = 83952640;
pub const NTDDI_WS03: u32 = 84017152;
pub const NTDDI_WS03SP1: u32 = 84017408;
pub const NTDDI_WS03SP2: u32 = 84017664;
pub const NTDDI_WS03SP3: u32 = 84017920;
pub const NTDDI_WS03SP4: u32 = 84018176;
pub const NTDDI_WIN6: u32 = 100663296;
pub const NTDDI_WIN6SP1: u32 = 100663552;
pub const NTDDI_WIN6SP2: u32 = 100663808;
pub const NTDDI_WIN6SP3: u32 = 100664064;
pub const NTDDI_WIN6SP4: u32 = 100664320;
pub const NTDDI_VISTA: u32 = 100663296;
pub const NTDDI_VISTASP1: u32 = 100663552;
pub const NTDDI_VISTASP2: u32 = 100663808;
pub const NTDDI_VISTASP3: u32 = 100664064;
pub const NTDDI_VISTASP4: u32 = 100664320;
pub const NTDDI_LONGHORN: u32 = 100663296;
pub const NTDDI_WS08: u32 = 100663552;
pub const NTDDI_WS08SP2: u32 = 100663808;
pub const NTDDI_WS08SP3: u32 = 100664064;
pub const NTDDI_WS08SP4: u32 = 100664320;
pub const NTDDI_WIN7: u32 = 100728832;
pub const NTDDI_WIN8: u32 = 100794368;
pub const NTDDI_WINBLUE: u32 = 100859904;
pub const NTDDI_WINTHRESHOLD: u32 = 167772160;
pub const NTDDI_WIN10: u32 = 167772160;
pub const NTDDI_WIN10_TH2: u32 = 167772161;
pub const NTDDI_WIN10_RS1: u32 = 167772162;
pub const NTDDI_WIN10_RS2: u32 = 167772163;
pub const NTDDI_WIN10_RS3: u32 = 167772164;
pub const NTDDI_WIN10_RS4: u32 = 167772165;
pub const NTDDI_WIN10_RS5: u32 = 167772166;
pub const NTDDI_WIN10_19H1: u32 = 167772167;
pub const NTDDI_WIN10_VB: u32 = 167772168;
pub const NTDDI_WIN10_MN: u32 = 167772169;
pub const NTDDI_WIN10_FE: u32 = 167772170;
pub const NTDDI_WIN10_CO: u32 = 167772171;
pub const NTDDI_WIN10_NI: u32 = 167772172;
pub const WDK_NTDDI_VERSION: u32 = 167772172;
pub const OSVERSION_MASK: u32 = 4294901760;
pub const SPVERSION_MASK: u32 = 65280;
pub const SUBVERSION_MASK: u32 = 255;
pub const _WIN32_WINNT: u32 = 2560;
pub const NTDDI_VERSION: u32 = 167772172;
pub const WINVER: u32 = 2560;
pub const _WIN32_IE: u32 = 2560;
pub const LANG_NEUTRAL: u32 = 0;
pub const LANG_INVARIANT: u32 = 127;
pub const LANG_AFRIKAANS: u32 = 54;
pub const LANG_ALBANIAN: u32 = 28;
pub const LANG_ALSATIAN: u32 = 132;
pub const LANG_AMHARIC: u32 = 94;
pub const LANG_ARABIC: u32 = 1;
pub const LANG_ARMENIAN: u32 = 43;
pub const LANG_ASSAMESE: u32 = 77;
pub const LANG_AZERI: u32 = 44;
pub const LANG_AZERBAIJANI: u32 = 44;
pub const LANG_BANGLA: u32 = 69;
pub const LANG_BASHKIR: u32 = 109;
pub const LANG_BASQUE: u32 = 45;
pub const LANG_BELARUSIAN: u32 = 35;
pub const LANG_BENGALI: u32 = 69;
pub const LANG_BRETON: u32 = 126;
pub const LANG_BOSNIAN: u32 = 26;
pub const LANG_BOSNIAN_NEUTRAL: u32 = 30746;
pub const LANG_BULGARIAN: u32 = 2;
pub const LANG_CATALAN: u32 = 3;
pub const LANG_CENTRAL_KURDISH: u32 = 146;
pub const LANG_CHEROKEE: u32 = 92;
pub const LANG_CHINESE: u32 = 4;
pub const LANG_CHINESE_SIMPLIFIED: u32 = 4;
pub const LANG_CHINESE_TRADITIONAL: u32 = 31748;
pub const LANG_CORSICAN: u32 = 131;
pub const LANG_CROATIAN: u32 = 26;
pub const LANG_CZECH: u32 = 5;
pub const LANG_DANISH: u32 = 6;
pub const LANG_DARI: u32 = 140;
pub const LANG_DIVEHI: u32 = 101;
pub const LANG_DUTCH: u32 = 19;
pub const LANG_ENGLISH: u32 = 9;
pub const LANG_ESTONIAN: u32 = 37;
pub const LANG_FAEROESE: u32 = 56;
pub const LANG_FARSI: u32 = 41;
pub const LANG_FILIPINO: u32 = 100;
pub const LANG_FINNISH: u32 = 11;
pub const LANG_FRENCH: u32 = 12;
pub const LANG_FRISIAN: u32 = 98;
pub const LANG_FULAH: u32 = 103;
pub const LANG_GALICIAN: u32 = 86;
pub const LANG_GEORGIAN: u32 = 55;
pub const LANG_GERMAN: u32 = 7;
pub const LANG_GREEK: u32 = 8;
pub const LANG_GREENLANDIC: u32 = 111;
pub const LANG_GUJARATI: u32 = 71;
pub const LANG_HAUSA: u32 = 104;
pub const LANG_HAWAIIAN: u32 = 117;
pub const LANG_HEBREW: u32 = 13;
pub const LANG_HINDI: u32 = 57;
pub const LANG_HUNGARIAN: u32 = 14;
pub const LANG_ICELANDIC: u32 = 15;
pub const LANG_IGBO: u32 = 112;
pub const LANG_INDONESIAN: u32 = 33;
pub const LANG_INUKTITUT: u32 = 93;
pub const LANG_IRISH: u32 = 60;
pub const LANG_ITALIAN: u32 = 16;
pub const LANG_JAPANESE: u32 = 17;
pub const LANG_KANNADA: u32 = 75;
pub const LANG_KASHMIRI: u32 = 96;
pub const LANG_KAZAK: u32 = 63;
pub const LANG_KHMER: u32 = 83;
pub const LANG_KICHE: u32 = 134;
pub const LANG_KINYARWANDA: u32 = 135;
pub const LANG_KONKANI: u32 = 87;
pub const LANG_KOREAN: u32 = 18;
pub const LANG_KYRGYZ: u32 = 64;
pub const LANG_LAO: u32 = 84;
pub const LANG_LATVIAN: u32 = 38;
pub const LANG_LITHUANIAN: u32 = 39;
pub const LANG_LOWER_SORBIAN: u32 = 46;
pub const LANG_LUXEMBOURGISH: u32 = 110;
pub const LANG_MACEDONIAN: u32 = 47;
pub const LANG_MALAY: u32 = 62;
pub const LANG_MALAYALAM: u32 = 76;
pub const LANG_MALTESE: u32 = 58;
pub const LANG_MANIPURI: u32 = 88;
pub const LANG_MAORI: u32 = 129;
pub const LANG_MAPUDUNGUN: u32 = 122;
pub const LANG_MARATHI: u32 = 78;
pub const LANG_MOHAWK: u32 = 124;
pub const LANG_MONGOLIAN: u32 = 80;
pub const LANG_NEPALI: u32 = 97;
pub const LANG_NORWEGIAN: u32 = 20;
pub const LANG_OCCITAN: u32 = 130;
pub const LANG_ODIA: u32 = 72;
pub const LANG_ORIYA: u32 = 72;
pub const LANG_PASHTO: u32 = 99;
pub const LANG_PERSIAN: u32 = 41;
pub const LANG_POLISH: u32 = 21;
pub const LANG_PORTUGUESE: u32 = 22;
pub const LANG_PULAR: u32 = 103;
pub const LANG_PUNJABI: u32 = 70;
pub const LANG_QUECHUA: u32 = 107;
pub const LANG_ROMANIAN: u32 = 24;
pub const LANG_ROMANSH: u32 = 23;
pub const LANG_RUSSIAN: u32 = 25;
pub const LANG_SAKHA: u32 = 133;
pub const LANG_SAMI: u32 = 59;
pub const LANG_SANSKRIT: u32 = 79;
pub const LANG_SCOTTISH_GAELIC: u32 = 145;
pub const LANG_SERBIAN: u32 = 26;
pub const LANG_SERBIAN_NEUTRAL: u32 = 31770;
pub const LANG_SINDHI: u32 = 89;
pub const LANG_SINHALESE: u32 = 91;
pub const LANG_SLOVAK: u32 = 27;
pub const LANG_SLOVENIAN: u32 = 36;
pub const LANG_SOTHO: u32 = 108;
pub const LANG_SPANISH: u32 = 10;
pub const LANG_SWAHILI: u32 = 65;
pub const LANG_SWEDISH: u32 = 29;
pub const LANG_SYRIAC: u32 = 90;
pub const LANG_TAJIK: u32 = 40;
pub const LANG_TAMAZIGHT: u32 = 95;
pub const LANG_TAMIL: u32 = 73;
pub const LANG_TATAR: u32 = 68;
pub const LANG_TELUGU: u32 = 74;
pub const LANG_THAI: u32 = 30;
pub const LANG_TIBETAN: u32 = 81;
pub const LANG_TIGRIGNA: u32 = 115;
pub const LANG_TIGRINYA: u32 = 115;
pub const LANG_TSWANA: u32 = 50;
pub const LANG_TURKISH: u32 = 31;
pub const LANG_TURKMEN: u32 = 66;
pub const LANG_UIGHUR: u32 = 128;
pub const LANG_UKRAINIAN: u32 = 34;
pub const LANG_UPPER_SORBIAN: u32 = 46;
pub const LANG_URDU: u32 = 32;
pub const LANG_UZBEK: u32 = 67;
pub const LANG_VALENCIAN: u32 = 3;
pub const LANG_VIETNAMESE: u32 = 42;
pub const LANG_WELSH: u32 = 82;
pub const LANG_WOLOF: u32 = 136;
pub const LANG_XHOSA: u32 = 52;
pub const LANG_YAKUT: u32 = 133;
pub const LANG_YI: u32 = 120;
pub const LANG_YORUBA: u32 = 106;
pub const LANG_ZULU: u32 = 53;
pub const SUBLANG_NEUTRAL: u32 = 0;
pub const SUBLANG_DEFAULT: u32 = 1;
pub const SUBLANG_SYS_DEFAULT: u32 = 2;
pub const SUBLANG_CUSTOM_DEFAULT: u32 = 3;
pub const SUBLANG_CUSTOM_UNSPECIFIED: u32 = 4;
pub const SUBLANG_UI_CUSTOM_DEFAULT: u32 = 5;
pub const SUBLANG_AFRIKAANS_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_ALBANIAN_ALBANIA: u32 = 1;
pub const SUBLANG_ALSATIAN_FRANCE: u32 = 1;
pub const SUBLANG_AMHARIC_ETHIOPIA: u32 = 1;
pub const SUBLANG_ARABIC_SAUDI_ARABIA: u32 = 1;
pub const SUBLANG_ARABIC_IRAQ: u32 = 2;
pub const SUBLANG_ARABIC_EGYPT: u32 = 3;
pub const SUBLANG_ARABIC_LIBYA: u32 = 4;
pub const SUBLANG_ARABIC_ALGERIA: u32 = 5;
pub const SUBLANG_ARABIC_MOROCCO: u32 = 6;
pub const SUBLANG_ARABIC_TUNISIA: u32 = 7;
pub const SUBLANG_ARABIC_OMAN: u32 = 8;
pub const SUBLANG_ARABIC_YEMEN: u32 = 9;
pub const SUBLANG_ARABIC_SYRIA: u32 = 10;
pub const SUBLANG_ARABIC_JORDAN: u32 = 11;
pub const SUBLANG_ARABIC_LEBANON: u32 = 12;
pub const SUBLANG_ARABIC_KUWAIT: u32 = 13;
pub const SUBLANG_ARABIC_UAE: u32 = 14;
pub const SUBLANG_ARABIC_BAHRAIN: u32 = 15;
pub const SUBLANG_ARABIC_QATAR: u32 = 16;
pub const SUBLANG_ARMENIAN_ARMENIA: u32 = 1;
pub const SUBLANG_ASSAMESE_INDIA: u32 = 1;
pub const SUBLANG_AZERI_LATIN: u32 = 1;
pub const SUBLANG_AZERI_CYRILLIC: u32 = 2;
pub const SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN: u32 = 1;
pub const SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC: u32 = 2;
pub const SUBLANG_BANGLA_INDIA: u32 = 1;
pub const SUBLANG_BANGLA_BANGLADESH: u32 = 2;
pub const SUBLANG_BASHKIR_RUSSIA: u32 = 1;
pub const SUBLANG_BASQUE_BASQUE: u32 = 1;
pub const SUBLANG_BELARUSIAN_BELARUS: u32 = 1;
pub const SUBLANG_BENGALI_INDIA: u32 = 1;
pub const SUBLANG_BENGALI_BANGLADESH: u32 = 2;
pub const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 5;
pub const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC: u32 = 8;
pub const SUBLANG_BRETON_FRANCE: u32 = 1;
pub const SUBLANG_BULGARIAN_BULGARIA: u32 = 1;
pub const SUBLANG_CATALAN_CATALAN: u32 = 1;
pub const SUBLANG_CENTRAL_KURDISH_IRAQ: u32 = 1;
pub const SUBLANG_CHEROKEE_CHEROKEE: u32 = 1;
pub const SUBLANG_CHINESE_TRADITIONAL: u32 = 1;
pub const SUBLANG_CHINESE_SIMPLIFIED: u32 = 2;
pub const SUBLANG_CHINESE_HONGKONG: u32 = 3;
pub const SUBLANG_CHINESE_SINGAPORE: u32 = 4;
pub const SUBLANG_CHINESE_MACAU: u32 = 5;
pub const SUBLANG_CORSICAN_FRANCE: u32 = 1;
pub const SUBLANG_CZECH_CZECH_REPUBLIC: u32 = 1;
pub const SUBLANG_CROATIAN_CROATIA: u32 = 1;
pub const SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 4;
pub const SUBLANG_DANISH_DENMARK: u32 = 1;
pub const SUBLANG_DARI_AFGHANISTAN: u32 = 1;
pub const SUBLANG_DIVEHI_MALDIVES: u32 = 1;
pub const SUBLANG_DUTCH: u32 = 1;
pub const SUBLANG_DUTCH_BELGIAN: u32 = 2;
pub const SUBLANG_ENGLISH_US: u32 = 1;
pub const SUBLANG_ENGLISH_UK: u32 = 2;
pub const SUBLANG_ENGLISH_AUS: u32 = 3;
pub const SUBLANG_ENGLISH_CAN: u32 = 4;
pub const SUBLANG_ENGLISH_NZ: u32 = 5;
pub const SUBLANG_ENGLISH_EIRE: u32 = 6;
pub const SUBLANG_ENGLISH_SOUTH_AFRICA: u32 = 7;
pub const SUBLANG_ENGLISH_JAMAICA: u32 = 8;
pub const SUBLANG_ENGLISH_CARIBBEAN: u32 = 9;
pub const SUBLANG_ENGLISH_BELIZE: u32 = 10;
pub const SUBLANG_ENGLISH_TRINIDAD: u32 = 11;
pub const SUBLANG_ENGLISH_ZIMBABWE: u32 = 12;
pub const SUBLANG_ENGLISH_PHILIPPINES: u32 = 13;
pub const SUBLANG_ENGLISH_INDIA: u32 = 16;
pub const SUBLANG_ENGLISH_MALAYSIA: u32 = 17;
pub const SUBLANG_ENGLISH_SINGAPORE: u32 = 18;
pub const SUBLANG_ESTONIAN_ESTONIA: u32 = 1;
pub const SUBLANG_FAEROESE_FAROE_ISLANDS: u32 = 1;
pub const SUBLANG_FILIPINO_PHILIPPINES: u32 = 1;
pub const SUBLANG_FINNISH_FINLAND: u32 = 1;
pub const SUBLANG_FRENCH: u32 = 1;
pub const SUBLANG_FRENCH_BELGIAN: u32 = 2;
pub const SUBLANG_FRENCH_CANADIAN: u32 = 3;
pub const SUBLANG_FRENCH_SWISS: u32 = 4;
pub const SUBLANG_FRENCH_LUXEMBOURG: u32 = 5;
pub const SUBLANG_FRENCH_MONACO: u32 = 6;
pub const SUBLANG_FRISIAN_NETHERLANDS: u32 = 1;
pub const SUBLANG_FULAH_SENEGAL: u32 = 2;
pub const SUBLANG_GALICIAN_GALICIAN: u32 = 1;
pub const SUBLANG_GEORGIAN_GEORGIA: u32 = 1;
pub const SUBLANG_GERMAN: u32 = 1;
pub const SUBLANG_GERMAN_SWISS: u32 = 2;
pub const SUBLANG_GERMAN_AUSTRIAN: u32 = 3;
pub const SUBLANG_GERMAN_LUXEMBOURG: u32 = 4;
pub const SUBLANG_GERMAN_LIECHTENSTEIN: u32 = 5;
pub const SUBLANG_GREEK_GREECE: u32 = 1;
pub const SUBLANG_GREENLANDIC_GREENLAND: u32 = 1;
pub const SUBLANG_GUJARATI_INDIA: u32 = 1;
pub const SUBLANG_HAUSA_NIGERIA_LATIN: u32 = 1;
pub const SUBLANG_HAWAIIAN_US: u32 = 1;
pub const SUBLANG_HEBREW_ISRAEL: u32 = 1;
pub const SUBLANG_HINDI_INDIA: u32 = 1;
pub const SUBLANG_HUNGARIAN_HUNGARY: u32 = 1;
pub const SUBLANG_ICELANDIC_ICELAND: u32 = 1;
pub const SUBLANG_IGBO_NIGERIA: u32 = 1;
pub const SUBLANG_INDONESIAN_INDONESIA: u32 = 1;
pub const SUBLANG_INUKTITUT_CANADA: u32 = 1;
pub const SUBLANG_INUKTITUT_CANADA_LATIN: u32 = 2;
pub const SUBLANG_IRISH_IRELAND: u32 = 2;
pub const SUBLANG_ITALIAN: u32 = 1;
pub const SUBLANG_ITALIAN_SWISS: u32 = 2;
pub const SUBLANG_JAPANESE_JAPAN: u32 = 1;
pub const SUBLANG_KANNADA_INDIA: u32 = 1;
pub const SUBLANG_KASHMIRI_SASIA: u32 = 2;
pub const SUBLANG_KASHMIRI_INDIA: u32 = 2;
pub const SUBLANG_KAZAK_KAZAKHSTAN: u32 = 1;
pub const SUBLANG_KHMER_CAMBODIA: u32 = 1;
pub const SUBLANG_KICHE_GUATEMALA: u32 = 1;
pub const SUBLANG_KINYARWANDA_RWANDA: u32 = 1;
pub const SUBLANG_KONKANI_INDIA: u32 = 1;
pub const SUBLANG_KOREAN: u32 = 1;
pub const SUBLANG_KYRGYZ_KYRGYZSTAN: u32 = 1;
pub const SUBLANG_LAO_LAO: u32 = 1;
pub const SUBLANG_LATVIAN_LATVIA: u32 = 1;
pub const SUBLANG_LITHUANIAN: u32 = 1;
pub const SUBLANG_LOWER_SORBIAN_GERMANY: u32 = 2;
pub const SUBLANG_LUXEMBOURGISH_LUXEMBOURG: u32 = 1;
pub const SUBLANG_MACEDONIAN_MACEDONIA: u32 = 1;
pub const SUBLANG_MALAY_MALAYSIA: u32 = 1;
pub const SUBLANG_MALAY_BRUNEI_DARUSSALAM: u32 = 2;
pub const SUBLANG_MALAYALAM_INDIA: u32 = 1;
pub const SUBLANG_MALTESE_MALTA: u32 = 1;
pub const SUBLANG_MAORI_NEW_ZEALAND: u32 = 1;
pub const SUBLANG_MAPUDUNGUN_CHILE: u32 = 1;
pub const SUBLANG_MARATHI_INDIA: u32 = 1;
pub const SUBLANG_MOHAWK_MOHAWK: u32 = 1;
pub const SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA: u32 = 1;
pub const SUBLANG_MONGOLIAN_PRC: u32 = 2;
pub const SUBLANG_NEPALI_INDIA: u32 = 2;
pub const SUBLANG_NEPALI_NEPAL: u32 = 1;
pub const SUBLANG_NORWEGIAN_BOKMAL: u32 = 1;
pub const SUBLANG_NORWEGIAN_NYNORSK: u32 = 2;
pub const SUBLANG_OCCITAN_FRANCE: u32 = 1;
pub const SUBLANG_ODIA_INDIA: u32 = 1;
pub const SUBLANG_ORIYA_INDIA: u32 = 1;
pub const SUBLANG_PASHTO_AFGHANISTAN: u32 = 1;
pub const SUBLANG_PERSIAN_IRAN: u32 = 1;
pub const SUBLANG_POLISH_POLAND: u32 = 1;
pub const SUBLANG_PORTUGUESE: u32 = 2;
pub const SUBLANG_PORTUGUESE_BRAZILIAN: u32 = 1;
pub const SUBLANG_PULAR_SENEGAL: u32 = 2;
pub const SUBLANG_PUNJABI_INDIA: u32 = 1;
pub const SUBLANG_PUNJABI_PAKISTAN: u32 = 2;
pub const SUBLANG_QUECHUA_BOLIVIA: u32 = 1;
pub const SUBLANG_QUECHUA_ECUADOR: u32 = 2;
pub const SUBLANG_QUECHUA_PERU: u32 = 3;
pub const SUBLANG_ROMANIAN_ROMANIA: u32 = 1;
pub const SUBLANG_ROMANSH_SWITZERLAND: u32 = 1;
pub const SUBLANG_RUSSIAN_RUSSIA: u32 = 1;
pub const SUBLANG_SAKHA_RUSSIA: u32 = 1;
pub const SUBLANG_SAMI_NORTHERN_NORWAY: u32 = 1;
pub const SUBLANG_SAMI_NORTHERN_SWEDEN: u32 = 2;
pub const SUBLANG_SAMI_NORTHERN_FINLAND: u32 = 3;
pub const SUBLANG_SAMI_LULE_NORWAY: u32 = 4;
pub const SUBLANG_SAMI_LULE_SWEDEN: u32 = 5;
pub const SUBLANG_SAMI_SOUTHERN_NORWAY: u32 = 6;
pub const SUBLANG_SAMI_SOUTHERN_SWEDEN: u32 = 7;
pub const SUBLANG_SAMI_SKOLT_FINLAND: u32 = 8;
pub const SUBLANG_SAMI_INARI_FINLAND: u32 = 9;
pub const SUBLANG_SANSKRIT_INDIA: u32 = 1;
pub const SUBLANG_SCOTTISH_GAELIC: u32 = 1;
pub const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 6;
pub const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC: u32 = 7;
pub const SUBLANG_SERBIAN_MONTENEGRO_LATIN: u32 = 11;
pub const SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC: u32 = 12;
pub const SUBLANG_SERBIAN_SERBIA_LATIN: u32 = 9;
pub const SUBLANG_SERBIAN_SERBIA_CYRILLIC: u32 = 10;
pub const SUBLANG_SERBIAN_CROATIA: u32 = 1;
pub const SUBLANG_SERBIAN_LATIN: u32 = 2;
pub const SUBLANG_SERBIAN_CYRILLIC: u32 = 3;
pub const SUBLANG_SINDHI_INDIA: u32 = 1;
pub const SUBLANG_SINDHI_PAKISTAN: u32 = 2;
pub const SUBLANG_SINDHI_AFGHANISTAN: u32 = 2;
pub const SUBLANG_SINHALESE_SRI_LANKA: u32 = 1;
pub const SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_SLOVAK_SLOVAKIA: u32 = 1;
pub const SUBLANG_SLOVENIAN_SLOVENIA: u32 = 1;
pub const SUBLANG_SPANISH: u32 = 1;
pub const SUBLANG_SPANISH_MEXICAN: u32 = 2;
pub const SUBLANG_SPANISH_MODERN: u32 = 3;
pub const SUBLANG_SPANISH_GUATEMALA: u32 = 4;
pub const SUBLANG_SPANISH_COSTA_RICA: u32 = 5;
pub const SUBLANG_SPANISH_PANAMA: u32 = 6;
pub const SUBLANG_SPANISH_DOMINICAN_REPUBLIC: u32 = 7;
pub const SUBLANG_SPANISH_VENEZUELA: u32 = 8;
pub const SUBLANG_SPANISH_COLOMBIA: u32 = 9;
pub const SUBLANG_SPANISH_PERU: u32 = 10;
pub const SUBLANG_SPANISH_ARGENTINA: u32 = 11;
pub const SUBLANG_SPANISH_ECUADOR: u32 = 12;
pub const SUBLANG_SPANISH_CHILE: u32 = 13;
pub const SUBLANG_SPANISH_URUGUAY: u32 = 14;
pub const SUBLANG_SPANISH_PARAGUAY: u32 = 15;
pub const SUBLANG_SPANISH_BOLIVIA: u32 = 16;
pub const SUBLANG_SPANISH_EL_SALVADOR: u32 = 17;
pub const SUBLANG_SPANISH_HONDURAS: u32 = 18;
pub const SUBLANG_SPANISH_NICARAGUA: u32 = 19;
pub const SUBLANG_SPANISH_PUERTO_RICO: u32 = 20;
pub const SUBLANG_SPANISH_US: u32 = 21;
pub const SUBLANG_SWAHILI_KENYA: u32 = 1;
pub const SUBLANG_SWEDISH: u32 = 1;
pub const SUBLANG_SWEDISH_FINLAND: u32 = 2;
pub const SUBLANG_SYRIAC_SYRIA: u32 = 1;
pub const SUBLANG_TAJIK_TAJIKISTAN: u32 = 1;
pub const SUBLANG_TAMAZIGHT_ALGERIA_LATIN: u32 = 2;
pub const SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH: u32 = 4;
pub const SUBLANG_TAMIL_INDIA: u32 = 1;
pub const SUBLANG_TAMIL_SRI_LANKA: u32 = 2;
pub const SUBLANG_TATAR_RUSSIA: u32 = 1;
pub const SUBLANG_TELUGU_INDIA: u32 = 1;
pub const SUBLANG_THAI_THAILAND: u32 = 1;
pub const SUBLANG_TIBETAN_PRC: u32 = 1;
pub const SUBLANG_TIGRIGNA_ERITREA: u32 = 2;
pub const SUBLANG_TIGRINYA_ERITREA: u32 = 2;
pub const SUBLANG_TIGRINYA_ETHIOPIA: u32 = 1;
pub const SUBLANG_TSWANA_BOTSWANA: u32 = 2;
pub const SUBLANG_TSWANA_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_TURKISH_TURKEY: u32 = 1;
pub const SUBLANG_TURKMEN_TURKMENISTAN: u32 = 1;
pub const SUBLANG_UIGHUR_PRC: u32 = 1;
pub const SUBLANG_UKRAINIAN_UKRAINE: u32 = 1;
pub const SUBLANG_UPPER_SORBIAN_GERMANY: u32 = 1;
pub const SUBLANG_URDU_PAKISTAN: u32 = 1;
pub const SUBLANG_URDU_INDIA: u32 = 2;
pub const SUBLANG_UZBEK_LATIN: u32 = 1;
pub const SUBLANG_UZBEK_CYRILLIC: u32 = 2;
pub const SUBLANG_VALENCIAN_VALENCIA: u32 = 2;
pub const SUBLANG_VIETNAMESE_VIETNAM: u32 = 1;
pub const SUBLANG_WELSH_UNITED_KINGDOM: u32 = 1;
pub const SUBLANG_WOLOF_SENEGAL: u32 = 1;
pub const SUBLANG_XHOSA_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_YAKUT_RUSSIA: u32 = 1;
pub const SUBLANG_YI_PRC: u32 = 1;
pub const SUBLANG_YORUBA_NIGERIA: u32 = 1;
pub const SUBLANG_ZULU_SOUTH_AFRICA: u32 = 1;
pub const SORT_DEFAULT: u32 = 0;
pub const SORT_INVARIANT_MATH: u32 = 1;
pub const SORT_JAPANESE_XJIS: u32 = 0;
pub const SORT_JAPANESE_UNICODE: u32 = 1;
pub const SORT_JAPANESE_RADICALSTROKE: u32 = 4;
pub const SORT_CHINESE_BIG5: u32 = 0;
pub const SORT_CHINESE_PRCP: u32 = 0;
pub const SORT_CHINESE_UNICODE: u32 = 1;
pub const SORT_CHINESE_PRC: u32 = 2;
pub const SORT_CHINESE_BOPOMOFO: u32 = 3;
pub const SORT_CHINESE_RADICALSTROKE: u32 = 4;
pub const SORT_KOREAN_KSC: u32 = 0;
pub const SORT_KOREAN_UNICODE: u32 = 1;
pub const SORT_GERMAN_PHONE_BOOK: u32 = 1;
pub const SORT_HUNGARIAN_DEFAULT: u32 = 0;
pub const SORT_HUNGARIAN_TECHNICAL: u32 = 1;
pub const SORT_GEORGIAN_TRADITIONAL: u32 = 0;
pub const SORT_GEORGIAN_MODERN: u32 = 1;
pub const NLS_VALID_LOCALE_MASK: u32 = 1048575;
pub const LOCALE_NAME_MAX_LENGTH: u32 = 85;
pub const LOCALE_TRANSIENT_KEYBOARD1: u32 = 8192;
pub const LOCALE_TRANSIENT_KEYBOARD2: u32 = 9216;
pub const LOCALE_TRANSIENT_KEYBOARD3: u32 = 10240;
pub const LOCALE_TRANSIENT_KEYBOARD4: u32 = 11264;
pub const MAXIMUM_WAIT_OBJECTS: u32 = 64;
pub const MAXIMUM_SUSPEND_COUNT: u32 = 127;
pub const _MM_HINT_T0: u32 = 1;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 3;
pub const _MM_HINT_NTA: u32 = 0;
pub const PF_TEMPORAL_LEVEL_1: u32 = 1;
pub const PF_TEMPORAL_LEVEL_2: u32 = 2;
pub const PF_TEMPORAL_LEVEL_3: u32 = 3;
pub const PF_NON_TEMPORAL_LEVEL_ALL: u32 = 0;
pub const EXCEPTION_READ_FAULT: u32 = 0;
pub const EXCEPTION_WRITE_FAULT: u32 = 1;
pub const EXCEPTION_EXECUTE_FAULT: u32 = 8;
pub const CONTEXT_AMD64: u32 = 1048576;
pub const CONTEXT_CONTROL: u32 = 1048577;
pub const CONTEXT_INTEGER: u32 = 1048578;
pub const CONTEXT_SEGMENTS: u32 = 1048580;
pub const CONTEXT_FLOATING_POINT: u32 = 1048584;
pub const CONTEXT_DEBUG_REGISTERS: u32 = 1048592;
pub const CONTEXT_FULL: u32 = 1048587;
pub const CONTEXT_ALL: u32 = 1048607;
pub const CONTEXT_XSTATE: u32 = 1048640;
pub const CONTEXT_KERNEL_CET: u32 = 1048704;
pub const CONTEXT_EXCEPTION_ACTIVE: u32 = 134217728;
pub const CONTEXT_SERVICE_ACTIVE: u32 = 268435456;
pub const CONTEXT_EXCEPTION_REQUEST: u32 = 1073741824;
pub const CONTEXT_EXCEPTION_REPORTING: u32 = 2147483648;
pub const CONTEXT_UNWOUND_TO_CALL: u32 = 536870912;
pub const INITIAL_MXCSR: u32 = 8064;
pub const INITIAL_FPCSR: u32 = 639;
pub const RUNTIME_FUNCTION_INDIRECT: u32 = 1;
pub const UNW_FLAG_NHANDLER: u32 = 0;
pub const UNW_FLAG_EHANDLER: u32 = 1;
pub const UNW_FLAG_UHANDLER: u32 = 2;
pub const UNW_FLAG_CHAININFO: u32 = 4;
pub const UNW_FLAG_NO_EPILOGUE: u32 = 2147483648;
pub const UNWIND_CHAIN_LIMIT: u32 = 32;
pub const OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME: &[u8; 34] =
  b"OutOfProcessFunctionTableCallback\0";
pub const CONTEXT_ARM64: u32 = 4194304;
pub const CONTEXT_ARM64_CONTROL: u32 = 4194305;
pub const CONTEXT_ARM64_INTEGER: u32 = 4194306;
pub const CONTEXT_ARM64_FLOATING_POINT: u32 = 4194308;
pub const CONTEXT_ARM64_DEBUG_REGISTERS: u32 = 4194312;
pub const CONTEXT_ARM64_X18: u32 = 4194320;
pub const CONTEXT_ARM64_FULL: u32 = 4194311;
pub const CONTEXT_ARM64_ALL: u32 = 4194335;
pub const CONTEXT_ARM64_UNWOUND_TO_CALL: u32 = 536870912;
pub const CONTEXT_ARM64_RET_TO_GUEST: u32 = 67108864;
pub const ARM64_MAX_BREAKPOINTS: u32 = 8;
pub const ARM64_MAX_WATCHPOINTS: u32 = 2;
pub const NONVOL_INT_NUMREG_ARM64: u32 = 11;
pub const NONVOL_FP_NUMREG_ARM64: u32 = 8;
pub const WOW64_CONTEXT_i386: u32 = 65536;
pub const WOW64_CONTEXT_i486: u32 = 65536;
pub const WOW64_CONTEXT_CONTROL: u32 = 65537;
pub const WOW64_CONTEXT_INTEGER: u32 = 65538;
pub const WOW64_CONTEXT_SEGMENTS: u32 = 65540;
pub const WOW64_CONTEXT_FLOATING_POINT: u32 = 65544;
pub const WOW64_CONTEXT_DEBUG_REGISTERS: u32 = 65552;
pub const WOW64_CONTEXT_EXTENDED_REGISTERS: u32 = 65568;
pub const WOW64_CONTEXT_FULL: u32 = 65543;
pub const WOW64_CONTEXT_ALL: u32 = 65599;
pub const WOW64_CONTEXT_XSTATE: u32 = 65600;
pub const WOW64_CONTEXT_EXCEPTION_ACTIVE: u32 = 134217728;
pub const WOW64_CONTEXT_SERVICE_ACTIVE: u32 = 268435456;
pub const WOW64_CONTEXT_EXCEPTION_REQUEST: u32 = 1073741824;
pub const WOW64_CONTEXT_EXCEPTION_REPORTING: u32 = 2147483648;
pub const WOW64_SIZE_OF_80387_REGISTERS: u32 = 80;
pub const WOW64_MAXIMUM_SUPPORTED_EXTENSION: u32 = 512;
pub const EXCEPTION_NONCONTINUABLE: u32 = 1;
pub const EXCEPTION_UNWINDING: u32 = 2;
pub const EXCEPTION_EXIT_UNWIND: u32 = 4;
pub const EXCEPTION_STACK_INVALID: u32 = 8;
pub const EXCEPTION_NESTED_CALL: u32 = 16;
pub const EXCEPTION_TARGET_UNWIND: u32 = 32;
pub const EXCEPTION_COLLIDED_UNWIND: u32 = 64;
pub const EXCEPTION_SOFTWARE_ORIGINATE: u32 = 128;
pub const EXCEPTION_UNWIND: u32 = 102;
pub const EXCEPTION_MAXIMUM_PARAMETERS: u32 = 15;
pub const DELETE: u32 = 65536;
pub const READ_CONTROL: u32 = 131072;
pub const WRITE_DAC: u32 = 262144;
pub const WRITE_OWNER: u32 = 524288;
pub const SYNCHRONIZE: u32 = 1048576;
pub const STANDARD_RIGHTS_REQUIRED: u32 = 983040;
pub const STANDARD_RIGHTS_READ: u32 = 131072;
pub const STANDARD_RIGHTS_WRITE: u32 = 131072;
pub const STANDARD_RIGHTS_EXECUTE: u32 = 131072;
pub const STANDARD_RIGHTS_ALL: u32 = 2031616;
pub const SPECIFIC_RIGHTS_ALL: u32 = 65535;
pub const ACCESS_SYSTEM_SECURITY: u32 = 16777216;
pub const MAXIMUM_ALLOWED: u32 = 33554432;
pub const GENERIC_READ: u32 = 2147483648;
pub const GENERIC_WRITE: u32 = 1073741824;
pub const GENERIC_EXECUTE: u32 = 536870912;
pub const GENERIC_ALL: u32 = 268435456;
pub const SID_REVISION: u32 = 1;
pub const SID_MAX_SUB_AUTHORITIES: u32 = 15;
pub const SID_RECOMMENDED_SUB_AUTHORITIES: u32 = 1;
pub const SECURITY_MAX_SID_STRING_CHARACTERS: u32 = 187;
pub const SID_HASH_SIZE: u32 = 32;
pub const SECURITY_NULL_RID: u32 = 0;
pub const SECURITY_WORLD_RID: u32 = 0;
pub const SECURITY_LOCAL_RID: u32 = 0;
pub const SECURITY_LOCAL_LOGON_RID: u32 = 1;
pub const SECURITY_CREATOR_OWNER_RID: u32 = 0;
pub const SECURITY_CREATOR_GROUP_RID: u32 = 1;
pub const SECURITY_CREATOR_OWNER_SERVER_RID: u32 = 2;
pub const SECURITY_CREATOR_GROUP_SERVER_RID: u32 = 3;
pub const SECURITY_CREATOR_OWNER_RIGHTS_RID: u32 = 4;
pub const SECURITY_DIALUP_RID: u32 = 1;
pub const SECURITY_NETWORK_RID: u32 = 2;
pub const SECURITY_BATCH_RID: u32 = 3;
pub const SECURITY_INTERACTIVE_RID: u32 = 4;
pub const SECURITY_LOGON_IDS_RID: u32 = 5;
pub const SECURITY_LOGON_IDS_RID_COUNT: u32 = 3;
pub const SECURITY_SERVICE_RID: u32 = 6;
pub const SECURITY_ANONYMOUS_LOGON_RID: u32 = 7;
pub const SECURITY_PROXY_RID: u32 = 8;
pub const SECURITY_ENTERPRISE_CONTROLLERS_RID: u32 = 9;
pub const SECURITY_SERVER_LOGON_RID: u32 = 9;
pub const SECURITY_PRINCIPAL_SELF_RID: u32 = 10;
pub const SECURITY_AUTHENTICATED_USER_RID: u32 = 11;
pub const SECURITY_RESTRICTED_CODE_RID: u32 = 12;
pub const SECURITY_TERMINAL_SERVER_RID: u32 = 13;
pub const SECURITY_REMOTE_LOGON_RID: u32 = 14;
pub const SECURITY_THIS_ORGANIZATION_RID: u32 = 15;
pub const SECURITY_IUSER_RID: u32 = 17;
pub const SECURITY_LOCAL_SYSTEM_RID: u32 = 18;
pub const SECURITY_LOCAL_SERVICE_RID: u32 = 19;
pub const SECURITY_NETWORK_SERVICE_RID: u32 = 20;
pub const SECURITY_NT_NON_UNIQUE: u32 = 21;
pub const SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT: u32 = 3;
pub const SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID: u32 = 22;
pub const SECURITY_BUILTIN_DOMAIN_RID: u32 = 32;
pub const SECURITY_WRITE_RESTRICTED_CODE_RID: u32 = 33;
pub const SECURITY_PACKAGE_BASE_RID: u32 = 64;
pub const SECURITY_PACKAGE_RID_COUNT: u32 = 2;
pub const SECURITY_PACKAGE_NTLM_RID: u32 = 10;
pub const SECURITY_PACKAGE_SCHANNEL_RID: u32 = 14;
pub const SECURITY_PACKAGE_DIGEST_RID: u32 = 21;
pub const SECURITY_CRED_TYPE_BASE_RID: u32 = 65;
pub const SECURITY_CRED_TYPE_RID_COUNT: u32 = 2;
pub const SECURITY_CRED_TYPE_THIS_ORG_CERT_RID: u32 = 1;
pub const SECURITY_MIN_BASE_RID: u32 = 80;
pub const SECURITY_SERVICE_ID_BASE_RID: u32 = 80;
pub const SECURITY_SERVICE_ID_RID_COUNT: u32 = 6;
pub const SECURITY_RESERVED_ID_BASE_RID: u32 = 81;
pub const SECURITY_APPPOOL_ID_BASE_RID: u32 = 82;
pub const SECURITY_APPPOOL_ID_RID_COUNT: u32 = 6;
pub const SECURITY_VIRTUALSERVER_ID_BASE_RID: u32 = 83;
pub const SECURITY_VIRTUALSERVER_ID_RID_COUNT: u32 = 6;
pub const SECURITY_USERMODEDRIVERHOST_ID_BASE_RID: u32 = 84;
pub const SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT: u32 = 6;
pub const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID: u32 = 85;
pub const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT: u32 = 6;
pub const SECURITY_WMIHOST_ID_BASE_RID: u32 = 86;
pub const SECURITY_WMIHOST_ID_RID_COUNT: u32 = 6;
pub const SECURITY_TASK_ID_BASE_RID: u32 = 87;
pub const SECURITY_NFS_ID_BASE_RID: u32 = 88;
pub const SECURITY_COM_ID_BASE_RID: u32 = 89;
pub const SECURITY_WINDOW_MANAGER_BASE_RID: u32 = 90;
pub const SECURITY_RDV_GFX_BASE_RID: u32 = 91;
pub const SECURITY_DASHOST_ID_BASE_RID: u32 = 92;
pub const SECURITY_DASHOST_ID_RID_COUNT: u32 = 6;
pub const SECURITY_USERMANAGER_ID_BASE_RID: u32 = 93;
pub const SECURITY_USERMANAGER_ID_RID_COUNT: u32 = 6;
pub const SECURITY_WINRM_ID_BASE_RID: u32 = 94;
pub const SECURITY_WINRM_ID_RID_COUNT: u32 = 6;
pub const SECURITY_CCG_ID_BASE_RID: u32 = 95;
pub const SECURITY_UMFD_BASE_RID: u32 = 96;
pub const SECURITY_VIRTUALACCOUNT_ID_RID_COUNT: u32 = 6;
pub const SECURITY_MAX_BASE_RID: u32 = 111;
pub const SECURITY_MAX_ALWAYS_FILTERED: u32 = 999;
pub const SECURITY_MIN_NEVER_FILTERED: u32 = 1000;
pub const SECURITY_OTHER_ORGANIZATION_RID: u32 = 1000;
pub const SECURITY_WINDOWSMOBILE_ID_BASE_RID: u32 = 112;
pub const SECURITY_INSTALLER_GROUP_CAPABILITY_BASE: u32 = 32;
pub const SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT: u32 = 9;
pub const SECURITY_INSTALLER_CAPABILITY_RID_COUNT: u32 = 10;
pub const SECURITY_LOCAL_ACCOUNT_RID: u32 = 113;
pub const SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID: u32 = 114;
pub const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED: u32 = 496;
pub const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS: u32 = 497;
pub const DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS: u32 = 498;
pub const FOREST_USER_RID_MAX: u32 = 499;
pub const DOMAIN_USER_RID_ADMIN: u32 = 500;
pub const DOMAIN_USER_RID_GUEST: u32 = 501;
pub const DOMAIN_USER_RID_KRBTGT: u32 = 502;
pub const DOMAIN_USER_RID_DEFAULT_ACCOUNT: u32 = 503;
pub const DOMAIN_USER_RID_WDAG_ACCOUNT: u32 = 504;
pub const DOMAIN_USER_RID_MAX: u32 = 999;
pub const DOMAIN_GROUP_RID_ADMINS: u32 = 512;
pub const DOMAIN_GROUP_RID_USERS: u32 = 513;
pub const DOMAIN_GROUP_RID_GUESTS: u32 = 514;
pub const DOMAIN_GROUP_RID_COMPUTERS: u32 = 515;
pub const DOMAIN_GROUP_RID_CONTROLLERS: u32 = 516;
pub const DOMAIN_GROUP_RID_CERT_ADMINS: u32 = 517;
pub const DOMAIN_GROUP_RID_SCHEMA_ADMINS: u32 = 518;
pub const DOMAIN_GROUP_RID_ENTERPRISE_ADMINS: u32 = 519;
pub const DOMAIN_GROUP_RID_POLICY_ADMINS: u32 = 520;
pub const DOMAIN_GROUP_RID_READONLY_CONTROLLERS: u32 = 521;
pub const DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS: u32 = 522;
pub const DOMAIN_GROUP_RID_CDC_RESERVED: u32 = 524;
pub const DOMAIN_GROUP_RID_PROTECTED_USERS: u32 = 525;
pub const DOMAIN_GROUP_RID_KEY_ADMINS: u32 = 526;
pub const DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS: u32 = 527;
pub const DOMAIN_ALIAS_RID_ADMINS: u32 = 544;
pub const DOMAIN_ALIAS_RID_USERS: u32 = 545;
pub const DOMAIN_ALIAS_RID_GUESTS: u32 = 546;
pub const DOMAIN_ALIAS_RID_POWER_USERS: u32 = 547;
pub const DOMAIN_ALIAS_RID_ACCOUNT_OPS: u32 = 548;
pub const DOMAIN_ALIAS_RID_SYSTEM_OPS: u32 = 549;
pub const DOMAIN_ALIAS_RID_PRINT_OPS: u32 = 550;
pub const DOMAIN_ALIAS_RID_BACKUP_OPS: u32 = 551;
pub const DOMAIN_ALIAS_RID_REPLICATOR: u32 = 552;
pub const DOMAIN_ALIAS_RID_RAS_SERVERS: u32 = 553;
pub const DOMAIN_ALIAS_RID_PREW2KCOMPACCESS: u32 = 554;
pub const DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS: u32 = 555;
pub const DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS: u32 = 556;
pub const DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS: u32 = 557;
pub const DOMAIN_ALIAS_RID_MONITORING_USERS: u32 = 558;
pub const DOMAIN_ALIAS_RID_LOGGING_USERS: u32 = 559;
pub const DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS: u32 = 560;
pub const DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS: u32 = 561;
pub const DOMAIN_ALIAS_RID_DCOM_USERS: u32 = 562;
pub const DOMAIN_ALIAS_RID_IUSERS: u32 = 568;
pub const DOMAIN_ALIAS_RID_CRYPTO_OPERATORS: u32 = 569;
pub const DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP: u32 = 571;
pub const DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP: u32 = 572;
pub const DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP: u32 = 573;
pub const DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP: u32 = 574;
pub const DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS: u32 = 575;
pub const DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS: u32 = 576;
pub const DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS: u32 = 577;
pub const DOMAIN_ALIAS_RID_HYPER_V_ADMINS: u32 = 578;
pub const DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS: u32 = 579;
pub const DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS: u32 = 580;
pub const DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT: u32 = 581;
pub const DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS: u32 = 582;
pub const DOMAIN_ALIAS_RID_DEVICE_OWNERS: u32 = 583;
pub const SECURITY_APP_PACKAGE_BASE_RID: u32 = 2;
pub const SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT: u32 = 2;
pub const SECURITY_APP_PACKAGE_RID_COUNT: u32 = 8;
pub const SECURITY_CAPABILITY_BASE_RID: u32 = 3;
pub const SECURITY_CAPABILITY_APP_RID: u32 = 1024;
pub const SECURITY_CAPABILITY_APP_SILO_RID: u32 = 65536;
pub const SECURITY_BUILTIN_CAPABILITY_RID_COUNT: u32 = 2;
pub const SECURITY_CAPABILITY_RID_COUNT: u32 = 5;
pub const SECURITY_PARENT_PACKAGE_RID_COUNT: u32 = 8;
pub const SECURITY_CHILD_PACKAGE_RID_COUNT: u32 = 12;
pub const SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE: u32 = 1;
pub const SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE: u32 = 2;
pub const SECURITY_CAPABILITY_INTERNET_CLIENT: u32 = 1;
pub const SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER: u32 = 2;
pub const SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER: u32 = 3;
pub const SECURITY_CAPABILITY_PICTURES_LIBRARY: u32 = 4;
pub const SECURITY_CAPABILITY_VIDEOS_LIBRARY: u32 = 5;
pub const SECURITY_CAPABILITY_MUSIC_LIBRARY: u32 = 6;
pub const SECURITY_CAPABILITY_DOCUMENTS_LIBRARY: u32 = 7;
pub const SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION: u32 = 8;
pub const SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES: u32 = 9;
pub const SECURITY_CAPABILITY_REMOVABLE_STORAGE: u32 = 10;
pub const SECURITY_CAPABILITY_APPOINTMENTS: u32 = 11;
pub const SECURITY_CAPABILITY_CONTACTS: u32 = 12;
pub const SECURITY_CAPABILITY_INTERNET_EXPLORER: u32 = 4096;
pub const SECURITY_MANDATORY_UNTRUSTED_RID: u32 = 0;
pub const SECURITY_MANDATORY_LOW_RID: u32 = 4096;
pub const SECURITY_MANDATORY_MEDIUM_RID: u32 = 8192;
pub const SECURITY_MANDATORY_MEDIUM_PLUS_RID: u32 = 8448;
pub const SECURITY_MANDATORY_HIGH_RID: u32 = 12288;
pub const SECURITY_MANDATORY_SYSTEM_RID: u32 = 16384;
pub const SECURITY_MANDATORY_PROTECTED_PROCESS_RID: u32 = 20480;
pub const SECURITY_MANDATORY_MAXIMUM_USER_RID: u32 = 16384;
pub const SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT: u32 = 1;
pub const SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID: u32 = 1;
pub const SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID: u32 = 2;
pub const SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID: u32 = 3;
pub const SECURITY_AUTHENTICATION_KEY_TRUST_RID: u32 = 4;
pub const SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID: u32 = 5;
pub const SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID: u32 = 6;
pub const SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT: u32 = 2;
pub const SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID: u32 = 1024;
pub const SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID: u32 = 512;
pub const SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID: u32 = 0;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID: u32 = 8192;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID: u32 = 4096;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID: u32 = 2048;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID: u32 = 1536;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID: u32 = 1024;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID: u32 = 0;
pub const SECURITY_TRUSTED_INSTALLER_RID1: u32 = 956008885;
pub const SECURITY_TRUSTED_INSTALLER_RID2: u32 = 3418522649;
pub const SECURITY_TRUSTED_INSTALLER_RID3: u32 = 1831038044;
pub const SECURITY_TRUSTED_INSTALLER_RID4: u32 = 1853292631;
pub const SECURITY_TRUSTED_INSTALLER_RID5: u32 = 2271478464;
pub const SE_GROUP_MANDATORY: u32 = 1;
pub const SE_GROUP_ENABLED_BY_DEFAULT: u32 = 2;
pub const SE_GROUP_ENABLED: u32 = 4;
pub const SE_GROUP_OWNER: u32 = 8;
pub const SE_GROUP_USE_FOR_DENY_ONLY: u32 = 16;
pub const SE_GROUP_INTEGRITY: u32 = 32;
pub const SE_GROUP_INTEGRITY_ENABLED: u32 = 64;
pub const SE_GROUP_LOGON_ID: u32 = 3221225472;
pub const SE_GROUP_RESOURCE: u32 = 536870912;
pub const SE_GROUP_VALID_ATTRIBUTES: u32 = 3758096511;
pub const ACL_REVISION: u32 = 2;
pub const ACL_REVISION_DS: u32 = 4;
pub const ACL_REVISION1: u32 = 1;
pub const ACL_REVISION2: u32 = 2;
pub const ACL_REVISION3: u32 = 3;
pub const ACL_REVISION4: u32 = 4;
pub const MAX_ACL_REVISION: u32 = 4;
pub const ACCESS_MIN_MS_ACE_TYPE: u32 = 0;
pub const ACCESS_ALLOWED_ACE_TYPE: u32 = 0;
pub const ACCESS_DENIED_ACE_TYPE: u32 = 1;
pub const SYSTEM_AUDIT_ACE_TYPE: u32 = 2;
pub const SYSTEM_ALARM_ACE_TYPE: u32 = 3;
pub const ACCESS_MAX_MS_V2_ACE_TYPE: u32 = 3;
pub const ACCESS_ALLOWED_COMPOUND_ACE_TYPE: u32 = 4;
pub const ACCESS_MAX_MS_V3_ACE_TYPE: u32 = 4;
pub const ACCESS_MIN_MS_OBJECT_ACE_TYPE: u32 = 5;
pub const ACCESS_ALLOWED_OBJECT_ACE_TYPE: u32 = 5;
pub const ACCESS_DENIED_OBJECT_ACE_TYPE: u32 = 6;
pub const SYSTEM_AUDIT_OBJECT_ACE_TYPE: u32 = 7;
pub const SYSTEM_ALARM_OBJECT_ACE_TYPE: u32 = 8;
pub const ACCESS_MAX_MS_OBJECT_ACE_TYPE: u32 = 8;
pub const ACCESS_MAX_MS_V4_ACE_TYPE: u32 = 8;
pub const ACCESS_MAX_MS_ACE_TYPE: u32 = 8;
pub const ACCESS_ALLOWED_CALLBACK_ACE_TYPE: u32 = 9;
pub const ACCESS_DENIED_CALLBACK_ACE_TYPE: u32 = 10;
pub const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE: u32 = 11;
pub const ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE: u32 = 12;
pub const SYSTEM_AUDIT_CALLBACK_ACE_TYPE: u32 = 13;
pub const SYSTEM_ALARM_CALLBACK_ACE_TYPE: u32 = 14;
pub const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE: u32 = 15;
pub const SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE: u32 = 16;
pub const SYSTEM_MANDATORY_LABEL_ACE_TYPE: u32 = 17;
pub const SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE: u32 = 18;
pub const SYSTEM_SCOPED_POLICY_ID_ACE_TYPE: u32 = 19;
pub const SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE: u32 = 20;
pub const SYSTEM_ACCESS_FILTER_ACE_TYPE: u32 = 21;
pub const ACCESS_MAX_MS_V5_ACE_TYPE: u32 = 21;
pub const OBJECT_INHERIT_ACE: u32 = 1;
pub const CONTAINER_INHERIT_ACE: u32 = 2;
pub const NO_PROPAGATE_INHERIT_ACE: u32 = 4;
pub const INHERIT_ONLY_ACE: u32 = 8;
pub const INHERITED_ACE: u32 = 16;
pub const VALID_INHERIT_FLAGS: u32 = 31;
pub const CRITICAL_ACE_FLAG: u32 = 32;
pub const SUCCESSFUL_ACCESS_ACE_FLAG: u32 = 64;
pub const FAILED_ACCESS_ACE_FLAG: u32 = 128;
pub const TRUST_PROTECTED_FILTER_ACE_FLAG: u32 = 64;
pub const SYSTEM_MANDATORY_LABEL_NO_WRITE_UP: u32 = 1;
pub const SYSTEM_MANDATORY_LABEL_NO_READ_UP: u32 = 2;
pub const SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP: u32 = 4;
pub const SYSTEM_MANDATORY_LABEL_VALID_MASK: u32 = 7;
pub const SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK: u32 = 16777215;
pub const SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK: u32 = 4294967295;
pub const SYSTEM_ACCESS_FILTER_VALID_MASK: u32 = 16777215;
pub const SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK: u32 = 4294967295;
pub const ACE_OBJECT_TYPE_PRESENT: u32 = 1;
pub const ACE_INHERITED_OBJECT_TYPE_PRESENT: u32 = 2;
pub const SECURITY_DESCRIPTOR_REVISION: u32 = 1;
pub const SECURITY_DESCRIPTOR_REVISION1: u32 = 1;
pub const SE_OWNER_DEFAULTED: u32 = 1;
pub const SE_GROUP_DEFAULTED: u32 = 2;
pub const SE_DACL_PRESENT: u32 = 4;
pub const SE_DACL_DEFAULTED: u32 = 8;
pub const SE_SACL_PRESENT: u32 = 16;
pub const SE_SACL_DEFAULTED: u32 = 32;
pub const SE_DACL_AUTO_INHERIT_REQ: u32 = 256;
pub const SE_SACL_AUTO_INHERIT_REQ: u32 = 512;
pub const SE_DACL_AUTO_INHERITED: u32 = 1024;
pub const SE_SACL_AUTO_INHERITED: u32 = 2048;
pub const SE_DACL_PROTECTED: u32 = 4096;
pub const SE_SACL_PROTECTED: u32 = 8192;
pub const SE_RM_CONTROL_VALID: u32 = 16384;
pub const SE_SELF_RELATIVE: u32 = 32768;
pub const ACCESS_OBJECT_GUID: u32 = 0;
pub const ACCESS_PROPERTY_SET_GUID: u32 = 1;
pub const ACCESS_PROPERTY_GUID: u32 = 2;
pub const ACCESS_MAX_LEVEL: u32 = 4;
pub const AUDIT_ALLOW_NO_PRIVILEGE: u32 = 1;
pub const ACCESS_DS_SOURCE_A: &[u8; 3] = b"DS\0";
pub const ACCESS_DS_SOURCE_W: &[u8; 3] = b"DS\0";
pub const ACCESS_DS_OBJECT_TYPE_NAME_A: &[u8; 25] = b"Directory Service Object\0";
pub const ACCESS_DS_OBJECT_TYPE_NAME_W: &[u8; 25] = b"Directory Service Object\0";
pub const SE_PRIVILEGE_ENABLED_BY_DEFAULT: u32 = 1;
pub const SE_PRIVILEGE_ENABLED: u32 = 2;
pub const SE_PRIVILEGE_REMOVED: u32 = 4;
pub const SE_PRIVILEGE_USED_FOR_ACCESS: u32 = 2147483648;
pub const SE_PRIVILEGE_VALID_ATTRIBUTES: u32 = 2147483655;
pub const PRIVILEGE_SET_ALL_NECESSARY: u32 = 1;
pub const ACCESS_REASON_TYPE_MASK: u32 = 16711680;
pub const ACCESS_REASON_DATA_MASK: u32 = 65535;
pub const ACCESS_REASON_STAGING_MASK: u32 = 2147483648;
pub const ACCESS_REASON_EXDATA_MASK: u32 = 2130706432;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE: u32 = 1;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE: u32 = 2;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE: u32 = 4;
pub const SE_SECURITY_DESCRIPTOR_VALID_FLAGS: u32 = 7;
pub const SE_ACCESS_CHECK_FLAG_NO_LEARNING_MODE_LOGGING: u32 = 8;
pub const SE_ACCESS_CHECK_VALID_FLAGS: u32 = 8;
pub const SE_ACTIVATE_AS_USER_CAPABILITY: &[u8; 15] = b"activateAsUser\0";
pub const SE_CONSTRAINED_IMPERSONATION_CAPABILITY: &[u8; 25] = b"constrainedImpersonation\0";
pub const SE_SESSION_IMPERSONATION_CAPABILITY: &[u8; 21] = b"sessionImpersonation\0";
pub const SE_MUMA_CAPABILITY: &[u8; 5] = b"muma\0";
pub const SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY: &[u8; 23] = b"developmentModeNetwork\0";
pub const SE_LEARNING_MODE_LOGGING_CAPABILITY: &[u8; 20] = b"learningModeLogging\0";
pub const SE_PERMISSIVE_LEARNING_MODE_CAPABILITY: &[u8; 23] = b"permissiveLearningMode\0";
pub const SE_APP_SILO_VOLUME_ROOT_MINIMAL_CAPABILITY: &[u8; 32] =
  b"isolatedWin32-volumeRootMinimal\0";
pub const SE_APP_SILO_PROFILES_ROOT_MINIMAL_CAPABILITY: &[u8; 34] =
  b"isolatedWin32-profilesRootMinimal\0";
pub const SE_APP_SILO_USER_PROFILE_MINIMAL_CAPABILITY: &[u8; 33] =
  b"isolatedWin32-userProfileMinimal\0";
pub const SE_APP_SILO_PRINT_CAPABILITY: &[u8; 20] = b"isolatedWin32-print\0";
pub const TOKEN_ASSIGN_PRIMARY: u32 = 1;
pub const TOKEN_DUPLICATE: u32 = 2;
pub const TOKEN_IMPERSONATE: u32 = 4;
pub const TOKEN_QUERY: u32 = 8;
pub const TOKEN_QUERY_SOURCE: u32 = 16;
pub const TOKEN_ADJUST_PRIVILEGES: u32 = 32;
pub const TOKEN_ADJUST_GROUPS: u32 = 64;
pub const TOKEN_ADJUST_DEFAULT: u32 = 128;
pub const TOKEN_ADJUST_SESSIONID: u32 = 256;
pub const TOKEN_ALL_ACCESS_P: u32 = 983295;
pub const TOKEN_ALL_ACCESS: u32 = 983551;
pub const TOKEN_READ: u32 = 131080;
pub const TOKEN_WRITE: u32 = 131296;
pub const TOKEN_EXECUTE: u32 = 131072;
pub const TOKEN_TRUST_CONSTRAINT_MASK: u32 = 131096;
pub const TOKEN_TRUST_ALLOWED_MASK: u32 = 131102;
pub const TOKEN_ACCESS_PSEUDO_HANDLE_WIN8: u32 = 24;
pub const TOKEN_ACCESS_PSEUDO_HANDLE: u32 = 24;
pub const TOKEN_MANDATORY_POLICY_OFF: u32 = 0;
pub const TOKEN_MANDATORY_POLICY_NO_WRITE_UP: u32 = 1;
pub const TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN: u32 = 2;
pub const TOKEN_MANDATORY_POLICY_VALID_MASK: u32 = 3;
pub const POLICY_AUDIT_SUBCATEGORY_COUNT: u32 = 59;
pub const TOKEN_SOURCE_LENGTH: u32 = 8;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID: u32 = 0;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64: u32 = 1;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64: u32 = 2;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING: u32 = 3;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN: u32 = 4;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_SID: u32 = 5;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN: u32 = 6;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING: u32 = 16;
pub const CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE: u32 = 1;
pub const CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE: u32 = 2;
pub const CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY: u32 = 4;
pub const CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT: u32 = 8;
pub const CLAIM_SECURITY_ATTRIBUTE_DISABLED: u32 = 16;
pub const CLAIM_SECURITY_ATTRIBUTE_MANDATORY: u32 = 32;
pub const CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS: u32 = 63;
pub const CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS: u32 = 4294901760;
pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1: u32 = 1;
pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION: u32 = 1;
pub const SECURITY_DYNAMIC_TRACKING: u32 = 1;
pub const SECURITY_STATIC_TRACKING: u32 = 0;
pub const DISABLE_MAX_PRIVILEGE: u32 = 1;
pub const SANDBOX_INERT: u32 = 2;
pub const LUA_TOKEN: u32 = 4;
pub const WRITE_RESTRICTED: u32 = 8;
pub const OWNER_SECURITY_INFORMATION: u32 = 1;
pub const GROUP_SECURITY_INFORMATION: u32 = 2;
pub const DACL_SECURITY_INFORMATION: u32 = 4;
pub const SACL_SECURITY_INFORMATION: u32 = 8;
pub const LABEL_SECURITY_INFORMATION: u32 = 16;
pub const ATTRIBUTE_SECURITY_INFORMATION: u32 = 32;
pub const SCOPE_SECURITY_INFORMATION: u32 = 64;
pub const PROCESS_TRUST_LABEL_SECURITY_INFORMATION: u32 = 128;
pub const ACCESS_FILTER_SECURITY_INFORMATION: u32 = 256;
pub const BACKUP_SECURITY_INFORMATION: u32 = 65536;
pub const PROTECTED_DACL_SECURITY_INFORMATION: u32 = 2147483648;
pub const PROTECTED_SACL_SECURITY_INFORMATION: u32 = 1073741824;
pub const UNPROTECTED_DACL_SECURITY_INFORMATION: u32 = 536870912;
pub const UNPROTECTED_SACL_SECURITY_INFORMATION: u32 = 268435456;
pub const SE_SIGNING_LEVEL_UNCHECKED: u32 = 0;
pub const SE_SIGNING_LEVEL_UNSIGNED: u32 = 1;
pub const SE_SIGNING_LEVEL_ENTERPRISE: u32 = 2;
pub const SE_SIGNING_LEVEL_CUSTOM_1: u32 = 3;
pub const SE_SIGNING_LEVEL_DEVELOPER: u32 = 3;
pub const SE_SIGNING_LEVEL_AUTHENTICODE: u32 = 4;
pub const SE_SIGNING_LEVEL_CUSTOM_2: u32 = 5;
pub const SE_SIGNING_LEVEL_STORE: u32 = 6;
pub const SE_SIGNING_LEVEL_CUSTOM_3: u32 = 7;
pub const SE_SIGNING_LEVEL_ANTIMALWARE: u32 = 7;
pub const SE_SIGNING_LEVEL_MICROSOFT: u32 = 8;
pub const SE_SIGNING_LEVEL_CUSTOM_4: u32 = 9;
pub const SE_SIGNING_LEVEL_CUSTOM_5: u32 = 10;
pub const SE_SIGNING_LEVEL_DYNAMIC_CODEGEN: u32 = 11;
pub const SE_SIGNING_LEVEL_WINDOWS: u32 = 12;
pub const SE_SIGNING_LEVEL_CUSTOM_7: u32 = 13;
pub const SE_SIGNING_LEVEL_WINDOWS_TCB: u32 = 14;
pub const SE_SIGNING_LEVEL_CUSTOM_6: u32 = 15;
pub const PROCESS_TERMINATE: u32 = 1;
pub const PROCESS_CREATE_THREAD: u32 = 2;
pub const PROCESS_SET_SESSIONID: u32 = 4;
pub const PROCESS_VM_OPERATION: u32 = 8;
pub const PROCESS_VM_READ: u32 = 16;
pub const PROCESS_VM_WRITE: u32 = 32;
pub const PROCESS_DUP_HANDLE: u32 = 64;
pub const PROCESS_CREATE_PROCESS: u32 = 128;
pub const PROCESS_SET_QUOTA: u32 = 256;
pub const PROCESS_SET_INFORMATION: u32 = 512;
pub const PROCESS_QUERY_INFORMATION: u32 = 1024;
pub const PROCESS_SUSPEND_RESUME: u32 = 2048;
pub const PROCESS_QUERY_LIMITED_INFORMATION: u32 = 4096;
pub const PROCESS_SET_LIMITED_INFORMATION: u32 = 8192;
pub const PROCESS_ALL_ACCESS: u32 = 2097151;
pub const THREAD_TERMINATE: u32 = 1;
pub const THREAD_SUSPEND_RESUME: u32 = 2;
pub const THREAD_GET_CONTEXT: u32 = 8;
pub const THREAD_SET_CONTEXT: u32 = 16;
pub const THREAD_QUERY_INFORMATION: u32 = 64;
pub const THREAD_SET_INFORMATION: u32 = 32;
pub const THREAD_SET_THREAD_TOKEN: u32 = 128;
pub const THREAD_IMPERSONATE: u32 = 256;
pub const THREAD_DIRECT_IMPERSONATION: u32 = 512;
pub const THREAD_SET_LIMITED_INFORMATION: u32 = 1024;
pub const THREAD_QUERY_LIMITED_INFORMATION: u32 = 2048;
pub const THREAD_RESUME: u32 = 4096;
pub const THREAD_ALL_ACCESS: u32 = 2097151;
pub const JOB_OBJECT_ASSIGN_PROCESS: u32 = 1;
pub const JOB_OBJECT_SET_ATTRIBUTES: u32 = 2;
pub const JOB_OBJECT_QUERY: u32 = 4;
pub const JOB_OBJECT_TERMINATE: u32 = 8;
pub const JOB_OBJECT_SET_SECURITY_ATTRIBUTES: u32 = 16;
pub const JOB_OBJECT_IMPERSONATE: u32 = 32;
pub const JOB_OBJECT_ALL_ACCESS: u32 = 2031679;
pub const FLS_MAXIMUM_AVAILABLE: u32 = 4080;
pub const TLS_MINIMUM_AVAILABLE: u32 = 64;
pub const THREAD_DYNAMIC_CODE_ALLOW: u32 = 1;
pub const THREAD_BASE_PRIORITY_LOWRT: u32 = 15;
pub const THREAD_BASE_PRIORITY_MAX: u32 = 2;
pub const THREAD_BASE_PRIORITY_MIN: i32 = -2;
pub const THREAD_BASE_PRIORITY_IDLE: i32 = -15;
pub const COMPONENT_KTM: u32 = 1;
pub const COMPONENT_VALID_FLAGS: u32 = 1;
pub const MEMORY_PRIORITY_LOWEST: u32 = 0;
pub const MEMORY_PRIORITY_VERY_LOW: u32 = 1;
pub const MEMORY_PRIORITY_LOW: u32 = 2;
pub const MEMORY_PRIORITY_MEDIUM: u32 = 3;
pub const MEMORY_PRIORITY_BELOW_NORMAL: u32 = 4;
pub const MEMORY_PRIORITY_NORMAL: u32 = 5;
pub const DYNAMIC_EH_CONTINUATION_TARGET_ADD: u32 = 1;
pub const DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED: u32 = 2;
pub const DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD: u32 = 1;
pub const DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED: u32 = 2;
pub const QUOTA_LIMITS_HARDWS_MIN_ENABLE: u32 = 1;
pub const QUOTA_LIMITS_HARDWS_MIN_DISABLE: u32 = 2;
pub const QUOTA_LIMITS_HARDWS_MAX_ENABLE: u32 = 4;
pub const QUOTA_LIMITS_HARDWS_MAX_DISABLE: u32 = 8;
pub const QUOTA_LIMITS_USE_DEFAULT_LIMITS: u32 = 16;
pub const MAX_HW_COUNTERS: u32 = 16;
pub const THREAD_PROFILING_FLAG_DISPATCH: u32 = 1;
pub const JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG: u32 = 64;
pub const JOB_OBJECT_TERMINATE_AT_END_OF_JOB: u32 = 0;
pub const JOB_OBJECT_POST_AT_END_OF_JOB: u32 = 1;
pub const JOB_OBJECT_MSG_END_OF_JOB_TIME: u32 = 1;
pub const JOB_OBJECT_MSG_END_OF_PROCESS_TIME: u32 = 2;
pub const JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT: u32 = 3;
pub const JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO: u32 = 4;
pub const JOB_OBJECT_MSG_NEW_PROCESS: u32 = 6;
pub const JOB_OBJECT_MSG_EXIT_PROCESS: u32 = 7;
pub const JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS: u32 = 8;
pub const JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT: u32 = 9;
pub const JOB_OBJECT_MSG_JOB_MEMORY_LIMIT: u32 = 10;
pub const JOB_OBJECT_MSG_NOTIFICATION_LIMIT: u32 = 11;
pub const JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT: u32 = 12;
pub const JOB_OBJECT_MSG_SILO_TERMINATED: u32 = 13;
pub const JOB_OBJECT_MSG_MINIMUM: u32 = 1;
pub const JOB_OBJECT_MSG_MAXIMUM: u32 = 13;
pub const JOB_OBJECT_VALID_COMPLETION_FILTER: u32 = 16382;
pub const JOB_OBJECT_LIMIT_WORKINGSET: u32 = 1;
pub const JOB_OBJECT_LIMIT_PROCESS_TIME: u32 = 2;
pub const JOB_OBJECT_LIMIT_JOB_TIME: u32 = 4;
pub const JOB_OBJECT_LIMIT_ACTIVE_PROCESS: u32 = 8;
pub const JOB_OBJECT_LIMIT_AFFINITY: u32 = 16;
pub const JOB_OBJECT_LIMIT_PRIORITY_CLASS: u32 = 32;
pub const JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME: u32 = 64;
pub const JOB_OBJECT_LIMIT_SCHEDULING_CLASS: u32 = 128;
pub const JOB_OBJECT_LIMIT_PROCESS_MEMORY: u32 = 256;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY: u32 = 512;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH: u32 = 512;
pub const JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION: u32 = 1024;
pub const JOB_OBJECT_LIMIT_BREAKAWAY_OK: u32 = 2048;
pub const JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK: u32 = 4096;
pub const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: u32 = 8192;
pub const JOB_OBJECT_LIMIT_SUBSET_AFFINITY: u32 = 16384;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY_LOW: u32 = 32768;
pub const JOB_OBJECT_LIMIT_JOB_READ_BYTES: u32 = 65536;
pub const JOB_OBJECT_LIMIT_JOB_WRITE_BYTES: u32 = 131072;
pub const JOB_OBJECT_LIMIT_RATE_CONTROL: u32 = 262144;
pub const JOB_OBJECT_LIMIT_CPU_RATE_CONTROL: u32 = 262144;
pub const JOB_OBJECT_LIMIT_IO_RATE_CONTROL: u32 = 524288;
pub const JOB_OBJECT_LIMIT_NET_RATE_CONTROL: u32 = 1048576;
pub const JOB_OBJECT_LIMIT_VALID_FLAGS: u32 = 524287;
pub const JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS: u32 = 255;
pub const JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS: u32 = 32767;
pub const JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS: u32 = 2064900;
pub const JOB_OBJECT_UILIMIT_NONE: u32 = 0;
pub const JOB_OBJECT_UILIMIT_HANDLES: u32 = 1;
pub const JOB_OBJECT_UILIMIT_READCLIPBOARD: u32 = 2;
pub const JOB_OBJECT_UILIMIT_WRITECLIPBOARD: u32 = 4;
pub const JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS: u32 = 8;
pub const JOB_OBJECT_UILIMIT_DISPLAYSETTINGS: u32 = 16;
pub const JOB_OBJECT_UILIMIT_GLOBALATOMS: u32 = 32;
pub const JOB_OBJECT_UILIMIT_DESKTOP: u32 = 64;
pub const JOB_OBJECT_UILIMIT_EXITWINDOWS: u32 = 128;
pub const JOB_OBJECT_UILIMIT_IME: u32 = 256;
pub const JOB_OBJECT_UILIMIT_ALL: u32 = 511;
pub const JOB_OBJECT_UI_VALID_FLAGS: u32 = 511;
pub const JOB_OBJECT_SECURITY_NO_ADMIN: u32 = 1;
pub const JOB_OBJECT_SECURITY_RESTRICTED_TOKEN: u32 = 2;
pub const JOB_OBJECT_SECURITY_ONLY_TOKEN: u32 = 4;
pub const JOB_OBJECT_SECURITY_FILTER_TOKENS: u32 = 8;
pub const JOB_OBJECT_SECURITY_VALID_FLAGS: u32 = 15;
pub const JOB_OBJECT_CPU_RATE_CONTROL_ENABLE: u32 = 1;
pub const JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED: u32 = 2;
pub const JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP: u32 = 4;
pub const JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY: u32 = 8;
pub const JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE: u32 = 16;
pub const JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS: u32 = 31;
pub const MEMORY_PARTITION_QUERY_ACCESS: u32 = 1;
pub const MEMORY_PARTITION_MODIFY_ACCESS: u32 = 2;
pub const MEMORY_PARTITION_ALL_ACCESS: u32 = 2031619;
pub const EVENT_MODIFY_STATE: u32 = 2;
pub const EVENT_ALL_ACCESS: u32 = 2031619;
pub const MUTANT_QUERY_STATE: u32 = 1;
pub const MUTANT_ALL_ACCESS: u32 = 2031617;
pub const SEMAPHORE_MODIFY_STATE: u32 = 2;
pub const SEMAPHORE_ALL_ACCESS: u32 = 2031619;
pub const TIMER_QUERY_STATE: u32 = 1;
pub const TIMER_MODIFY_STATE: u32 = 2;
pub const TIMER_ALL_ACCESS: u32 = 2031619;
pub const TIME_ZONE_ID_UNKNOWN: u32 = 0;
pub const TIME_ZONE_ID_STANDARD: u32 = 1;
pub const TIME_ZONE_ID_DAYLIGHT: u32 = 2;
pub const LTP_PC_SMT: u32 = 1;
pub const CACHE_FULLY_ASSOCIATIVE: u32 = 255;
pub const SYSTEM_CPU_SET_INFORMATION_PARKED: u32 = 1;
pub const SYSTEM_CPU_SET_INFORMATION_ALLOCATED: u32 = 2;
pub const SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS: u32 = 4;
pub const SYSTEM_CPU_SET_INFORMATION_REALTIME: u32 = 8;
pub const PROCESSOR_INTEL_386: u32 = 386;
pub const PROCESSOR_INTEL_486: u32 = 486;
pub const PROCESSOR_INTEL_PENTIUM: u32 = 586;
pub const PROCESSOR_INTEL_IA64: u32 = 2200;
pub const PROCESSOR_AMD_X8664: u32 = 8664;
pub const PROCESSOR_MIPS_R4000: u32 = 4000;
pub const PROCESSOR_ALPHA_21064: u32 = 21064;
pub const PROCESSOR_PPC_601: u32 = 601;
pub const PROCESSOR_PPC_603: u32 = 603;
pub const PROCESSOR_PPC_604: u32 = 604;
pub const PROCESSOR_PPC_620: u32 = 620;
pub const PROCESSOR_HITACHI_SH3: u32 = 10003;
pub const PROCESSOR_HITACHI_SH3E: u32 = 10004;
pub const PROCESSOR_HITACHI_SH4: u32 = 10005;
pub const PROCESSOR_MOTOROLA_821: u32 = 821;
pub const PROCESSOR_SHx_SH3: u32 = 103;
pub const PROCESSOR_SHx_SH4: u32 = 104;
pub const PROCESSOR_STRONGARM: u32 = 2577;
pub const PROCESSOR_ARM720: u32 = 1824;
pub const PROCESSOR_ARM820: u32 = 2080;
pub const PROCESSOR_ARM920: u32 = 2336;
pub const PROCESSOR_ARM_7TDMI: u32 = 70001;
pub const PROCESSOR_OPTIL: u32 = 18767;
pub const PROCESSOR_ARCHITECTURE_INTEL: u32 = 0;
pub const PROCESSOR_ARCHITECTURE_MIPS: u32 = 1;
pub const PROCESSOR_ARCHITECTURE_ALPHA: u32 = 2;
pub const PROCESSOR_ARCHITECTURE_PPC: u32 = 3;
pub const PROCESSOR_ARCHITECTURE_SHX: u32 = 4;
pub const PROCESSOR_ARCHITECTURE_ARM: u32 = 5;
pub const PROCESSOR_ARCHITECTURE_IA64: u32 = 6;
pub const PROCESSOR_ARCHITECTURE_ALPHA64: u32 = 7;
pub const PROCESSOR_ARCHITECTURE_MSIL: u32 = 8;
pub const PROCESSOR_ARCHITECTURE_AMD64: u32 = 9;
pub const PROCESSOR_ARCHITECTURE_IA32_ON_WIN64: u32 = 10;
pub const PROCESSOR_ARCHITECTURE_NEUTRAL: u32 = 11;
pub const PROCESSOR_ARCHITECTURE_ARM64: u32 = 12;
pub const PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64: u32 = 13;
pub const PROCESSOR_ARCHITECTURE_IA32_ON_ARM64: u32 = 14;
pub const PROCESSOR_ARCHITECTURE_UNKNOWN: u32 = 65535;
pub const PF_FLOATING_POINT_PRECISION_ERRATA: u32 = 0;
pub const PF_FLOATING_POINT_EMULATED: u32 = 1;
pub const PF_COMPARE_EXCHANGE_DOUBLE: u32 = 2;
pub const PF_MMX_INSTRUCTIONS_AVAILABLE: u32 = 3;
pub const PF_PPC_MOVEMEM_64BIT_OK: u32 = 4;
pub const PF_ALPHA_BYTE_INSTRUCTIONS: u32 = 5;
pub const PF_XMMI_INSTRUCTIONS_AVAILABLE: u32 = 6;
pub const PF_3DNOW_INSTRUCTIONS_AVAILABLE: u32 = 7;
pub const PF_RDTSC_INSTRUCTION_AVAILABLE: u32 = 8;
pub const PF_PAE_ENABLED: u32 = 9;
pub const PF_XMMI64_INSTRUCTIONS_AVAILABLE: u32 = 10;
pub const PF_SSE_DAZ_MODE_AVAILABLE: u32 = 11;
pub const PF_NX_ENABLED: u32 = 12;
pub const PF_SSE3_INSTRUCTIONS_AVAILABLE: u32 = 13;
pub const PF_COMPARE_EXCHANGE128: u32 = 14;
pub const PF_COMPARE64_EXCHANGE128: u32 = 15;
pub const PF_CHANNELS_ENABLED: u32 = 16;
pub const PF_XSAVE_ENABLED: u32 = 17;
pub const PF_ARM_VFP_32_REGISTERS_AVAILABLE: u32 = 18;
pub const PF_ARM_NEON_INSTRUCTIONS_AVAILABLE: u32 = 19;
pub const PF_SECOND_LEVEL_ADDRESS_TRANSLATION: u32 = 20;
pub const PF_VIRT_FIRMWARE_ENABLED: u32 = 21;
pub const PF_RDWRFSGSBASE_AVAILABLE: u32 = 22;
pub const PF_FASTFAIL_AVAILABLE: u32 = 23;
pub const PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE: u32 = 24;
pub const PF_ARM_64BIT_LOADSTORE_ATOMIC: u32 = 25;
pub const PF_ARM_EXTERNAL_CACHE_AVAILABLE: u32 = 26;
pub const PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE: u32 = 27;
pub const PF_RDRAND_INSTRUCTION_AVAILABLE: u32 = 28;
pub const PF_ARM_V8_INSTRUCTIONS_AVAILABLE: u32 = 29;
pub const PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE: u32 = 30;
pub const PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE: u32 = 31;
pub const PF_RDTSCP_INSTRUCTION_AVAILABLE: u32 = 32;
pub const PF_RDPID_INSTRUCTION_AVAILABLE: u32 = 33;
pub const PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE: u32 = 34;
pub const PF_MONITORX_INSTRUCTION_AVAILABLE: u32 = 35;
pub const PF_SSSE3_INSTRUCTIONS_AVAILABLE: u32 = 36;
pub const PF_SSE4_1_INSTRUCTIONS_AVAILABLE: u32 = 37;
pub const PF_SSE4_2_INSTRUCTIONS_AVAILABLE: u32 = 38;
pub const PF_AVX_INSTRUCTIONS_AVAILABLE: u32 = 39;
pub const PF_AVX2_INSTRUCTIONS_AVAILABLE: u32 = 40;
pub const PF_AVX512F_INSTRUCTIONS_AVAILABLE: u32 = 41;
pub const PF_ERMS_AVAILABLE: u32 = 42;
pub const PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE: u32 = 43;
pub const PF_ARM_V83_JSCVT_INSTRUCTIONS_AVAILABLE: u32 = 44;
pub const PF_ARM_V83_LRCPC_INSTRUCTIONS_AVAILABLE: u32 = 45;
pub const XSTATE_LEGACY_FLOATING_POINT: u32 = 0;
pub const XSTATE_LEGACY_SSE: u32 = 1;
pub const XSTATE_GSSE: u32 = 2;
pub const XSTATE_AVX: u32 = 2;
pub const XSTATE_MPX_BNDREGS: u32 = 3;
pub const XSTATE_MPX_BNDCSR: u32 = 4;
pub const XSTATE_AVX512_KMASK: u32 = 5;
pub const XSTATE_AVX512_ZMM_H: u32 = 6;
pub const XSTATE_AVX512_ZMM: u32 = 7;
pub const XSTATE_IPT: u32 = 8;
pub const XSTATE_PASID: u32 = 10;
pub const XSTATE_CET_U: u32 = 11;
pub const XSTATE_CET_S: u32 = 12;
pub const XSTATE_AMX_TILE_CONFIG: u32 = 17;
pub const XSTATE_AMX_TILE_DATA: u32 = 18;
pub const XSTATE_LWP: u32 = 62;
pub const MAXIMUM_XSTATE_FEATURES: u32 = 64;
pub const XSTATE_COMPACTION_ENABLE: u32 = 63;
pub const XSTATE_ALIGN_BIT: u32 = 1;
pub const XSTATE_XFD_BIT: u32 = 2;
pub const XSTATE_CONTROLFLAG_XSAVEOPT_MASK: u32 = 1;
pub const XSTATE_CONTROLFLAG_XSAVEC_MASK: u32 = 2;
pub const XSTATE_CONTROLFLAG_XFD_MASK: u32 = 4;
pub const XSTATE_CONTROLFLAG_VALID_MASK: u32 = 7;
pub const CFG_CALL_TARGET_VALID: u32 = 1;
pub const CFG_CALL_TARGET_PROCESSED: u32 = 2;
pub const CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID: u32 = 4;
pub const CFG_CALL_TARGET_VALID_XFG: u32 = 8;
pub const CFG_CALL_TARGET_CONVERT_XFG_TO_CFG: u32 = 16;
pub const SECTION_QUERY: u32 = 1;
pub const SECTION_MAP_WRITE: u32 = 2;
pub const SECTION_MAP_READ: u32 = 4;
pub const SECTION_MAP_EXECUTE: u32 = 8;
pub const SECTION_EXTEND_SIZE: u32 = 16;
pub const SECTION_MAP_EXECUTE_EXPLICIT: u32 = 32;
pub const SECTION_ALL_ACCESS: u32 = 983071;
pub const SESSION_QUERY_ACCESS: u32 = 1;
pub const SESSION_MODIFY_ACCESS: u32 = 2;
pub const SESSION_ALL_ACCESS: u32 = 983043;
pub const PAGE_NOACCESS: u32 = 1;
pub const PAGE_READONLY: u32 = 2;
pub const PAGE_READWRITE: u32 = 4;
pub const PAGE_WRITECOPY: u32 = 8;
pub const PAGE_EXECUTE: u32 = 16;
pub const PAGE_EXECUTE_READ: u32 = 32;
pub const PAGE_EXECUTE_READWRITE: u32 = 64;
pub const PAGE_EXECUTE_WRITECOPY: u32 = 128;
pub const PAGE_GUARD: u32 = 256;
pub const PAGE_NOCACHE: u32 = 512;
pub const PAGE_WRITECOMBINE: u32 = 1024;
pub const PAGE_GRAPHICS_NOACCESS: u32 = 2048;
pub const PAGE_GRAPHICS_READONLY: u32 = 4096;
pub const PAGE_GRAPHICS_READWRITE: u32 = 8192;
pub const PAGE_GRAPHICS_EXECUTE: u32 = 16384;
pub const PAGE_GRAPHICS_EXECUTE_READ: u32 = 32768;
pub const PAGE_GRAPHICS_EXECUTE_READWRITE: u32 = 65536;
pub const PAGE_GRAPHICS_COHERENT: u32 = 131072;
pub const PAGE_GRAPHICS_NOCACHE: u32 = 262144;
pub const PAGE_ENCLAVE_THREAD_CONTROL: u32 = 2147483648;
pub const PAGE_REVERT_TO_FILE_MAP: u32 = 2147483648;
pub const PAGE_TARGETS_NO_UPDATE: u32 = 1073741824;
pub const PAGE_TARGETS_INVALID: u32 = 1073741824;
pub const PAGE_ENCLAVE_UNVALIDATED: u32 = 536870912;
pub const PAGE_ENCLAVE_MASK: u32 = 268435456;
pub const PAGE_ENCLAVE_DECOMMIT: u32 = 268435456;
pub const PAGE_ENCLAVE_SS_FIRST: u32 = 268435457;
pub const PAGE_ENCLAVE_SS_REST: u32 = 268435458;
pub const MEM_COMMIT: u32 = 4096;
pub const MEM_RESERVE: u32 = 8192;
pub const MEM_REPLACE_PLACEHOLDER: u32 = 16384;
pub const MEM_RESERVE_PLACEHOLDER: u32 = 262144;
pub const MEM_RESET: u32 = 524288;
pub const MEM_TOP_DOWN: u32 = 1048576;
pub const MEM_WRITE_WATCH: u32 = 2097152;
pub const MEM_PHYSICAL: u32 = 4194304;
pub const MEM_ROTATE: u32 = 8388608;
pub const MEM_DIFFERENT_IMAGE_BASE_OK: u32 = 8388608;
pub const MEM_RESET_UNDO: u32 = 16777216;
pub const MEM_LARGE_PAGES: u32 = 536870912;
pub const MEM_4MB_PAGES: u32 = 2147483648;
pub const MEM_64K_PAGES: u32 = 541065216;
pub const MEM_UNMAP_WITH_TRANSIENT_BOOST: u32 = 1;
pub const MEM_COALESCE_PLACEHOLDERS: u32 = 1;
pub const MEM_PRESERVE_PLACEHOLDER: u32 = 2;
pub const MEM_DECOMMIT: u32 = 16384;
pub const MEM_RELEASE: u32 = 32768;
pub const MEM_FREE: u32 = 65536;
pub const MEM_EXTENDED_PARAMETER_GRAPHICS: u32 = 1;
pub const MEM_EXTENDED_PARAMETER_NONPAGED: u32 = 2;
pub const MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL: u32 = 4;
pub const MEM_EXTENDED_PARAMETER_NONPAGED_LARGE: u32 = 8;
pub const MEM_EXTENDED_PARAMETER_NONPAGED_HUGE: u32 = 16;
pub const MEM_EXTENDED_PARAMETER_SOFT_FAULT_PAGES: u32 = 32;
pub const MEM_EXTENDED_PARAMETER_EC_CODE: u32 = 64;
pub const MEM_EXTENDED_PARAMETER_IMAGE_NO_HPAT: u32 = 128;
pub const MEM_EXTENDED_PARAMETER_TYPE_BITS: u32 = 8;
pub const SEC_HUGE_PAGES: u32 = 131072;
pub const SEC_PARTITION_OWNER_HANDLE: u32 = 262144;
pub const SEC_64K_PAGES: u32 = 524288;
pub const SEC_FILE: u32 = 8388608;
pub const SEC_IMAGE: u32 = 16777216;
pub const SEC_PROTECTED_IMAGE: u32 = 33554432;
pub const SEC_RESERVE: u32 = 67108864;
pub const SEC_COMMIT: u32 = 134217728;
pub const SEC_NOCACHE: u32 = 268435456;
pub const SEC_WRITECOMBINE: u32 = 1073741824;
pub const SEC_LARGE_PAGES: u32 = 2147483648;
pub const SEC_IMAGE_NO_EXECUTE: u32 = 285212672;
pub const MEM_PRIVATE: u32 = 131072;
pub const MEM_MAPPED: u32 = 262144;
pub const MEM_IMAGE: u32 = 16777216;
pub const WRITE_WATCH_FLAG_RESET: u32 = 1;
pub const ENCLAVE_TYPE_SGX: u32 = 1;
pub const ENCLAVE_TYPE_SGX2: u32 = 2;
pub const ENCLAVE_TYPE_VBS: u32 = 16;
pub const ENCLAVE_VBS_FLAG_DEBUG: u32 = 1;
pub const ENCLAVE_TYPE_VBS_BASIC: u32 = 17;
pub const VBS_BASIC_PAGE_MEASURED_DATA: u32 = 1;
pub const VBS_BASIC_PAGE_UNMEASURED_DATA: u32 = 2;
pub const VBS_BASIC_PAGE_ZERO_FILL: u32 = 3;
pub const VBS_BASIC_PAGE_THREAD_DESCRIPTOR: u32 = 4;
pub const VBS_BASIC_PAGE_SYSTEM_CALL: u32 = 5;
pub const DEDICATED_MEMORY_CACHE_ELIGIBLE: u32 = 1;
pub const FILE_READ_DATA: u32 = 1;
pub const FILE_LIST_DIRECTORY: u32 = 1;
pub const FILE_WRITE_DATA: u32 = 2;
pub const FILE_ADD_FILE: u32 = 2;
pub const FILE_APPEND_DATA: u32 = 4;
pub const FILE_ADD_SUBDIRECTORY: u32 = 4;
pub const FILE_CREATE_PIPE_INSTANCE: u32 = 4;
pub const FILE_READ_EA: u32 = 8;
pub const FILE_WRITE_EA: u32 = 16;
pub const FILE_EXECUTE: u32 = 32;
pub const FILE_TRAVERSE: u32 = 32;
pub const FILE_DELETE_CHILD: u32 = 64;
pub const FILE_READ_ATTRIBUTES: u32 = 128;
pub const FILE_WRITE_ATTRIBUTES: u32 = 256;
pub const FILE_ALL_ACCESS: u32 = 2032127;
pub const FILE_GENERIC_READ: u32 = 1179785;
pub const FILE_GENERIC_WRITE: u32 = 1179926;
pub const FILE_GENERIC_EXECUTE: u32 = 1179808;
pub const FILE_SHARE_READ: u32 = 1;
pub const FILE_SHARE_WRITE: u32 = 2;
pub const FILE_SHARE_DELETE: u32 = 4;
pub const FILE_ATTRIBUTE_READONLY: u32 = 1;
pub const FILE_ATTRIBUTE_HIDDEN: u32 = 2;
pub const FILE_ATTRIBUTE_SYSTEM: u32 = 4;
pub const FILE_ATTRIBUTE_DIRECTORY: u32 = 16;
pub const FILE_ATTRIBUTE_ARCHIVE: u32 = 32;
pub const FILE_ATTRIBUTE_DEVICE: u32 = 64;
pub const FILE_ATTRIBUTE_NORMAL: u32 = 128;
pub const FILE_ATTRIBUTE_TEMPORARY: u32 = 256;
pub const FILE_ATTRIBUTE_SPARSE_FILE: u32 = 512;
pub const FILE_ATTRIBUTE_REPARSE_POINT: u32 = 1024;
pub const FILE_ATTRIBUTE_COMPRESSED: u32 = 2048;
pub const FILE_ATTRIBUTE_OFFLINE: u32 = 4096;
pub const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED: u32 = 8192;
pub const FILE_ATTRIBUTE_ENCRYPTED: u32 = 16384;
pub const FILE_ATTRIBUTE_INTEGRITY_STREAM: u32 = 32768;
pub const FILE_ATTRIBUTE_VIRTUAL: u32 = 65536;
pub const FILE_ATTRIBUTE_NO_SCRUB_DATA: u32 = 131072;
pub const FILE_ATTRIBUTE_EA: u32 = 262144;
pub const FILE_ATTRIBUTE_PINNED: u32 = 524288;
pub const FILE_ATTRIBUTE_UNPINNED: u32 = 1048576;
pub const FILE_ATTRIBUTE_RECALL_ON_OPEN: u32 = 262144;
pub const FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS: u32 = 4194304;
pub const TREE_CONNECT_ATTRIBUTE_PRIVACY: u32 = 16384;
pub const TREE_CONNECT_ATTRIBUTE_INTEGRITY: u32 = 32768;
pub const TREE_CONNECT_ATTRIBUTE_GLOBAL: u32 = 4;
pub const TREE_CONNECT_ATTRIBUTE_PINNED: u32 = 2;
pub const FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL: u32 = 536870912;
pub const FILE_NOTIFY_CHANGE_FILE_NAME: u32 = 1;
pub const FILE_NOTIFY_CHANGE_DIR_NAME: u32 = 2;
pub const FILE_NOTIFY_CHANGE_ATTRIBUTES: u32 = 4;
pub const FILE_NOTIFY_CHANGE_SIZE: u32 = 8;
pub const FILE_NOTIFY_CHANGE_LAST_WRITE: u32 = 16;
pub const FILE_NOTIFY_CHANGE_LAST_ACCESS: u32 = 32;
pub const FILE_NOTIFY_CHANGE_CREATION: u32 = 64;
pub const FILE_NOTIFY_CHANGE_SECURITY: u32 = 256;
pub const FILE_ACTION_ADDED: u32 = 1;
pub const FILE_ACTION_REMOVED: u32 = 2;
pub const FILE_ACTION_MODIFIED: u32 = 3;
pub const FILE_ACTION_RENAMED_OLD_NAME: u32 = 4;
pub const FILE_ACTION_RENAMED_NEW_NAME: u32 = 5;
pub const FILE_CASE_SENSITIVE_SEARCH: u32 = 1;
pub const FILE_CASE_PRESERVED_NAMES: u32 = 2;
pub const FILE_UNICODE_ON_DISK: u32 = 4;
pub const FILE_PERSISTENT_ACLS: u32 = 8;
pub const FILE_FILE_COMPRESSION: u32 = 16;
pub const FILE_VOLUME_QUOTAS: u32 = 32;
pub const FILE_SUPPORTS_SPARSE_FILES: u32 = 64;
pub const FILE_SUPPORTS_REPARSE_POINTS: u32 = 128;
pub const FILE_SUPPORTS_REMOTE_STORAGE: u32 = 256;
pub const FILE_RETURNS_CLEANUP_RESULT_INFO: u32 = 512;
pub const FILE_SUPPORTS_POSIX_UNLINK_RENAME: u32 = 1024;
pub const FILE_SUPPORTS_BYPASS_IO: u32 = 2048;
pub const FILE_SUPPORTS_STREAM_SNAPSHOTS: u32 = 4096;
pub const FILE_SUPPORTS_CASE_SENSITIVE_DIRS: u32 = 8192;
pub const FILE_VOLUME_IS_COMPRESSED: u32 = 32768;
pub const FILE_SUPPORTS_OBJECT_IDS: u32 = 65536;
pub const FILE_SUPPORTS_ENCRYPTION: u32 = 131072;
pub const FILE_NAMED_STREAMS: u32 = 262144;
pub const FILE_READ_ONLY_VOLUME: u32 = 524288;
pub const FILE_SEQUENTIAL_WRITE_ONCE: u32 = 1048576;
pub const FILE_SUPPORTS_TRANSACTIONS: u32 = 2097152;
pub const FILE_SUPPORTS_HARD_LINKS: u32 = 4194304;
pub const FILE_SUPPORTS_EXTENDED_ATTRIBUTES: u32 = 8388608;
pub const FILE_SUPPORTS_OPEN_BY_FILE_ID: u32 = 16777216;
pub const FILE_SUPPORTS_USN_JOURNAL: u32 = 33554432;
pub const FILE_SUPPORTS_INTEGRITY_STREAMS: u32 = 67108864;
pub const FILE_SUPPORTS_BLOCK_REFCOUNTING: u32 = 134217728;
pub const FILE_SUPPORTS_SPARSE_VDL: u32 = 268435456;
pub const FILE_DAX_VOLUME: u32 = 536870912;
pub const FILE_SUPPORTS_GHOSTING: u32 = 1073741824;
pub const FILE_NAME_FLAG_HARDLINK: u32 = 0;
pub const FILE_NAME_FLAG_NTFS: u32 = 1;
pub const FILE_NAME_FLAG_DOS: u32 = 2;
pub const FILE_NAME_FLAG_BOTH: u32 = 3;
pub const FILE_NAME_FLAGS_UNSPECIFIED: u32 = 128;
pub const FILE_CS_FLAG_CASE_SENSITIVE_DIR: u32 = 1;
pub const FLUSH_FLAGS_FILE_DATA_ONLY: u32 = 1;
pub const FLUSH_FLAGS_NO_SYNC: u32 = 2;
pub const FLUSH_FLAGS_FILE_DATA_SYNC_ONLY: u32 = 4;
pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: u32 = 16384;
pub const IO_REPARSE_TAG_RESERVED_ZERO: u32 = 0;
pub const IO_REPARSE_TAG_RESERVED_ONE: u32 = 1;
pub const IO_REPARSE_TAG_RESERVED_TWO: u32 = 2;
pub const IO_REPARSE_TAG_RESERVED_RANGE: u32 = 2;
pub const IO_REPARSE_TAG_MOUNT_POINT: u32 = 2684354563;
pub const IO_REPARSE_TAG_HSM: u32 = 3221225476;
pub const IO_REPARSE_TAG_HSM2: u32 = 2147483654;
pub const IO_REPARSE_TAG_SIS: u32 = 2147483655;
pub const IO_REPARSE_TAG_WIM: u32 = 2147483656;
pub const IO_REPARSE_TAG_CSV: u32 = 2147483657;
pub const IO_REPARSE_TAG_DFS: u32 = 2147483658;
pub const IO_REPARSE_TAG_SYMLINK: u32 = 2684354572;
pub const IO_REPARSE_TAG_DFSR: u32 = 2147483666;
pub const IO_REPARSE_TAG_DEDUP: u32 = 2147483667;
pub const IO_REPARSE_TAG_NFS: u32 = 2147483668;
pub const IO_REPARSE_TAG_FILE_PLACEHOLDER: u32 = 2147483669;
pub const IO_REPARSE_TAG_WOF: u32 = 2147483671;
pub const IO_REPARSE_TAG_WCI: u32 = 2147483672;
pub const IO_REPARSE_TAG_WCI_1: u32 = 2415923224;
pub const IO_REPARSE_TAG_GLOBAL_REPARSE: u32 = 2684354585;
pub const IO_REPARSE_TAG_CLOUD: u32 = 2415919130;
pub const IO_REPARSE_TAG_CLOUD_1: u32 = 2415923226;
pub const IO_REPARSE_TAG_CLOUD_2: u32 = 2415927322;
pub const IO_REPARSE_TAG_CLOUD_3: u32 = 2415931418;
pub const IO_REPARSE_TAG_CLOUD_4: u32 = 2415935514;
pub const IO_REPARSE_TAG_CLOUD_5: u32 = 2415939610;
pub const IO_REPARSE_TAG_CLOUD_6: u32 = 2415943706;
pub const IO_REPARSE_TAG_CLOUD_7: u32 = 2415947802;
pub const IO_REPARSE_TAG_CLOUD_8: u32 = 2415951898;
pub const IO_REPARSE_TAG_CLOUD_9: u32 = 2415955994;
pub const IO_REPARSE_TAG_CLOUD_A: u32 = 2415960090;
pub const IO_REPARSE_TAG_CLOUD_B: u32 = 2415964186;
pub const IO_REPARSE_TAG_CLOUD_C: u32 = 2415968282;
pub const IO_REPARSE_TAG_CLOUD_D: u32 = 2415972378;
pub const IO_REPARSE_TAG_CLOUD_E: u32 = 2415976474;
pub const IO_REPARSE_TAG_CLOUD_F: u32 = 2415980570;
pub const IO_REPARSE_TAG_CLOUD_MASK: u32 = 61440;
pub const IO_REPARSE_TAG_APPEXECLINK: u32 = 2147483675;
pub const IO_REPARSE_TAG_PROJFS: u32 = 2415919132;
pub const IO_REPARSE_TAG_STORAGE_SYNC: u32 = 2147483678;
pub const IO_REPARSE_TAG_WCI_TOMBSTONE: u32 = 2684354591;
pub const IO_REPARSE_TAG_UNHANDLED: u32 = 2147483680;
pub const IO_REPARSE_TAG_ONEDRIVE: u32 = 2147483681;
pub const IO_REPARSE_TAG_PROJFS_TOMBSTONE: u32 = 2684354594;
pub const IO_REPARSE_TAG_AF_UNIX: u32 = 2147483683;
pub const IO_REPARSE_TAG_WCI_LINK: u32 = 2684354599;
pub const IO_REPARSE_TAG_WCI_LINK_1: u32 = 2684358695;
pub const IO_REPARSE_TAG_DATALESS_CIM: u32 = 2684354600;
pub const SCRUB_DATA_INPUT_FLAG_RESUME: u32 = 1;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_IN_SYNC: u32 = 2;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_NON_INTEGRITY_DATA: u32 = 4;
pub const SCRUB_DATA_INPUT_FLAG_IGNORE_REDUNDANCY: u32 = 8;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_DATA: u32 = 16;
pub const SCRUB_DATA_INPUT_FLAG_SCRUB_BY_OBJECT_ID: u32 = 32;
pub const SCRUB_DATA_INPUT_FLAG_OPLOCK_NOT_ACQUIRED: u32 = 64;
pub const SCRUB_DATA_OUTPUT_FLAG_INCOMPLETE: u32 = 1;
pub const SCRUB_DATA_OUTPUT_FLAG_NON_USER_DATA_RANGE: u32 = 65536;
pub const SCRUB_DATA_OUTPUT_FLAG_PARITY_EXTENT_DATA_RETURNED: u32 = 131072;
pub const SCRUB_DATA_OUTPUT_FLAG_RESUME_CONTEXT_LENGTH_SPECIFIED: u32 = 262144;
pub const SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS: u32 = 1;
pub const IO_COMPLETION_MODIFY_STATE: u32 = 2;
pub const IO_COMPLETION_ALL_ACCESS: u32 = 2031619;
pub const IO_QOS_MAX_RESERVATION: u32 = 1000000000;
pub const SMB_CCF_APP_INSTANCE_EA_NAME: &[u8; 29] = b"ClusteredApplicationInstance\0";
pub const NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR: u32 = 1;
pub const DUPLICATE_CLOSE_SOURCE: u32 = 1;
pub const DUPLICATE_SAME_ACCESS: u32 = 2;
pub const POWERBUTTON_ACTION_INDEX_NOTHING: u32 = 0;
pub const POWERBUTTON_ACTION_INDEX_SLEEP: u32 = 1;
pub const POWERBUTTON_ACTION_INDEX_HIBERNATE: u32 = 2;
pub const POWERBUTTON_ACTION_INDEX_SHUTDOWN: u32 = 3;
pub const POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY: u32 = 4;
pub const POWERBUTTON_ACTION_VALUE_NOTHING: u32 = 0;
pub const POWERBUTTON_ACTION_VALUE_SLEEP: u32 = 2;
pub const POWERBUTTON_ACTION_VALUE_HIBERNATE: u32 = 3;
pub const POWERBUTTON_ACTION_VALUE_SHUTDOWN: u32 = 6;
pub const POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY: u32 = 8;
pub const PERFSTATE_POLICY_CHANGE_IDEAL: u32 = 0;
pub const PERFSTATE_POLICY_CHANGE_SINGLE: u32 = 1;
pub const PERFSTATE_POLICY_CHANGE_ROCKET: u32 = 2;
pub const PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE: u32 = 3;
pub const PERFSTATE_POLICY_CHANGE_DECREASE_MAX: u32 = 2;
pub const PERFSTATE_POLICY_CHANGE_INCREASE_MAX: u32 = 3;
pub const PROCESSOR_THROTTLE_DISABLED: u32 = 0;
pub const PROCESSOR_THROTTLE_ENABLED: u32 = 1;
pub const PROCESSOR_THROTTLE_AUTOMATIC: u32 = 2;
pub const PROCESSOR_PERF_BOOST_POLICY_DISABLED: u32 = 0;
pub const PROCESSOR_PERF_BOOST_POLICY_MAX: u32 = 100;
pub const PROCESSOR_PERF_BOOST_MODE_DISABLED: u32 = 0;
pub const PROCESSOR_PERF_BOOST_MODE_ENABLED: u32 = 1;
pub const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE: u32 = 2;
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED: u32 = 3;
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE: u32 = 4;
pub const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED: u32 = 5;
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED: u32 = 6;
pub const PROCESSOR_PERF_BOOST_MODE_MAX: u32 = 6;
pub const PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED: u32 = 0;
pub const PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED: u32 = 1;
pub const PROCESSOR_PERF_PERFORMANCE_PREFERENCE: u32 = 255;
pub const PROCESSOR_PERF_ENERGY_PREFERENCE: u32 = 0;
pub const PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW: u32 = 0;
pub const PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW: u32 = 1270000000;
pub const PROCESSOR_DUTY_CYCLING_DISABLED: u32 = 0;
pub const PROCESSOR_DUTY_CYCLING_ENABLED: u32 = 1;
pub const CORE_PARKING_POLICY_CHANGE_IDEAL: u32 = 0;
pub const CORE_PARKING_POLICY_CHANGE_SINGLE: u32 = 1;
pub const CORE_PARKING_POLICY_CHANGE_ROCKET: u32 = 2;
pub const CORE_PARKING_POLICY_CHANGE_MULTISTEP: u32 = 3;
pub const CORE_PARKING_POLICY_CHANGE_MAX: u32 = 3;
pub const PARKING_TOPOLOGY_POLICY_DISABLED: u32 = 0;
pub const PARKING_TOPOLOGY_POLICY_ROUNDROBIN: u32 = 1;
pub const PARKING_TOPOLOGY_POLICY_SEQUENTIAL: u32 = 2;
pub const SMT_UNPARKING_POLICY_CORE: u32 = 0;
pub const SMT_UNPARKING_POLICY_CORE_PER_THREAD: u32 = 1;
pub const SMT_UNPARKING_POLICY_LP_ROUNDROBIN: u32 = 2;
pub const SMT_UNPARKING_POLICY_LP_SEQUENTIAL: u32 = 3;
pub const POWER_DEVICE_IDLE_POLICY_PERFORMANCE: u32 = 0;
pub const POWER_DEVICE_IDLE_POLICY_CONSERVATIVE: u32 = 1;
pub const POWER_CONNECTIVITY_IN_STANDBY_DISABLED: u32 = 0;
pub const POWER_CONNECTIVITY_IN_STANDBY_ENABLED: u32 = 1;
pub const POWER_CONNECTIVITY_IN_STANDBY_SYSTEM_MANAGED: u32 = 2;
pub const POWER_DISCONNECTED_STANDBY_MODE_NORMAL: u32 = 0;
pub const POWER_DISCONNECTED_STANDBY_MODE_AGGRESSIVE: u32 = 1;
pub const POWER_SYSTEM_MAXIMUM: u32 = 7;
pub const DIAGNOSTIC_REASON_VERSION: u32 = 0;
pub const DIAGNOSTIC_REASON_SIMPLE_STRING: u32 = 1;
pub const DIAGNOSTIC_REASON_DETAILED_STRING: u32 = 2;
pub const DIAGNOSTIC_REASON_NOT_SPECIFIED: u32 = 2147483648;
pub const DIAGNOSTIC_REASON_INVALID_FLAGS: i64 = -2147483656;
pub const POWER_REQUEST_CONTEXT_VERSION: u32 = 0;
pub const POWER_REQUEST_CONTEXT_SIMPLE_STRING: u32 = 1;
pub const POWER_REQUEST_CONTEXT_DETAILED_STRING: u32 = 2;
pub const PDCAP_D0_SUPPORTED: u32 = 1;
pub const PDCAP_D1_SUPPORTED: u32 = 2;
pub const PDCAP_D2_SUPPORTED: u32 = 4;
pub const PDCAP_D3_SUPPORTED: u32 = 8;
pub const PDCAP_WAKE_FROM_D0_SUPPORTED: u32 = 16;
pub const PDCAP_WAKE_FROM_D1_SUPPORTED: u32 = 32;
pub const PDCAP_WAKE_FROM_D2_SUPPORTED: u32 = 64;
pub const PDCAP_WAKE_FROM_D3_SUPPORTED: u32 = 128;
pub const PDCAP_WARM_EJECT_SUPPORTED: u32 = 256;
pub const POWER_SETTING_VALUE_VERSION: u32 = 1;
pub const POWER_PLATFORM_ROLE_V1: u32 = 1;
pub const POWER_PLATFORM_ROLE_V2: u32 = 2;
pub const POWER_PLATFORM_ROLE_VERSION: u32 = 2;
pub const PROC_IDLE_BUCKET_COUNT: u32 = 6;
pub const PROC_IDLE_BUCKET_COUNT_EX: u32 = 16;
pub const ACPI_PPM_SOFTWARE_ALL: u32 = 252;
pub const ACPI_PPM_SOFTWARE_ANY: u32 = 253;
pub const ACPI_PPM_HARDWARE_ALL: u32 = 254;
pub const MS_PPM_SOFTWARE_ALL: u32 = 1;
pub const PPM_FIRMWARE_ACPI1C2: u32 = 1;
pub const PPM_FIRMWARE_ACPI1C3: u32 = 2;
pub const PPM_FIRMWARE_ACPI1TSTATES: u32 = 4;
pub const PPM_FIRMWARE_CST: u32 = 8;
pub const PPM_FIRMWARE_CSD: u32 = 16;
pub const PPM_FIRMWARE_PCT: u32 = 32;
pub const PPM_FIRMWARE_PSS: u32 = 64;
pub const PPM_FIRMWARE_XPSS: u32 = 128;
pub const PPM_FIRMWARE_PPC: u32 = 256;
pub const PPM_FIRMWARE_PSD: u32 = 512;
pub const PPM_FIRMWARE_PTC: u32 = 1024;
pub const PPM_FIRMWARE_TSS: u32 = 2048;
pub const PPM_FIRMWARE_TPC: u32 = 4096;
pub const PPM_FIRMWARE_TSD: u32 = 8192;
pub const PPM_FIRMWARE_PCCH: u32 = 16384;
pub const PPM_FIRMWARE_PCCP: u32 = 32768;
pub const PPM_FIRMWARE_OSC: u32 = 65536;
pub const PPM_FIRMWARE_PDC: u32 = 131072;
pub const PPM_FIRMWARE_CPC: u32 = 262144;
pub const PPM_FIRMWARE_LPI: u32 = 524288;
pub const PPM_PERFORMANCE_IMPLEMENTATION_NONE: u32 = 0;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PSTATES: u32 = 1;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PCCV1: u32 = 2;
pub const PPM_PERFORMANCE_IMPLEMENTATION_CPPC: u32 = 3;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PEP: u32 = 4;
pub const PPM_IDLE_IMPLEMENTATION_NONE: u32 = 0;
pub const PPM_IDLE_IMPLEMENTATION_CSTATES: u32 = 1;
pub const PPM_IDLE_IMPLEMENTATION_PEP: u32 = 2;
pub const PPM_IDLE_IMPLEMENTATION_MICROPEP: u32 = 3;
pub const PPM_IDLE_IMPLEMENTATION_LPISTATES: u32 = 4;
pub const POWER_ACTION_QUERY_ALLOWED: u32 = 1;
pub const POWER_ACTION_UI_ALLOWED: u32 = 2;
pub const POWER_ACTION_OVERRIDE_APPS: u32 = 4;
pub const POWER_ACTION_HIBERBOOT: u32 = 8;
pub const POWER_ACTION_USER_NOTIFY: u32 = 16;
pub const POWER_ACTION_DOZE_TO_HIBERNATE: u32 = 32;
pub const POWER_ACTION_ACPI_CRITICAL: u32 = 16777216;
pub const POWER_ACTION_ACPI_USER_NOTIFY: u32 = 33554432;
pub const POWER_ACTION_DIRECTED_DRIPS: u32 = 67108864;
pub const POWER_ACTION_PSEUDO_TRANSITION: u32 = 134217728;
pub const POWER_ACTION_LIGHTEST_FIRST: u32 = 268435456;
pub const POWER_ACTION_LOCK_CONSOLE: u32 = 536870912;
pub const POWER_ACTION_DISABLE_WAKES: u32 = 1073741824;
pub const POWER_ACTION_CRITICAL: u32 = 2147483648;
pub const POWER_LEVEL_USER_NOTIFY_TEXT: u32 = 1;
pub const POWER_LEVEL_USER_NOTIFY_SOUND: u32 = 2;
pub const POWER_LEVEL_USER_NOTIFY_EXEC: u32 = 4;
pub const POWER_USER_NOTIFY_BUTTON: u32 = 8;
pub const POWER_USER_NOTIFY_SHUTDOWN: u32 = 16;
pub const POWER_USER_NOTIFY_FORCED_SHUTDOWN: u32 = 32;
pub const POWER_FORCE_TRIGGER_RESET: u32 = 2147483648;
pub const BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK: u32 = 7;
pub const BATTERY_DISCHARGE_FLAGS_ENABLE: u32 = 2147483648;
pub const NUM_DISCHARGE_POLICIES: u32 = 4;
pub const DISCHARGE_POLICY_CRITICAL: u32 = 0;
pub const DISCHARGE_POLICY_LOW: u32 = 1;
pub const PROCESSOR_IDLESTATE_POLICY_COUNT: u32 = 3;
pub const PO_THROTTLE_NONE: u32 = 0;
pub const PO_THROTTLE_CONSTANT: u32 = 1;
pub const PO_THROTTLE_DEGRADE: u32 = 2;
pub const PO_THROTTLE_ADAPTIVE: u32 = 3;
pub const PO_THROTTLE_MAXIMUM: u32 = 4;
pub const HIBERFILE_TYPE_NONE: u32 = 0;
pub const HIBERFILE_TYPE_REDUCED: u32 = 1;
pub const HIBERFILE_TYPE_FULL: u32 = 2;
pub const HIBERFILE_TYPE_MAX: u32 = 3;
pub const IMAGE_DOS_SIGNATURE: u32 = 23117;
pub const IMAGE_OS2_SIGNATURE: u32 = 17742;
pub const IMAGE_OS2_SIGNATURE_LE: u32 = 17740;
pub const IMAGE_VXD_SIGNATURE: u32 = 17740;
pub const IMAGE_NT_SIGNATURE: u32 = 17744;
pub const IMAGE_SIZEOF_FILE_HEADER: u32 = 20;
pub const IMAGE_FILE_RELOCS_STRIPPED: u32 = 1;
pub const IMAGE_FILE_EXECUTABLE_IMAGE: u32 = 2;
pub const IMAGE_FILE_LINE_NUMS_STRIPPED: u32 = 4;
pub const IMAGE_FILE_LOCAL_SYMS_STRIPPED: u32 = 8;
pub const IMAGE_FILE_AGGRESIVE_WS_TRIM: u32 = 16;
pub const IMAGE_FILE_LARGE_ADDRESS_AWARE: u32 = 32;
pub const IMAGE_FILE_BYTES_REVERSED_LO: u32 = 128;
pub const IMAGE_FILE_32BIT_MACHINE: u32 = 256;
pub const IMAGE_FILE_DEBUG_STRIPPED: u32 = 512;
pub const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP: u32 = 1024;
pub const IMAGE_FILE_NET_RUN_FROM_SWAP: u32 = 2048;
pub const IMAGE_FILE_SYSTEM: u32 = 4096;
pub const IMAGE_FILE_DLL: u32 = 8192;
pub const IMAGE_FILE_UP_SYSTEM_ONLY: u32 = 16384;
pub const IMAGE_FILE_BYTES_REVERSED_HI: u32 = 32768;
pub const IMAGE_FILE_MACHINE_UNKNOWN: u32 = 0;
pub const IMAGE_FILE_MACHINE_TARGET_HOST: u32 = 1;
pub const IMAGE_FILE_MACHINE_I386: u32 = 332;
pub const IMAGE_FILE_MACHINE_R3000: u32 = 354;
pub const IMAGE_FILE_MACHINE_R4000: u32 = 358;
pub const IMAGE_FILE_MACHINE_R10000: u32 = 360;
pub const IMAGE_FILE_MACHINE_WCEMIPSV2: u32 = 361;
pub const IMAGE_FILE_MACHINE_ALPHA: u32 = 388;
pub const IMAGE_FILE_MACHINE_SH3: u32 = 418;
pub const IMAGE_FILE_MACHINE_SH3DSP: u32 = 419;
pub const IMAGE_FILE_MACHINE_SH3E: u32 = 420;
pub const IMAGE_FILE_MACHINE_SH4: u32 = 422;
pub const IMAGE_FILE_MACHINE_SH5: u32 = 424;
pub const IMAGE_FILE_MACHINE_ARM: u32 = 448;
pub const IMAGE_FILE_MACHINE_THUMB: u32 = 450;
pub const IMAGE_FILE_MACHINE_ARMNT: u32 = 452;
pub const IMAGE_FILE_MACHINE_AM33: u32 = 467;
pub const IMAGE_FILE_MACHINE_POWERPC: u32 = 496;
pub const IMAGE_FILE_MACHINE_POWERPCFP: u32 = 497;
pub const IMAGE_FILE_MACHINE_IA64: u32 = 512;
pub const IMAGE_FILE_MACHINE_MIPS16: u32 = 614;
pub const IMAGE_FILE_MACHINE_ALPHA64: u32 = 644;
pub const IMAGE_FILE_MACHINE_MIPSFPU: u32 = 870;
pub const IMAGE_FILE_MACHINE_MIPSFPU16: u32 = 1126;
pub const IMAGE_FILE_MACHINE_AXP64: u32 = 644;
pub const IMAGE_FILE_MACHINE_TRICORE: u32 = 1312;
pub const IMAGE_FILE_MACHINE_CEF: u32 = 3311;
pub const IMAGE_FILE_MACHINE_EBC: u32 = 3772;
pub const IMAGE_FILE_MACHINE_AMD64: u32 = 34404;
pub const IMAGE_FILE_MACHINE_M32R: u32 = 36929;
pub const IMAGE_FILE_MACHINE_ARM64: u32 = 43620;
pub const IMAGE_FILE_MACHINE_CEE: u32 = 49390;
pub const IMAGE_NUMBEROF_DIRECTORY_ENTRIES: u32 = 16;
pub const IMAGE_NT_OPTIONAL_HDR32_MAGIC: u32 = 267;
pub const IMAGE_NT_OPTIONAL_HDR64_MAGIC: u32 = 523;
pub const IMAGE_ROM_OPTIONAL_HDR_MAGIC: u32 = 263;
pub const IMAGE_NT_OPTIONAL_HDR_MAGIC: u32 = 523;
pub const IMAGE_SUBSYSTEM_UNKNOWN: u32 = 0;
pub const IMAGE_SUBSYSTEM_NATIVE: u32 = 1;
pub const IMAGE_SUBSYSTEM_WINDOWS_GUI: u32 = 2;
pub const IMAGE_SUBSYSTEM_WINDOWS_CUI: u32 = 3;
pub const IMAGE_SUBSYSTEM_OS2_CUI: u32 = 5;
pub const IMAGE_SUBSYSTEM_POSIX_CUI: u32 = 7;
pub const IMAGE_SUBSYSTEM_NATIVE_WINDOWS: u32 = 8;
pub const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI: u32 = 9;
pub const IMAGE_SUBSYSTEM_EFI_APPLICATION: u32 = 10;
pub const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER: u32 = 11;
pub const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER: u32 = 12;
pub const IMAGE_SUBSYSTEM_EFI_ROM: u32 = 13;
pub const IMAGE_SUBSYSTEM_XBOX: u32 = 14;
pub const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION: u32 = 16;
pub const IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG: u32 = 17;
pub const IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA: u32 = 32;
pub const IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE: u32 = 64;
pub const IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY: u32 = 128;
pub const IMAGE_DLLCHARACTERISTICS_NX_COMPAT: u32 = 256;
pub const IMAGE_DLLCHARACTERISTICS_NO_ISOLATION: u32 = 512;
pub const IMAGE_DLLCHARACTERISTICS_NO_SEH: u32 = 1024;
pub const IMAGE_DLLCHARACTERISTICS_NO_BIND: u32 = 2048;
pub const IMAGE_DLLCHARACTERISTICS_APPCONTAINER: u32 = 4096;
pub const IMAGE_DLLCHARACTERISTICS_WDM_DRIVER: u32 = 8192;
pub const IMAGE_DLLCHARACTERISTICS_GUARD_CF: u32 = 16384;
pub const IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE: u32 = 32768;
pub const IMAGE_DIRECTORY_ENTRY_EXPORT: u32 = 0;
pub const IMAGE_DIRECTORY_ENTRY_IMPORT: u32 = 1;
pub const IMAGE_DIRECTORY_ENTRY_RESOURCE: u32 = 2;
pub const IMAGE_DIRECTORY_ENTRY_EXCEPTION: u32 = 3;
pub const IMAGE_DIRECTORY_ENTRY_SECURITY: u32 = 4;
pub const IMAGE_DIRECTORY_ENTRY_BASERELOC: u32 = 5;
pub const IMAGE_DIRECTORY_ENTRY_DEBUG: u32 = 6;
pub const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE: u32 = 7;
pub const IMAGE_DIRECTORY_ENTRY_GLOBALPTR: u32 = 8;
pub const IMAGE_DIRECTORY_ENTRY_TLS: u32 = 9;
pub const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG: u32 = 10;
pub const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT: u32 = 11;
pub const IMAGE_DIRECTORY_ENTRY_IAT: u32 = 12;
pub const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT: u32 = 13;
pub const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR: u32 = 14;
pub const IMAGE_SIZEOF_SHORT_NAME: u32 = 8;
pub const IMAGE_SIZEOF_SECTION_HEADER: u32 = 40;
pub const IMAGE_SCN_TYPE_NO_PAD: u32 = 8;
pub const IMAGE_SCN_CNT_CODE: u32 = 32;
pub const IMAGE_SCN_CNT_INITIALIZED_DATA: u32 = 64;
pub const IMAGE_SCN_CNT_UNINITIALIZED_DATA: u32 = 128;
pub const IMAGE_SCN_LNK_OTHER: u32 = 256;
pub const IMAGE_SCN_LNK_INFO: u32 = 512;
pub const IMAGE_SCN_LNK_REMOVE: u32 = 2048;
pub const IMAGE_SCN_LNK_COMDAT: u32 = 4096;
pub const IMAGE_SCN_NO_DEFER_SPEC_EXC: u32 = 16384;
pub const IMAGE_SCN_GPREL: u32 = 32768;
pub const IMAGE_SCN_MEM_FARDATA: u32 = 32768;
pub const IMAGE_SCN_MEM_PURGEABLE: u32 = 131072;
pub const IMAGE_SCN_MEM_16BIT: u32 = 131072;
pub const IMAGE_SCN_MEM_LOCKED: u32 = 262144;
pub const IMAGE_SCN_MEM_PRELOAD: u32 = 524288;
pub const IMAGE_SCN_ALIGN_1BYTES: u32 = 1048576;
pub const IMAGE_SCN_ALIGN_2BYTES: u32 = 2097152;
pub const IMAGE_SCN_ALIGN_4BYTES: u32 = 3145728;
pub const IMAGE_SCN_ALIGN_8BYTES: u32 = 4194304;
pub const IMAGE_SCN_ALIGN_16BYTES: u32 = 5242880;
pub const IMAGE_SCN_ALIGN_32BYTES: u32 = 6291456;
pub const IMAGE_SCN_ALIGN_64BYTES: u32 = 7340032;
pub const IMAGE_SCN_ALIGN_128BYTES: u32 = 8388608;
pub const IMAGE_SCN_ALIGN_256BYTES: u32 = 9437184;
pub const IMAGE_SCN_ALIGN_512BYTES: u32 = 10485760;
pub const IMAGE_SCN_ALIGN_1024BYTES: u32 = 11534336;
pub const IMAGE_SCN_ALIGN_2048BYTES: u32 = 12582912;
pub const IMAGE_SCN_ALIGN_4096BYTES: u32 = 13631488;
pub const IMAGE_SCN_ALIGN_8192BYTES: u32 = 14680064;
pub const IMAGE_SCN_ALIGN_MASK: u32 = 15728640;
pub const IMAGE_SCN_LNK_NRELOC_OVFL: u32 = 16777216;
pub const IMAGE_SCN_MEM_DISCARDABLE: u32 = 33554432;
pub const IMAGE_SCN_MEM_NOT_CACHED: u32 = 67108864;
pub const IMAGE_SCN_MEM_NOT_PAGED: u32 = 134217728;
pub const IMAGE_SCN_MEM_SHARED: u32 = 268435456;
pub const IMAGE_SCN_MEM_EXECUTE: u32 = 536870912;
pub const IMAGE_SCN_MEM_READ: u32 = 1073741824;
pub const IMAGE_SCN_MEM_WRITE: u32 = 2147483648;
pub const IMAGE_SCN_SCALE_INDEX: u32 = 1;
pub const IMAGE_SIZEOF_SYMBOL: u32 = 18;
pub const IMAGE_SYM_SECTION_MAX: u32 = 65279;
pub const IMAGE_SYM_SECTION_MAX_EX: u32 = 2147483647;
pub const IMAGE_SYM_TYPE_NULL: u32 = 0;
pub const IMAGE_SYM_TYPE_VOID: u32 = 1;
pub const IMAGE_SYM_TYPE_CHAR: u32 = 2;
pub const IMAGE_SYM_TYPE_SHORT: u32 = 3;
pub const IMAGE_SYM_TYPE_INT: u32 = 4;
pub const IMAGE_SYM_TYPE_LONG: u32 = 5;
pub const IMAGE_SYM_TYPE_FLOAT: u32 = 6;
pub const IMAGE_SYM_TYPE_DOUBLE: u32 = 7;
pub const IMAGE_SYM_TYPE_STRUCT: u32 = 8;
pub const IMAGE_SYM_TYPE_UNION: u32 = 9;
pub const IMAGE_SYM_TYPE_ENUM: u32 = 10;
pub const IMAGE_SYM_TYPE_MOE: u32 = 11;
pub const IMAGE_SYM_TYPE_BYTE: u32 = 12;
pub const IMAGE_SYM_TYPE_WORD: u32 = 13;
pub const IMAGE_SYM_TYPE_UINT: u32 = 14;
pub const IMAGE_SYM_TYPE_DWORD: u32 = 15;
pub const IMAGE_SYM_TYPE_PCODE: u32 = 32768;
pub const IMAGE_SYM_DTYPE_NULL: u32 = 0;
pub const IMAGE_SYM_DTYPE_POINTER: u32 = 1;
pub const IMAGE_SYM_DTYPE_FUNCTION: u32 = 2;
pub const IMAGE_SYM_DTYPE_ARRAY: u32 = 3;
pub const IMAGE_SYM_CLASS_NULL: u32 = 0;
pub const IMAGE_SYM_CLASS_AUTOMATIC: u32 = 1;
pub const IMAGE_SYM_CLASS_EXTERNAL: u32 = 2;
pub const IMAGE_SYM_CLASS_STATIC: u32 = 3;
pub const IMAGE_SYM_CLASS_REGISTER: u32 = 4;
pub const IMAGE_SYM_CLASS_EXTERNAL_DEF: u32 = 5;
pub const IMAGE_SYM_CLASS_LABEL: u32 = 6;
pub const IMAGE_SYM_CLASS_UNDEFINED_LABEL: u32 = 7;
pub const IMAGE_SYM_CLASS_MEMBER_OF_STRUCT: u32 = 8;
pub const IMAGE_SYM_CLASS_ARGUMENT: u32 = 9;
pub const IMAGE_SYM_CLASS_STRUCT_TAG: u32 = 10;
pub const IMAGE_SYM_CLASS_MEMBER_OF_UNION: u32 = 11;
pub const IMAGE_SYM_CLASS_UNION_TAG: u32 = 12;
pub const IMAGE_SYM_CLASS_TYPE_DEFINITION: u32 = 13;
pub const IMAGE_SYM_CLASS_UNDEFINED_STATIC: u32 = 14;
pub const IMAGE_SYM_CLASS_ENUM_TAG: u32 = 15;
pub const IMAGE_SYM_CLASS_MEMBER_OF_ENUM: u32 = 16;
pub const IMAGE_SYM_CLASS_REGISTER_PARAM: u32 = 17;
pub const IMAGE_SYM_CLASS_BIT_FIELD: u32 = 18;
pub const IMAGE_SYM_CLASS_FAR_EXTERNAL: u32 = 68;
pub const IMAGE_SYM_CLASS_BLOCK: u32 = 100;
pub const IMAGE_SYM_CLASS_FUNCTION: u32 = 101;
pub const IMAGE_SYM_CLASS_END_OF_STRUCT: u32 = 102;
pub const IMAGE_SYM_CLASS_FILE: u32 = 103;
pub const IMAGE_SYM_CLASS_SECTION: u32 = 104;
pub const IMAGE_SYM_CLASS_WEAK_EXTERNAL: u32 = 105;
pub const IMAGE_SYM_CLASS_CLR_TOKEN: u32 = 107;
pub const N_BTMASK: u32 = 15;
pub const N_TMASK: u32 = 48;
pub const N_TMASK1: u32 = 192;
pub const N_TMASK2: u32 = 240;
pub const N_BTSHFT: u32 = 4;
pub const N_TSHIFT: u32 = 2;
pub const IMAGE_COMDAT_SELECT_NODUPLICATES: u32 = 1;
pub const IMAGE_COMDAT_SELECT_ANY: u32 = 2;
pub const IMAGE_COMDAT_SELECT_SAME_SIZE: u32 = 3;
pub const IMAGE_COMDAT_SELECT_EXACT_MATCH: u32 = 4;
pub const IMAGE_COMDAT_SELECT_ASSOCIATIVE: u32 = 5;
pub const IMAGE_COMDAT_SELECT_LARGEST: u32 = 6;
pub const IMAGE_COMDAT_SELECT_NEWEST: u32 = 7;
pub const IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY: u32 = 1;
pub const IMAGE_WEAK_EXTERN_SEARCH_LIBRARY: u32 = 2;
pub const IMAGE_WEAK_EXTERN_SEARCH_ALIAS: u32 = 3;
pub const IMAGE_WEAK_EXTERN_ANTI_DEPENDENCY: u32 = 4;
pub const IMAGE_REL_I386_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_I386_DIR16: u32 = 1;
pub const IMAGE_REL_I386_REL16: u32 = 2;
pub const IMAGE_REL_I386_DIR32: u32 = 6;
pub const IMAGE_REL_I386_DIR32NB: u32 = 7;
pub const IMAGE_REL_I386_SEG12: u32 = 9;
pub const IMAGE_REL_I386_SECTION: u32 = 10;
pub const IMAGE_REL_I386_SECREL: u32 = 11;
pub const IMAGE_REL_I386_TOKEN: u32 = 12;
pub const IMAGE_REL_I386_SECREL7: u32 = 13;
pub const IMAGE_REL_I386_REL32: u32 = 20;
pub const IMAGE_REL_MIPS_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_MIPS_REFHALF: u32 = 1;
pub const IMAGE_REL_MIPS_REFWORD: u32 = 2;
pub const IMAGE_REL_MIPS_JMPADDR: u32 = 3;
pub const IMAGE_REL_MIPS_REFHI: u32 = 4;
pub const IMAGE_REL_MIPS_REFLO: u32 = 5;
pub const IMAGE_REL_MIPS_GPREL: u32 = 6;
pub const IMAGE_REL_MIPS_LITERAL: u32 = 7;
pub const IMAGE_REL_MIPS_SECTION: u32 = 10;
pub const IMAGE_REL_MIPS_SECREL: u32 = 11;
pub const IMAGE_REL_MIPS_SECRELLO: u32 = 12;
pub const IMAGE_REL_MIPS_SECRELHI: u32 = 13;
pub const IMAGE_REL_MIPS_TOKEN: u32 = 14;
pub const IMAGE_REL_MIPS_JMPADDR16: u32 = 16;
pub const IMAGE_REL_MIPS_REFWORDNB: u32 = 34;
pub const IMAGE_REL_MIPS_PAIR: u32 = 37;
pub const IMAGE_REL_ALPHA_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ALPHA_REFLONG: u32 = 1;
pub const IMAGE_REL_ALPHA_REFQUAD: u32 = 2;
pub const IMAGE_REL_ALPHA_GPREL32: u32 = 3;
pub const IMAGE_REL_ALPHA_LITERAL: u32 = 4;
pub const IMAGE_REL_ALPHA_LITUSE: u32 = 5;
pub const IMAGE_REL_ALPHA_GPDISP: u32 = 6;
pub const IMAGE_REL_ALPHA_BRADDR: u32 = 7;
pub const IMAGE_REL_ALPHA_HINT: u32 = 8;
pub const IMAGE_REL_ALPHA_INLINE_REFLONG: u32 = 9;
pub const IMAGE_REL_ALPHA_REFHI: u32 = 10;
pub const IMAGE_REL_ALPHA_REFLO: u32 = 11;
pub const IMAGE_REL_ALPHA_PAIR: u32 = 12;
pub const IMAGE_REL_ALPHA_MATCH: u32 = 13;
pub const IMAGE_REL_ALPHA_SECTION: u32 = 14;
pub const IMAGE_REL_ALPHA_SECREL: u32 = 15;
pub const IMAGE_REL_ALPHA_REFLONGNB: u32 = 16;
pub const IMAGE_REL_ALPHA_SECRELLO: u32 = 17;
pub const IMAGE_REL_ALPHA_SECRELHI: u32 = 18;
pub const IMAGE_REL_ALPHA_REFQ3: u32 = 19;
pub const IMAGE_REL_ALPHA_REFQ2: u32 = 20;
pub const IMAGE_REL_ALPHA_REFQ1: u32 = 21;
pub const IMAGE_REL_ALPHA_GPRELLO: u32 = 22;
pub const IMAGE_REL_ALPHA_GPRELHI: u32 = 23;
pub const IMAGE_REL_PPC_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_PPC_ADDR64: u32 = 1;
pub const IMAGE_REL_PPC_ADDR32: u32 = 2;
pub const IMAGE_REL_PPC_ADDR24: u32 = 3;
pub const IMAGE_REL_PPC_ADDR16: u32 = 4;
pub const IMAGE_REL_PPC_ADDR14: u32 = 5;
pub const IMAGE_REL_PPC_REL24: u32 = 6;
pub const IMAGE_REL_PPC_REL14: u32 = 7;
pub const IMAGE_REL_PPC_TOCREL16: u32 = 8;
pub const IMAGE_REL_PPC_TOCREL14: u32 = 9;
pub const IMAGE_REL_PPC_ADDR32NB: u32 = 10;
pub const IMAGE_REL_PPC_SECREL: u32 = 11;
pub const IMAGE_REL_PPC_SECTION: u32 = 12;
pub const IMAGE_REL_PPC_IFGLUE: u32 = 13;
pub const IMAGE_REL_PPC_IMGLUE: u32 = 14;
pub const IMAGE_REL_PPC_SECREL16: u32 = 15;
pub const IMAGE_REL_PPC_REFHI: u32 = 16;
pub const IMAGE_REL_PPC_REFLO: u32 = 17;
pub const IMAGE_REL_PPC_PAIR: u32 = 18;
pub const IMAGE_REL_PPC_SECRELLO: u32 = 19;
pub const IMAGE_REL_PPC_SECRELHI: u32 = 20;
pub const IMAGE_REL_PPC_GPREL: u32 = 21;
pub const IMAGE_REL_PPC_TOKEN: u32 = 22;
pub const IMAGE_REL_PPC_TYPEMASK: u32 = 255;
pub const IMAGE_REL_PPC_NEG: u32 = 256;
pub const IMAGE_REL_PPC_BRTAKEN: u32 = 512;
pub const IMAGE_REL_PPC_BRNTAKEN: u32 = 1024;
pub const IMAGE_REL_PPC_TOCDEFN: u32 = 2048;
pub const IMAGE_REL_SH3_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_SH3_DIRECT16: u32 = 1;
pub const IMAGE_REL_SH3_DIRECT32: u32 = 2;
pub const IMAGE_REL_SH3_DIRECT8: u32 = 3;
pub const IMAGE_REL_SH3_DIRECT8_WORD: u32 = 4;
pub const IMAGE_REL_SH3_DIRECT8_LONG: u32 = 5;
pub const IMAGE_REL_SH3_DIRECT4: u32 = 6;
pub const IMAGE_REL_SH3_DIRECT4_WORD: u32 = 7;
pub const IMAGE_REL_SH3_DIRECT4_LONG: u32 = 8;
pub const IMAGE_REL_SH3_PCREL8_WORD: u32 = 9;
pub const IMAGE_REL_SH3_PCREL8_LONG: u32 = 10;
pub const IMAGE_REL_SH3_PCREL12_WORD: u32 = 11;
pub const IMAGE_REL_SH3_STARTOF_SECTION: u32 = 12;
pub const IMAGE_REL_SH3_SIZEOF_SECTION: u32 = 13;
pub const IMAGE_REL_SH3_SECTION: u32 = 14;
pub const IMAGE_REL_SH3_SECREL: u32 = 15;
pub const IMAGE_REL_SH3_DIRECT32_NB: u32 = 16;
pub const IMAGE_REL_SH3_GPREL4_LONG: u32 = 17;
pub const IMAGE_REL_SH3_TOKEN: u32 = 18;
pub const IMAGE_REL_SHM_PCRELPT: u32 = 19;
pub const IMAGE_REL_SHM_REFLO: u32 = 20;
pub const IMAGE_REL_SHM_REFHALF: u32 = 21;
pub const IMAGE_REL_SHM_RELLO: u32 = 22;
pub const IMAGE_REL_SHM_RELHALF: u32 = 23;
pub const IMAGE_REL_SHM_PAIR: u32 = 24;
pub const IMAGE_REL_SH_NOMODE: u32 = 32768;
pub const IMAGE_REL_ARM_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ARM_ADDR32: u32 = 1;
pub const IMAGE_REL_ARM_ADDR32NB: u32 = 2;
pub const IMAGE_REL_ARM_BRANCH24: u32 = 3;
pub const IMAGE_REL_ARM_BRANCH11: u32 = 4;
pub const IMAGE_REL_ARM_TOKEN: u32 = 5;
pub const IMAGE_REL_ARM_GPREL12: u32 = 6;
pub const IMAGE_REL_ARM_GPREL7: u32 = 7;
pub const IMAGE_REL_ARM_BLX24: u32 = 8;
pub const IMAGE_REL_ARM_BLX11: u32 = 9;
pub const IMAGE_REL_ARM_SECTION: u32 = 14;
pub const IMAGE_REL_ARM_SECREL: u32 = 15;
pub const IMAGE_REL_ARM_MOV32A: u32 = 16;
pub const IMAGE_REL_ARM_MOV32: u32 = 16;
pub const IMAGE_REL_ARM_MOV32T: u32 = 17;
pub const IMAGE_REL_THUMB_MOV32: u32 = 17;
pub const IMAGE_REL_ARM_BRANCH20T: u32 = 18;
pub const IMAGE_REL_THUMB_BRANCH20: u32 = 18;
pub const IMAGE_REL_ARM_BRANCH24T: u32 = 20;
pub const IMAGE_REL_THUMB_BRANCH24: u32 = 20;
pub const IMAGE_REL_ARM_BLX23T: u32 = 21;
pub const IMAGE_REL_THUMB_BLX23: u32 = 21;
pub const IMAGE_REL_AM_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_AM_ADDR32: u32 = 1;
pub const IMAGE_REL_AM_ADDR32NB: u32 = 2;
pub const IMAGE_REL_AM_CALL32: u32 = 3;
pub const IMAGE_REL_AM_FUNCINFO: u32 = 4;
pub const IMAGE_REL_AM_REL32_1: u32 = 5;
pub const IMAGE_REL_AM_REL32_2: u32 = 6;
pub const IMAGE_REL_AM_SECREL: u32 = 7;
pub const IMAGE_REL_AM_SECTION: u32 = 8;
pub const IMAGE_REL_AM_TOKEN: u32 = 9;
pub const IMAGE_REL_ARM64_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ARM64_ADDR32: u32 = 1;
pub const IMAGE_REL_ARM64_ADDR32NB: u32 = 2;
pub const IMAGE_REL_ARM64_BRANCH26: u32 = 3;
pub const IMAGE_REL_ARM64_PAGEBASE_REL21: u32 = 4;
pub const IMAGE_REL_ARM64_REL21: u32 = 5;
pub const IMAGE_REL_ARM64_PAGEOFFSET_12A: u32 = 6;
pub const IMAGE_REL_ARM64_PAGEOFFSET_12L: u32 = 7;
pub const IMAGE_REL_ARM64_SECREL: u32 = 8;
pub const IMAGE_REL_ARM64_SECREL_LOW12A: u32 = 9;
pub const IMAGE_REL_ARM64_SECREL_HIGH12A: u32 = 10;
pub const IMAGE_REL_ARM64_SECREL_LOW12L: u32 = 11;
pub const IMAGE_REL_ARM64_TOKEN: u32 = 12;
pub const IMAGE_REL_ARM64_SECTION: u32 = 13;
pub const IMAGE_REL_ARM64_ADDR64: u32 = 14;
pub const IMAGE_REL_ARM64_BRANCH19: u32 = 15;
pub const IMAGE_REL_AMD64_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_AMD64_ADDR64: u32 = 1;
pub const IMAGE_REL_AMD64_ADDR32: u32 = 2;
pub const IMAGE_REL_AMD64_ADDR32NB: u32 = 3;
pub const IMAGE_REL_AMD64_REL32: u32 = 4;
pub const IMAGE_REL_AMD64_REL32_1: u32 = 5;
pub const IMAGE_REL_AMD64_REL32_2: u32 = 6;
pub const IMAGE_REL_AMD64_REL32_3: u32 = 7;
pub const IMAGE_REL_AMD64_REL32_4: u32 = 8;
pub const IMAGE_REL_AMD64_REL32_5: u32 = 9;
pub const IMAGE_REL_AMD64_SECTION: u32 = 10;
pub const IMAGE_REL_AMD64_SECREL: u32 = 11;
pub const IMAGE_REL_AMD64_SECREL7: u32 = 12;
pub const IMAGE_REL_AMD64_TOKEN: u32 = 13;
pub const IMAGE_REL_AMD64_SREL32: u32 = 14;
pub const IMAGE_REL_AMD64_PAIR: u32 = 15;
pub const IMAGE_REL_AMD64_SSPAN32: u32 = 16;
pub const IMAGE_REL_AMD64_EHANDLER: u32 = 17;
pub const IMAGE_REL_AMD64_IMPORT_BR: u32 = 18;
pub const IMAGE_REL_AMD64_IMPORT_CALL: u32 = 19;
pub const IMAGE_REL_AMD64_CFG_BR: u32 = 20;
pub const IMAGE_REL_AMD64_CFG_BR_REX: u32 = 21;
pub const IMAGE_REL_AMD64_CFG_CALL: u32 = 22;
pub const IMAGE_REL_AMD64_INDIR_BR: u32 = 23;
pub const IMAGE_REL_AMD64_INDIR_BR_REX: u32 = 24;
pub const IMAGE_REL_AMD64_INDIR_CALL: u32 = 25;
pub const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_FIRST: u32 = 32;
pub const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_LAST: u32 = 47;
pub const IMAGE_REL_IA64_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_IA64_IMM14: u32 = 1;
pub const IMAGE_REL_IA64_IMM22: u32 = 2;
pub const IMAGE_REL_IA64_IMM64: u32 = 3;
pub const IMAGE_REL_IA64_DIR32: u32 = 4;
pub const IMAGE_REL_IA64_DIR64: u32 = 5;
pub const IMAGE_REL_IA64_PCREL21B: u32 = 6;
pub const IMAGE_REL_IA64_PCREL21M: u32 = 7;
pub const IMAGE_REL_IA64_PCREL21F: u32 = 8;
pub const IMAGE_REL_IA64_GPREL22: u32 = 9;
pub const IMAGE_REL_IA64_LTOFF22: u32 = 10;
pub const IMAGE_REL_IA64_SECTION: u32 = 11;
pub const IMAGE_REL_IA64_SECREL22: u32 = 12;
pub const IMAGE_REL_IA64_SECREL64I: u32 = 13;
pub const IMAGE_REL_IA64_SECREL32: u32 = 14;
pub const IMAGE_REL_IA64_DIR32NB: u32 = 16;
pub const IMAGE_REL_IA64_SREL14: u32 = 17;
pub const IMAGE_REL_IA64_SREL22: u32 = 18;
pub const IMAGE_REL_IA64_SREL32: u32 = 19;
pub const IMAGE_REL_IA64_UREL32: u32 = 20;
pub const IMAGE_REL_IA64_PCREL60X: u32 = 21;
pub const IMAGE_REL_IA64_PCREL60B: u32 = 22;
pub const IMAGE_REL_IA64_PCREL60F: u32 = 23;
pub const IMAGE_REL_IA64_PCREL60I: u32 = 24;
pub const IMAGE_REL_IA64_PCREL60M: u32 = 25;
pub const IMAGE_REL_IA64_IMMGPREL64: u32 = 26;
pub const IMAGE_REL_IA64_TOKEN: u32 = 27;
pub const IMAGE_REL_IA64_GPREL32: u32 = 28;
pub const IMAGE_REL_IA64_ADDEND: u32 = 31;
pub const IMAGE_REL_CEF_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_CEF_ADDR32: u32 = 1;
pub const IMAGE_REL_CEF_ADDR64: u32 = 2;
pub const IMAGE_REL_CEF_ADDR32NB: u32 = 3;
pub const IMAGE_REL_CEF_SECTION: u32 = 4;
pub const IMAGE_REL_CEF_SECREL: u32 = 5;
pub const IMAGE_REL_CEF_TOKEN: u32 = 6;
pub const IMAGE_REL_CEE_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_CEE_ADDR32: u32 = 1;
pub const IMAGE_REL_CEE_ADDR64: u32 = 2;
pub const IMAGE_REL_CEE_ADDR32NB: u32 = 3;
pub const IMAGE_REL_CEE_SECTION: u32 = 4;
pub const IMAGE_REL_CEE_SECREL: u32 = 5;
pub const IMAGE_REL_CEE_TOKEN: u32 = 6;
pub const IMAGE_REL_M32R_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_M32R_ADDR32: u32 = 1;
pub const IMAGE_REL_M32R_ADDR32NB: u32 = 2;
pub const IMAGE_REL_M32R_ADDR24: u32 = 3;
pub const IMAGE_REL_M32R_GPREL16: u32 = 4;
pub const IMAGE_REL_M32R_PCREL24: u32 = 5;
pub const IMAGE_REL_M32R_PCREL16: u32 = 6;
pub const IMAGE_REL_M32R_PCREL8: u32 = 7;
pub const IMAGE_REL_M32R_REFHALF: u32 = 8;
pub const IMAGE_REL_M32R_REFHI: u32 = 9;
pub const IMAGE_REL_M32R_REFLO: u32 = 10;
pub const IMAGE_REL_M32R_PAIR: u32 = 11;
pub const IMAGE_REL_M32R_SECTION: u32 = 12;
pub const IMAGE_REL_M32R_SECREL32: u32 = 13;
pub const IMAGE_REL_M32R_TOKEN: u32 = 14;
pub const IMAGE_REL_EBC_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_EBC_ADDR32NB: u32 = 1;
pub const IMAGE_REL_EBC_REL32: u32 = 2;
pub const IMAGE_REL_EBC_SECTION: u32 = 3;
pub const IMAGE_REL_EBC_SECREL: u32 = 4;
pub const EMARCH_ENC_I17_IMM7B_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IMM7B_SIZE_X: u32 = 7;
pub const EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X: u32 = 4;
pub const EMARCH_ENC_I17_IMM7B_VAL_POS_X: u32 = 0;
pub const EMARCH_ENC_I17_IMM9D_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IMM9D_SIZE_X: u32 = 9;
pub const EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X: u32 = 18;
pub const EMARCH_ENC_I17_IMM9D_VAL_POS_X: u32 = 7;
pub const EMARCH_ENC_I17_IMM5C_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IMM5C_SIZE_X: u32 = 5;
pub const EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X: u32 = 13;
pub const EMARCH_ENC_I17_IMM5C_VAL_POS_X: u32 = 16;
pub const EMARCH_ENC_I17_IC_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IC_SIZE_X: u32 = 1;
pub const EMARCH_ENC_I17_IC_INST_WORD_POS_X: u32 = 12;
pub const EMARCH_ENC_I17_IC_VAL_POS_X: u32 = 21;
pub const EMARCH_ENC_I17_IMM41a_INST_WORD_X: u32 = 1;
pub const EMARCH_ENC_I17_IMM41a_SIZE_X: u32 = 10;
pub const EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X: u32 = 14;
pub const EMARCH_ENC_I17_IMM41a_VAL_POS_X: u32 = 22;
pub const EMARCH_ENC_I17_IMM41b_INST_WORD_X: u32 = 1;
pub const EMARCH_ENC_I17_IMM41b_SIZE_X: u32 = 8;
pub const EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X: u32 = 24;
pub const EMARCH_ENC_I17_IMM41b_VAL_POS_X: u32 = 32;
pub const EMARCH_ENC_I17_IMM41c_INST_WORD_X: u32 = 2;
pub const EMARCH_ENC_I17_IMM41c_SIZE_X: u32 = 23;
pub const EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X: u32 = 0;
pub const EMARCH_ENC_I17_IMM41c_VAL_POS_X: u32 = 40;
pub const EMARCH_ENC_I17_SIGN_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_SIGN_SIZE_X: u32 = 1;
pub const EMARCH_ENC_I17_SIGN_INST_WORD_POS_X: u32 = 27;
pub const EMARCH_ENC_I17_SIGN_VAL_POS_X: u32 = 63;
pub const X3_OPCODE_INST_WORD_X: u32 = 3;
pub const X3_OPCODE_SIZE_X: u32 = 4;
pub const X3_OPCODE_INST_WORD_POS_X: u32 = 28;
pub const X3_OPCODE_SIGN_VAL_POS_X: u32 = 0;
pub const X3_I_INST_WORD_X: u32 = 3;
pub const X3_I_SIZE_X: u32 = 1;
pub const X3_I_INST_WORD_POS_X: u32 = 27;
pub const X3_I_SIGN_VAL_POS_X: u32 = 59;
pub const X3_D_WH_INST_WORD_X: u32 = 3;
pub const X3_D_WH_SIZE_X: u32 = 3;
pub const X3_D_WH_INST_WORD_POS_X: u32 = 24;
pub const X3_D_WH_SIGN_VAL_POS_X: u32 = 0;
pub const X3_IMM20_INST_WORD_X: u32 = 3;
pub const X3_IMM20_SIZE_X: u32 = 20;
pub const X3_IMM20_INST_WORD_POS_X: u32 = 4;
pub const X3_IMM20_SIGN_VAL_POS_X: u32 = 0;
pub const X3_IMM39_1_INST_WORD_X: u32 = 2;
pub const X3_IMM39_1_SIZE_X: u32 = 23;
pub const X3_IMM39_1_INST_WORD_POS_X: u32 = 0;
pub const X3_IMM39_1_SIGN_VAL_POS_X: u32 = 36;
pub const X3_IMM39_2_INST_WORD_X: u32 = 1;
pub const X3_IMM39_2_SIZE_X: u32 = 16;
pub const X3_IMM39_2_INST_WORD_POS_X: u32 = 16;
pub const X3_IMM39_2_SIGN_VAL_POS_X: u32 = 20;
pub const X3_P_INST_WORD_X: u32 = 3;
pub const X3_P_SIZE_X: u32 = 4;
pub const X3_P_INST_WORD_POS_X: u32 = 0;
pub const X3_P_SIGN_VAL_POS_X: u32 = 0;
pub const X3_TMPLT_INST_WORD_X: u32 = 0;
pub const X3_TMPLT_SIZE_X: u32 = 4;
pub const X3_TMPLT_INST_WORD_POS_X: u32 = 0;
pub const X3_TMPLT_SIGN_VAL_POS_X: u32 = 0;
pub const X3_BTYPE_QP_INST_WORD_X: u32 = 2;
pub const X3_BTYPE_QP_SIZE_X: u32 = 9;
pub const X3_BTYPE_QP_INST_WORD_POS_X: u32 = 23;
pub const X3_BTYPE_QP_INST_VAL_POS_X: u32 = 0;
pub const X3_EMPTY_INST_WORD_X: u32 = 1;
pub const X3_EMPTY_SIZE_X: u32 = 2;
pub const X3_EMPTY_INST_WORD_POS_X: u32 = 14;
pub const X3_EMPTY_INST_VAL_POS_X: u32 = 0;
pub const IMAGE_REL_BASED_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_BASED_HIGH: u32 = 1;
pub const IMAGE_REL_BASED_LOW: u32 = 2;
pub const IMAGE_REL_BASED_HIGHLOW: u32 = 3;
pub const IMAGE_REL_BASED_HIGHADJ: u32 = 4;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_5: u32 = 5;
pub const IMAGE_REL_BASED_RESERVED: u32 = 6;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_7: u32 = 7;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_8: u32 = 8;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_9: u32 = 9;
pub const IMAGE_REL_BASED_DIR64: u32 = 10;
pub const IMAGE_REL_BASED_IA64_IMM64: u32 = 9;
pub const IMAGE_REL_BASED_MIPS_JMPADDR: u32 = 5;
pub const IMAGE_REL_BASED_MIPS_JMPADDR16: u32 = 9;
pub const IMAGE_REL_BASED_ARM_MOV32: u32 = 5;
pub const IMAGE_REL_BASED_THUMB_MOV32: u32 = 7;
pub const IMAGE_ARCHIVE_START_SIZE: u32 = 8;
pub const IMAGE_ARCHIVE_START: &[u8; 9] = b"!<arch>\n\0";
pub const IMAGE_ARCHIVE_END: &[u8; 3] = b"`\n\0";
pub const IMAGE_ARCHIVE_PAD: &[u8; 2] = b"\n\0";
pub const IMAGE_ARCHIVE_LINKER_MEMBER: &[u8; 17] = b"/               \0";
pub const IMAGE_ARCHIVE_LONGNAMES_MEMBER: &[u8; 17] = b"//              \0";
pub const IMAGE_ARCHIVE_HYBRIDMAP_MEMBER: &[u8; 17] = b"/<HYBRIDMAP>/   \0";
pub const IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR: u32 = 60;
pub const IMAGE_ORDINAL_FLAG64: i64 = -9223372036854775808;
pub const IMAGE_ORDINAL_FLAG32: u32 = 2147483648;
pub const IMAGE_ORDINAL_FLAG: i64 = -9223372036854775808;
pub const IMAGE_RESOURCE_NAME_IS_STRING: u32 = 2147483648;
pub const IMAGE_RESOURCE_DATA_IS_DIRECTORY: u32 = 2147483648;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_PROLOGUE: u32 = 1;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_EPILOGUE: u32 = 2;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_IMPORT_CONTROL_TRANSFER: u32 = 3;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_INDIR_CONTROL_TRANSFER: u32 = 4;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_SWITCHTABLE_BRANCH: u32 = 5;
pub const IMAGE_DYNAMIC_RELOCATION_FUNCTION_OVERRIDE: u32 = 7;
pub const IMAGE_FUNCTION_OVERRIDE_INVALID: u32 = 0;
pub const IMAGE_FUNCTION_OVERRIDE_X64_REL32: u32 = 1;
pub const IMAGE_FUNCTION_OVERRIDE_ARM64_BRANCH26: u32 = 2;
pub const IMAGE_FUNCTION_OVERRIDE_ARM64_THUNK: u32 = 3;
pub const IMAGE_HOT_PATCH_BASE_OBLIGATORY: u32 = 1;
pub const IMAGE_HOT_PATCH_BASE_CAN_ROLL_BACK: u32 = 2;
pub const IMAGE_HOT_PATCH_CHUNK_INVERSE: u32 = 2147483648;
pub const IMAGE_HOT_PATCH_CHUNK_OBLIGATORY: u32 = 1073741824;
pub const IMAGE_HOT_PATCH_CHUNK_RESERVED: u32 = 1072705536;
pub const IMAGE_HOT_PATCH_CHUNK_TYPE: u32 = 1032192;
pub const IMAGE_HOT_PATCH_CHUNK_SOURCE_RVA: u32 = 32768;
pub const IMAGE_HOT_PATCH_CHUNK_TARGET_RVA: u32 = 16384;
pub const IMAGE_HOT_PATCH_CHUNK_SIZE: u32 = 4095;
pub const IMAGE_HOT_PATCH_NONE: u32 = 0;
pub const IMAGE_HOT_PATCH_FUNCTION: u32 = 114688;
pub const IMAGE_HOT_PATCH_ABSOLUTE: u32 = 180224;
pub const IMAGE_HOT_PATCH_REL32: u32 = 245760;
pub const IMAGE_HOT_PATCH_CALL_TARGET: u32 = 278528;
pub const IMAGE_HOT_PATCH_INDIRECT: u32 = 376832;
pub const IMAGE_HOT_PATCH_NO_CALL_TARGET: u32 = 409600;
pub const IMAGE_HOT_PATCH_DYNAMIC_VALUE: u32 = 491520;
pub const IMAGE_GUARD_CF_INSTRUMENTED: u32 = 256;
pub const IMAGE_GUARD_CFW_INSTRUMENTED: u32 = 512;
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT: u32 = 1024;
pub const IMAGE_GUARD_SECURITY_COOKIE_UNUSED: u32 = 2048;
pub const IMAGE_GUARD_PROTECT_DELAYLOAD_IAT: u32 = 4096;
pub const IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION: u32 = 8192;
pub const IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT: u32 = 16384;
pub const IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION: u32 = 32768;
pub const IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT: u32 = 65536;
pub const IMAGE_GUARD_RF_INSTRUMENTED: u32 = 131072;
pub const IMAGE_GUARD_RF_ENABLE: u32 = 262144;
pub const IMAGE_GUARD_RF_STRICT: u32 = 524288;
pub const IMAGE_GUARD_RETPOLINE_PRESENT: u32 = 1048576;
pub const IMAGE_GUARD_EH_CONTINUATION_TABLE_PRESENT: u32 = 4194304;
pub const IMAGE_GUARD_XFG_ENABLED: u32 = 8388608;
pub const IMAGE_GUARD_CASTGUARD_PRESENT: u32 = 16777216;
pub const IMAGE_GUARD_MEMCPY_PRESENT: u32 = 33554432;
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK: u32 = 4026531840;
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT: u32 = 28;
pub const IMAGE_GUARD_FLAG_FID_SUPPRESSED: u32 = 1;
pub const IMAGE_GUARD_FLAG_EXPORT_SUPPRESSED: u32 = 2;
pub const IMAGE_GUARD_FLAG_FID_LANGEXCPTHANDLER: u32 = 4;
pub const IMAGE_GUARD_FLAG_FID_XFG: u32 = 8;
pub const IMAGE_ENCLAVE_LONG_ID_LENGTH: u32 = 32;
pub const IMAGE_ENCLAVE_SHORT_ID_LENGTH: u32 = 16;
pub const IMAGE_ENCLAVE_POLICY_DEBUGGABLE: u32 = 1;
pub const IMAGE_ENCLAVE_FLAG_PRIMARY_IMAGE: u32 = 1;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_NONE: u32 = 0;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_UNIQUE_ID: u32 = 1;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_AUTHOR_ID: u32 = 2;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_FAMILY_ID: u32 = 3;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_IMAGE_ID: u32 = 4;
pub const IMAGE_DEBUG_TYPE_UNKNOWN: u32 = 0;
pub const IMAGE_DEBUG_TYPE_COFF: u32 = 1;
pub const IMAGE_DEBUG_TYPE_CODEVIEW: u32 = 2;
pub const IMAGE_DEBUG_TYPE_FPO: u32 = 3;
pub const IMAGE_DEBUG_TYPE_MISC: u32 = 4;
pub const IMAGE_DEBUG_TYPE_EXCEPTION: u32 = 5;
pub const IMAGE_DEBUG_TYPE_FIXUP: u32 = 6;
pub const IMAGE_DEBUG_TYPE_OMAP_TO_SRC: u32 = 7;
pub const IMAGE_DEBUG_TYPE_OMAP_FROM_SRC: u32 = 8;
pub const IMAGE_DEBUG_TYPE_BORLAND: u32 = 9;
pub const IMAGE_DEBUG_TYPE_RESERVED10: u32 = 10;
pub const IMAGE_DEBUG_TYPE_BBT: u32 = 10;
pub const IMAGE_DEBUG_TYPE_CLSID: u32 = 11;
pub const IMAGE_DEBUG_TYPE_VC_FEATURE: u32 = 12;
pub const IMAGE_DEBUG_TYPE_POGO: u32 = 13;
pub const IMAGE_DEBUG_TYPE_ILTCG: u32 = 14;
pub const IMAGE_DEBUG_TYPE_MPX: u32 = 15;
pub const IMAGE_DEBUG_TYPE_REPRO: u32 = 16;
pub const IMAGE_DEBUG_TYPE_SPGO: u32 = 18;
pub const IMAGE_DEBUG_TYPE_EX_DLLCHARACTERISTICS: u32 = 20;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT: u32 = 1;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE: u32 = 2;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE: u32 = 4;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC: u32 = 8;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1: u32 = 16;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2: u32 = 32;
pub const FRAME_FPO: u32 = 0;
pub const FRAME_TRAP: u32 = 1;
pub const FRAME_TSS: u32 = 2;
pub const FRAME_NONFPO: u32 = 3;
pub const SIZEOF_RFPO_DATA: u32 = 16;
pub const IMAGE_DEBUG_MISC_EXENAME: u32 = 1;
pub const IMAGE_SEPARATE_DEBUG_SIGNATURE: u32 = 18756;
pub const NON_PAGED_DEBUG_SIGNATURE: u32 = 18766;
pub const IMAGE_SEPARATE_DEBUG_FLAGS_MASK: u32 = 32768;
pub const IMAGE_SEPARATE_DEBUG_MISMATCH: u32 = 32768;
pub const IMPORT_OBJECT_HDR_SIG2: u32 = 65535;
pub const UNWIND_HISTORY_TABLE_SIZE: u32 = 12;
pub const RTL_RUN_ONCE_CHECK_ONLY: u32 = 1;
pub const RTL_RUN_ONCE_ASYNC: u32 = 2;
pub const RTL_RUN_ONCE_INIT_FAILED: u32 = 4;
pub const RTL_RUN_ONCE_CTX_RESERVED_BITS: u32 = 2;
pub const FAST_FAIL_LEGACY_GS_VIOLATION: u32 = 0;
pub const FAST_FAIL_VTGUARD_CHECK_FAILURE: u32 = 1;
pub const FAST_FAIL_STACK_COOKIE_CHECK_FAILURE: u32 = 2;
pub const FAST_FAIL_CORRUPT_LIST_ENTRY: u32 = 3;
pub const FAST_FAIL_INCORRECT_STACK: u32 = 4;
pub const FAST_FAIL_INVALID_ARG: u32 = 5;
pub const FAST_FAIL_GS_COOKIE_INIT: u32 = 6;
pub const FAST_FAIL_FATAL_APP_EXIT: u32 = 7;
pub const FAST_FAIL_RANGE_CHECK_FAILURE: u32 = 8;
pub const FAST_FAIL_UNSAFE_REGISTRY_ACCESS: u32 = 9;
pub const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE: u32 = 10;
pub const FAST_FAIL_GUARD_WRITE_CHECK_FAILURE: u32 = 11;
pub const FAST_FAIL_INVALID_FIBER_SWITCH: u32 = 12;
pub const FAST_FAIL_INVALID_SET_OF_CONTEXT: u32 = 13;
pub const FAST_FAIL_INVALID_REFERENCE_COUNT: u32 = 14;
pub const FAST_FAIL_INVALID_JUMP_BUFFER: u32 = 18;
pub const FAST_FAIL_MRDATA_MODIFIED: u32 = 19;
pub const FAST_FAIL_CERTIFICATION_FAILURE: u32 = 20;
pub const FAST_FAIL_INVALID_EXCEPTION_CHAIN: u32 = 21;
pub const FAST_FAIL_CRYPTO_LIBRARY: u32 = 22;
pub const FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT: u32 = 23;
pub const FAST_FAIL_INVALID_IMAGE_BASE: u32 = 24;
pub const FAST_FAIL_DLOAD_PROTECTION_FAILURE: u32 = 25;
pub const FAST_FAIL_UNSAFE_EXTENSION_CALL: u32 = 26;
pub const FAST_FAIL_DEPRECATED_SERVICE_INVOKED: u32 = 27;
pub const FAST_FAIL_INVALID_BUFFER_ACCESS: u32 = 28;
pub const FAST_FAIL_INVALID_BALANCED_TREE: u32 = 29;
pub const FAST_FAIL_INVALID_NEXT_THREAD: u32 = 30;
pub const FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED: u32 = 31;
pub const FAST_FAIL_APCS_DISABLED: u32 = 32;
pub const FAST_FAIL_INVALID_IDLE_STATE: u32 = 33;
pub const FAST_FAIL_MRDATA_PROTECTION_FAILURE: u32 = 34;
pub const FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION: u32 = 35;
pub const FAST_FAIL_INVALID_LOCK_STATE: u32 = 36;
pub const FAST_FAIL_GUARD_JUMPTABLE: u32 = 37;
pub const FAST_FAIL_INVALID_LONGJUMP_TARGET: u32 = 38;
pub const FAST_FAIL_INVALID_DISPATCH_CONTEXT: u32 = 39;
pub const FAST_FAIL_INVALID_THREAD: u32 = 40;
pub const FAST_FAIL_INVALID_SYSCALL_NUMBER: u32 = 41;
pub const FAST_FAIL_INVALID_FILE_OPERATION: u32 = 42;
pub const FAST_FAIL_LPAC_ACCESS_DENIED: u32 = 43;
pub const FAST_FAIL_GUARD_SS_FAILURE: u32 = 44;
pub const FAST_FAIL_LOADER_CONTINUITY_FAILURE: u32 = 45;
pub const FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE: u32 = 46;
pub const FAST_FAIL_INVALID_CONTROL_STACK: u32 = 47;
pub const FAST_FAIL_SET_CONTEXT_DENIED: u32 = 48;
pub const FAST_FAIL_INVALID_IAT: u32 = 49;
pub const FAST_FAIL_HEAP_METADATA_CORRUPTION: u32 = 50;
pub const FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION: u32 = 51;
pub const FAST_FAIL_LOW_LABEL_ACCESS_DENIED: u32 = 52;
pub const FAST_FAIL_ENCLAVE_CALL_FAILURE: u32 = 53;
pub const FAST_FAIL_UNHANDLED_LSS_EXCEPTON: u32 = 54;
pub const FAST_FAIL_ADMINLESS_ACCESS_DENIED: u32 = 55;
pub const FAST_FAIL_UNEXPECTED_CALL: u32 = 56;
pub const FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS: u32 = 57;
pub const FAST_FAIL_UNEXPECTED_HOST_BEHAVIOR: u32 = 58;
pub const FAST_FAIL_FLAGS_CORRUPTION: u32 = 59;
pub const FAST_FAIL_VEH_CORRUPTION: u32 = 60;
pub const FAST_FAIL_ETW_CORRUPTION: u32 = 61;
pub const FAST_FAIL_RIO_ABORT: u32 = 62;
pub const FAST_FAIL_INVALID_PFN: u32 = 63;
pub const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE_XFG: u32 = 64;
pub const FAST_FAIL_CAST_GUARD: u32 = 65;
pub const FAST_FAIL_HOST_VISIBILITY_CHANGE: u32 = 66;
pub const FAST_FAIL_KERNEL_CET_SHADOW_STACK_ASSIST: u32 = 67;
pub const FAST_FAIL_PATCH_CALLBACK_FAILED: u32 = 68;
pub const FAST_FAIL_NTDLL_PATCH_FAILED: u32 = 69;
pub const FAST_FAIL_INVALID_FLS_DATA: u32 = 70;
pub const FAST_FAIL_INVALID_FAST_FAIL_CODE: u32 = 4294967295;
pub const HEAP_NO_SERIALIZE: u32 = 1;
pub const HEAP_GROWABLE: u32 = 2;
pub const HEAP_GENERATE_EXCEPTIONS: u32 = 4;
pub const HEAP_ZERO_MEMORY: u32 = 8;
pub const HEAP_REALLOC_IN_PLACE_ONLY: u32 = 16;
pub const HEAP_TAIL_CHECKING_ENABLED: u32 = 32;
pub const HEAP_FREE_CHECKING_ENABLED: u32 = 64;
pub const HEAP_DISABLE_COALESCE_ON_FREE: u32 = 128;
pub const HEAP_CREATE_ALIGN_16: u32 = 65536;
pub const HEAP_CREATE_ENABLE_TRACING: u32 = 131072;
pub const HEAP_CREATE_ENABLE_EXECUTE: u32 = 262144;
pub const HEAP_MAXIMUM_TAG: u32 = 4095;
pub const HEAP_PSEUDO_TAG_FLAG: u32 = 32768;
pub const HEAP_TAG_SHIFT: u32 = 18;
pub const HEAP_CREATE_SEGMENT_HEAP: u32 = 256;
pub const HEAP_CREATE_HARDENED: u32 = 512;
pub const IS_TEXT_UNICODE_ASCII16: u32 = 1;
pub const IS_TEXT_UNICODE_REVERSE_ASCII16: u32 = 16;
pub const IS_TEXT_UNICODE_STATISTICS: u32 = 2;
pub const IS_TEXT_UNICODE_REVERSE_STATISTICS: u32 = 32;
pub const IS_TEXT_UNICODE_CONTROLS: u32 = 4;
pub const IS_TEXT_UNICODE_REVERSE_CONTROLS: u32 = 64;
pub const IS_TEXT_UNICODE_SIGNATURE: u32 = 8;
pub const IS_TEXT_UNICODE_REVERSE_SIGNATURE: u32 = 128;
pub const IS_TEXT_UNICODE_ILLEGAL_CHARS: u32 = 256;
pub const IS_TEXT_UNICODE_ODD_LENGTH: u32 = 512;
pub const IS_TEXT_UNICODE_DBCS_LEADBYTE: u32 = 1024;
pub const IS_TEXT_UNICODE_UTF8: u32 = 2048;
pub const IS_TEXT_UNICODE_NULL_BYTES: u32 = 4096;
pub const IS_TEXT_UNICODE_UNICODE_MASK: u32 = 15;
pub const IS_TEXT_UNICODE_REVERSE_MASK: u32 = 240;
pub const IS_TEXT_UNICODE_NOT_UNICODE_MASK: u32 = 3840;
pub const IS_TEXT_UNICODE_NOT_ASCII_MASK: u32 = 61440;
pub const COMPRESSION_FORMAT_NONE: u32 = 0;
pub const COMPRESSION_FORMAT_DEFAULT: u32 = 1;
pub const COMPRESSION_FORMAT_LZNT1: u32 = 2;
pub const COMPRESSION_FORMAT_XPRESS: u32 = 3;
pub const COMPRESSION_FORMAT_XPRESS_HUFF: u32 = 4;
pub const COMPRESSION_FORMAT_XP10: u32 = 5;
pub const COMPRESSION_ENGINE_STANDARD: u32 = 0;
pub const COMPRESSION_ENGINE_MAXIMUM: u32 = 256;
pub const COMPRESSION_ENGINE_HIBER: u32 = 512;
pub const SEF_DACL_AUTO_INHERIT: u32 = 1;
pub const SEF_SACL_AUTO_INHERIT: u32 = 2;
pub const SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT: u32 = 4;
pub const SEF_AVOID_PRIVILEGE_CHECK: u32 = 8;
pub const SEF_AVOID_OWNER_CHECK: u32 = 16;
pub const SEF_DEFAULT_OWNER_FROM_PARENT: u32 = 32;
pub const SEF_DEFAULT_GROUP_FROM_PARENT: u32 = 64;
pub const SEF_MACL_NO_WRITE_UP: u32 = 256;
pub const SEF_MACL_NO_READ_UP: u32 = 512;
pub const SEF_MACL_NO_EXECUTE_UP: u32 = 1024;
pub const SEF_AI_USE_EXTRA_PARAMS: u32 = 2048;
pub const SEF_AVOID_OWNER_RESTRICTION: u32 = 4096;
pub const SEF_FORCE_USER_MODE: u32 = 8192;
pub const SEF_NORMALIZE_OUTPUT_DESCRIPTOR: u32 = 16384;
pub const SEF_MACL_VALID_FLAGS: u32 = 1792;
pub const MESSAGE_RESOURCE_UNICODE: u32 = 1;
pub const MESSAGE_RESOURCE_UTF8: u32 = 2;
pub const VER_EQUAL: u32 = 1;
pub const VER_GREATER: u32 = 2;
pub const VER_GREATER_EQUAL: u32 = 3;
pub const VER_LESS: u32 = 4;
pub const VER_LESS_EQUAL: u32 = 5;
pub const VER_AND: u32 = 6;
pub const VER_OR: u32 = 7;
pub const VER_CONDITION_MASK: u32 = 7;
pub const VER_NUM_BITS_PER_CONDITION_MASK: u32 = 3;
pub const VER_MINORVERSION: u32 = 1;
pub const VER_MAJORVERSION: u32 = 2;
pub const VER_BUILDNUMBER: u32 = 4;
pub const VER_PLATFORMID: u32 = 8;
pub const VER_SERVICEPACKMINOR: u32 = 16;
pub const VER_SERVICEPACKMAJOR: u32 = 32;
pub const VER_SUITENAME: u32 = 64;
pub const VER_PRODUCT_TYPE: u32 = 128;
pub const VER_NT_WORKSTATION: u32 = 1;
pub const VER_NT_DOMAIN_CONTROLLER: u32 = 2;
pub const VER_NT_SERVER: u32 = 3;
pub const VER_PLATFORM_WIN32s: u32 = 0;
pub const VER_PLATFORM_WIN32_WINDOWS: u32 = 1;
pub const VER_PLATFORM_WIN32_NT: u32 = 2;
pub const RTL_UMS_VERSION: u32 = 256;
pub const VRL_PREDEFINED_CLASS_BEGIN: u32 = 1;
pub const VRL_CUSTOM_CLASS_BEGIN: u32 = 256;
pub const VRL_CLASS_CONSISTENCY: u32 = 1;
pub const VRL_ENABLE_KERNEL_BREAKS: u32 = 2147483648;
pub const CTMF_INCLUDE_APPCONTAINER: u32 = 1;
pub const CTMF_INCLUDE_LPAC: u32 = 2;
pub const CTMF_VALID_FLAGS: u32 = 3;
pub const FLUSH_NV_MEMORY_IN_FLAG_NO_DRAIN: u32 = 1;
pub const WRITE_NV_MEMORY_FLAG_FLUSH: u32 = 1;
pub const WRITE_NV_MEMORY_FLAG_NON_TEMPORAL: u32 = 2;
pub const WRITE_NV_MEMORY_FLAG_PERSIST: u32 = 3;
pub const WRITE_NV_MEMORY_FLAG_NO_DRAIN: u32 = 256;
pub const FILL_NV_MEMORY_FLAG_FLUSH: u32 = 1;
pub const FILL_NV_MEMORY_FLAG_NON_TEMPORAL: u32 = 2;
pub const FILL_NV_MEMORY_FLAG_PERSIST: u32 = 3;
pub const FILL_NV_MEMORY_FLAG_NO_DRAIN: u32 = 256;
pub const RTL_CORRELATION_VECTOR_STRING_LENGTH: u32 = 129;
pub const RTL_CORRELATION_VECTOR_V1_PREFIX_LENGTH: u32 = 16;
pub const RTL_CORRELATION_VECTOR_V1_LENGTH: u32 = 64;
pub const RTL_CORRELATION_VECTOR_V2_PREFIX_LENGTH: u32 = 22;
pub const RTL_CORRELATION_VECTOR_V2_LENGTH: u32 = 128;
pub const IMAGE_POLICY_METADATA_VERSION: u32 = 1;
pub const IMAGE_POLICY_SECTION_NAME: &[u8; 9] = b".tPolicy\0";
pub const RTL_VIRTUAL_UNWIND2_VALIDATE_PAC: u32 = 1;
pub const RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO: u32 = 16777216;
pub const RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN: u32 = 33554432;
pub const RTL_CRITICAL_SECTION_FLAG_STATIC_INIT: u32 = 67108864;
pub const RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE: u32 = 134217728;
pub const RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO: u32 = 268435456;
pub const RTL_CRITICAL_SECTION_ALL_FLAG_BITS: u32 = 4278190080;
pub const RTL_CRITICAL_SECTION_FLAG_RESERVED: u32 = 3758096384;
pub const RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT: u32 = 1;
pub const RTL_CONDITION_VARIABLE_LOCKMODE_SHARED: u32 = 1;
pub const HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION: u32 = 1;
pub const WT_EXECUTEDEFAULT: u32 = 0;
pub const WT_EXECUTEINIOTHREAD: u32 = 1;
pub const WT_EXECUTEINUITHREAD: u32 = 2;
pub const WT_EXECUTEINWAITTHREAD: u32 = 4;
pub const WT_EXECUTEONLYONCE: u32 = 8;
pub const WT_EXECUTEINTIMERTHREAD: u32 = 32;
pub const WT_EXECUTELONGFUNCTION: u32 = 16;
pub const WT_EXECUTEINPERSISTENTIOTHREAD: u32 = 64;
pub const WT_EXECUTEINPERSISTENTTHREAD: u32 = 128;
pub const WT_TRANSFER_IMPERSONATION: u32 = 256;
pub const WT_EXECUTEINLONGTHREAD: u32 = 16;
pub const WT_EXECUTEDELETEWAIT: u32 = 8;
pub const ACTIVATION_CONTEXT_PATH_TYPE_NONE: u32 = 1;
pub const ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE: u32 = 2;
pub const ACTIVATION_CONTEXT_PATH_TYPE_URL: u32 = 3;
pub const ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF: u32 = 4;
pub const CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID: u32 = 1;
pub const PERFORMANCE_DATA_VERSION: u32 = 1;
pub const READ_THREAD_PROFILING_FLAG_DISPATCHING: u32 = 1;
pub const READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS: u32 = 2;
pub const UNIFIEDBUILDREVISION_KEY: &[u8; 63] =
  b"\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion\0";
pub const UNIFIEDBUILDREVISION_VALUE: &[u8; 4] = b"UBR\0";
pub const UNIFIEDBUILDREVISION_MIN: u32 = 0;
pub const DEVICEFAMILYDEVICEFORM_KEY: &[u8; 67] =
  b"\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion\\OEM\0";
pub const DEVICEFAMILYDEVICEFORM_VALUE: &[u8; 11] = b"DeviceForm\0";
pub const DEVICEFAMILYINFOENUM_UAP: u32 = 0;
pub const DEVICEFAMILYINFOENUM_WINDOWS_8X: u32 = 1;
pub const DEVICEFAMILYINFOENUM_WINDOWS_PHONE_8X: u32 = 2;
pub const DEVICEFAMILYINFOENUM_DESKTOP: u32 = 3;
pub const DEVICEFAMILYINFOENUM_MOBILE: u32 = 4;
pub const DEVICEFAMILYINFOENUM_XBOX: u32 = 5;
pub const DEVICEFAMILYINFOENUM_TEAM: u32 = 6;
pub const DEVICEFAMILYINFOENUM_IOT: u32 = 7;
pub const DEVICEFAMILYINFOENUM_IOT_HEADLESS: u32 = 8;
pub const DEVICEFAMILYINFOENUM_SERVER: u32 = 9;
pub const DEVICEFAMILYINFOENUM_HOLOGRAPHIC: u32 = 10;
pub const DEVICEFAMILYINFOENUM_XBOXSRA: u32 = 11;
pub const DEVICEFAMILYINFOENUM_XBOXERA: u32 = 12;
pub const DEVICEFAMILYINFOENUM_SERVER_NANO: u32 = 13;
pub const DEVICEFAMILYINFOENUM_8828080: u32 = 14;
pub const DEVICEFAMILYINFOENUM_7067329: u32 = 15;
pub const DEVICEFAMILYINFOENUM_WINDOWS_CORE: u32 = 16;
pub const DEVICEFAMILYINFOENUM_WINDOWS_CORE_HEADLESS: u32 = 17;
pub const DEVICEFAMILYINFOENUM_MAX: u32 = 17;
pub const DEVICEFAMILYDEVICEFORM_UNKNOWN: u32 = 0;
pub const DEVICEFAMILYDEVICEFORM_PHONE: u32 = 1;
pub const DEVICEFAMILYDEVICEFORM_TABLET: u32 = 2;
pub const DEVICEFAMILYDEVICEFORM_DESKTOP: u32 = 3;
pub const DEVICEFAMILYDEVICEFORM_NOTEBOOK: u32 = 4;
pub const DEVICEFAMILYDEVICEFORM_CONVERTIBLE: u32 = 5;
pub const DEVICEFAMILYDEVICEFORM_DETACHABLE: u32 = 6;
pub const DEVICEFAMILYDEVICEFORM_ALLINONE: u32 = 7;
pub const DEVICEFAMILYDEVICEFORM_STICKPC: u32 = 8;
pub const DEVICEFAMILYDEVICEFORM_PUCK: u32 = 9;
pub const DEVICEFAMILYDEVICEFORM_LARGESCREEN: u32 = 10;
pub const DEVICEFAMILYDEVICEFORM_HMD: u32 = 11;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_HANDHELD: u32 = 12;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_TABLET: u32 = 13;
pub const DEVICEFAMILYDEVICEFORM_BANKING: u32 = 14;
pub const DEVICEFAMILYDEVICEFORM_BUILDING_AUTOMATION: u32 = 15;
pub const DEVICEFAMILYDEVICEFORM_DIGITAL_SIGNAGE: u32 = 16;
pub const DEVICEFAMILYDEVICEFORM_GAMING: u32 = 17;
pub const DEVICEFAMILYDEVICEFORM_HOME_AUTOMATION: u32 = 18;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRIAL_AUTOMATION: u32 = 19;
pub const DEVICEFAMILYDEVICEFORM_KIOSK: u32 = 20;
pub const DEVICEFAMILYDEVICEFORM_MAKER_BOARD: u32 = 21;
pub const DEVICEFAMILYDEVICEFORM_MEDICAL: u32 = 22;
pub const DEVICEFAMILYDEVICEFORM_NETWORKING: u32 = 23;
pub const DEVICEFAMILYDEVICEFORM_POINT_OF_SERVICE: u32 = 24;
pub const DEVICEFAMILYDEVICEFORM_PRINTING: u32 = 25;
pub const DEVICEFAMILYDEVICEFORM_THIN_CLIENT: u32 = 26;
pub const DEVICEFAMILYDEVICEFORM_TOY: u32 = 27;
pub const DEVICEFAMILYDEVICEFORM_VENDING: u32 = 28;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_OTHER: u32 = 29;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE: u32 = 30;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_S: u32 = 31;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X: u32 = 32;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X_DEVKIT: u32 = 33;
pub const DEVICEFAMILYDEVICEFORM_XBOX_SERIES_X: u32 = 34;
pub const DEVICEFAMILYDEVICEFORM_XBOX_SERIES_X_DEVKIT: u32 = 35;
pub const DEVICEFAMILYDEVICEFORM_XBOX_SERIES_S: u32 = 36;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_01: u32 = 37;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_02: u32 = 38;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_03: u32 = 39;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_04: u32 = 40;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_05: u32 = 41;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_06: u32 = 42;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_07: u32 = 43;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_08: u32 = 44;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_09: u32 = 45;
pub const DEVICEFAMILYDEVICEFORM_MAX: u32 = 45;
pub const DLL_PROCESS_ATTACH: u32 = 1;
pub const DLL_THREAD_ATTACH: u32 = 2;
pub const DLL_THREAD_DETACH: u32 = 3;
pub const DLL_PROCESS_DETACH: u32 = 0;
pub const EVENTLOG_SEQUENTIAL_READ: u32 = 1;
pub const EVENTLOG_SEEK_READ: u32 = 2;
pub const EVENTLOG_FORWARDS_READ: u32 = 4;
pub const EVENTLOG_BACKWARDS_READ: u32 = 8;
pub const EVENTLOG_SUCCESS: u32 = 0;
pub const EVENTLOG_ERROR_TYPE: u32 = 1;
pub const EVENTLOG_WARNING_TYPE: u32 = 2;
pub const EVENTLOG_INFORMATION_TYPE: u32 = 4;
pub const EVENTLOG_AUDIT_SUCCESS: u32 = 8;
pub const EVENTLOG_AUDIT_FAILURE: u32 = 16;
pub const EVENTLOG_START_PAIRED_EVENT: u32 = 1;
pub const EVENTLOG_END_PAIRED_EVENT: u32 = 2;
pub const EVENTLOG_END_ALL_PAIRED_EVENTS: u32 = 4;
pub const EVENTLOG_PAIRED_EVENT_ACTIVE: u32 = 8;
pub const EVENTLOG_PAIRED_EVENT_INACTIVE: u32 = 16;
pub const MAXLOGICALLOGNAMESIZE: u32 = 256;
pub const KEY_QUERY_VALUE: u32 = 1;
pub const KEY_SET_VALUE: u32 = 2;
pub const KEY_CREATE_SUB_KEY: u32 = 4;
pub const KEY_ENUMERATE_SUB_KEYS: u32 = 8;
pub const KEY_NOTIFY: u32 = 16;
pub const KEY_CREATE_LINK: u32 = 32;
pub const KEY_WOW64_32KEY: u32 = 512;
pub const KEY_WOW64_64KEY: u32 = 256;
pub const KEY_WOW64_RES: u32 = 768;
pub const KEY_READ: u32 = 131097;
pub const KEY_WRITE: u32 = 131078;
pub const KEY_EXECUTE: u32 = 131097;
pub const KEY_ALL_ACCESS: u32 = 983103;
pub const REG_OPTION_RESERVED: u32 = 0;
pub const REG_OPTION_NON_VOLATILE: u32 = 0;
pub const REG_OPTION_VOLATILE: u32 = 1;
pub const REG_OPTION_CREATE_LINK: u32 = 2;
pub const REG_OPTION_BACKUP_RESTORE: u32 = 4;
pub const REG_OPTION_OPEN_LINK: u32 = 8;
pub const REG_OPTION_DONT_VIRTUALIZE: u32 = 16;
pub const REG_LEGAL_OPTION: u32 = 31;
pub const REG_OPEN_LEGAL_OPTION: u32 = 28;
pub const REG_CREATED_NEW_KEY: u32 = 1;
pub const REG_OPENED_EXISTING_KEY: u32 = 2;
pub const REG_STANDARD_FORMAT: u32 = 1;
pub const REG_LATEST_FORMAT: u32 = 2;
pub const REG_NO_COMPRESSION: u32 = 4;
pub const REG_WHOLE_HIVE_VOLATILE: u32 = 1;
pub const REG_REFRESH_HIVE: u32 = 2;
pub const REG_NO_LAZY_FLUSH: u32 = 4;
pub const REG_FORCE_RESTORE: u32 = 8;
pub const REG_APP_HIVE: u32 = 16;
pub const REG_PROCESS_PRIVATE: u32 = 32;
pub const REG_START_JOURNAL: u32 = 64;
pub const REG_HIVE_EXACT_FILE_GROWTH: u32 = 128;
pub const REG_HIVE_NO_RM: u32 = 256;
pub const REG_HIVE_SINGLE_LOG: u32 = 512;
pub const REG_BOOT_HIVE: u32 = 1024;
pub const REG_LOAD_HIVE_OPEN_HANDLE: u32 = 2048;
pub const REG_FLUSH_HIVE_FILE_GROWTH: u32 = 4096;
pub const REG_OPEN_READ_ONLY: u32 = 8192;
pub const REG_IMMUTABLE: u32 = 16384;
pub const REG_NO_IMPERSONATION_FALLBACK: u32 = 32768;
pub const REG_APP_HIVE_OPEN_READ_ONLY: u32 = 8192;
pub const REG_FORCE_UNLOAD: u32 = 1;
pub const REG_UNLOAD_LEGAL_FLAGS: u32 = 1;
pub const REG_NOTIFY_CHANGE_NAME: u32 = 1;
pub const REG_NOTIFY_CHANGE_ATTRIBUTES: u32 = 2;
pub const REG_NOTIFY_CHANGE_LAST_SET: u32 = 4;
pub const REG_NOTIFY_CHANGE_SECURITY: u32 = 8;
pub const REG_NOTIFY_THREAD_AGNOSTIC: u32 = 268435456;
pub const REG_LEGAL_CHANGE_FILTER: u32 = 268435471;
pub const REG_NONE: u32 = 0;
pub const REG_SZ: u32 = 1;
pub const REG_EXPAND_SZ: u32 = 2;
pub const REG_BINARY: u32 = 3;
pub const REG_DWORD: u32 = 4;
pub const REG_DWORD_LITTLE_ENDIAN: u32 = 4;
pub const REG_DWORD_BIG_ENDIAN: u32 = 5;
pub const REG_LINK: u32 = 6;
pub const REG_MULTI_SZ: u32 = 7;
pub const REG_RESOURCE_LIST: u32 = 8;
pub const REG_FULL_RESOURCE_DESCRIPTOR: u32 = 9;
pub const REG_RESOURCE_REQUIREMENTS_LIST: u32 = 10;
pub const REG_QWORD: u32 = 11;
pub const REG_QWORD_LITTLE_ENDIAN: u32 = 11;
pub const SERVICE_KERNEL_DRIVER: u32 = 1;
pub const SERVICE_FILE_SYSTEM_DRIVER: u32 = 2;
pub const SERVICE_ADAPTER: u32 = 4;
pub const SERVICE_RECOGNIZER_DRIVER: u32 = 8;
pub const SERVICE_DRIVER: u32 = 11;
pub const SERVICE_WIN32_OWN_PROCESS: u32 = 16;
pub const SERVICE_WIN32_SHARE_PROCESS: u32 = 32;
pub const SERVICE_WIN32: u32 = 48;
pub const SERVICE_USER_SERVICE: u32 = 64;
pub const SERVICE_USERSERVICE_INSTANCE: u32 = 128;
pub const SERVICE_USER_SHARE_PROCESS: u32 = 96;
pub const SERVICE_USER_OWN_PROCESS: u32 = 80;
pub const SERVICE_INTERACTIVE_PROCESS: u32 = 256;
pub const SERVICE_PKG_SERVICE: u32 = 512;
pub const SERVICE_TYPE_ALL: u32 = 1023;
pub const SERVICE_BOOT_START: u32 = 0;
pub const SERVICE_SYSTEM_START: u32 = 1;
pub const SERVICE_AUTO_START: u32 = 2;
pub const SERVICE_DEMAND_START: u32 = 3;
pub const SERVICE_DISABLED: u32 = 4;
pub const SERVICE_ERROR_IGNORE: u32 = 0;
pub const SERVICE_ERROR_NORMAL: u32 = 1;
pub const SERVICE_ERROR_SEVERE: u32 = 2;
pub const SERVICE_ERROR_CRITICAL: u32 = 3;
pub const CM_SERVICE_NETWORK_BOOT_LOAD: u32 = 1;
pub const CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD: u32 = 2;
pub const CM_SERVICE_USB_DISK_BOOT_LOAD: u32 = 4;
pub const CM_SERVICE_SD_DISK_BOOT_LOAD: u32 = 8;
pub const CM_SERVICE_USB3_DISK_BOOT_LOAD: u32 = 16;
pub const CM_SERVICE_MEASURED_BOOT_LOAD: u32 = 32;
pub const CM_SERVICE_VERIFIER_BOOT_LOAD: u32 = 64;
pub const CM_SERVICE_WINPE_BOOT_LOAD: u32 = 128;
pub const CM_SERVICE_RAM_DISK_BOOT_LOAD: u32 = 256;
pub const CM_SERVICE_VALID_PROMOTION_MASK: u32 = 511;
pub const TAPE_ERASE_SHORT: u32 = 0;
pub const TAPE_ERASE_LONG: u32 = 1;
pub const TAPE_LOAD: u32 = 0;
pub const TAPE_UNLOAD: u32 = 1;
pub const TAPE_TENSION: u32 = 2;
pub const TAPE_LOCK: u32 = 3;
pub const TAPE_UNLOCK: u32 = 4;
pub const TAPE_FORMAT: u32 = 5;
pub const TAPE_SETMARKS: u32 = 0;
pub const TAPE_FILEMARKS: u32 = 1;
pub const TAPE_SHORT_FILEMARKS: u32 = 2;
pub const TAPE_LONG_FILEMARKS: u32 = 3;
pub const TAPE_ABSOLUTE_POSITION: u32 = 0;
pub const TAPE_LOGICAL_POSITION: u32 = 1;
pub const TAPE_PSEUDO_LOGICAL_POSITION: u32 = 2;
pub const TAPE_REWIND: u32 = 0;
pub const TAPE_ABSOLUTE_BLOCK: u32 = 1;
pub const TAPE_LOGICAL_BLOCK: u32 = 2;
pub const TAPE_PSEUDO_LOGICAL_BLOCK: u32 = 3;
pub const TAPE_SPACE_END_OF_DATA: u32 = 4;
pub const TAPE_SPACE_RELATIVE_BLOCKS: u32 = 5;
pub const TAPE_SPACE_FILEMARKS: u32 = 6;
pub const TAPE_SPACE_SEQUENTIAL_FMKS: u32 = 7;
pub const TAPE_SPACE_SETMARKS: u32 = 8;
pub const TAPE_SPACE_SEQUENTIAL_SMKS: u32 = 9;
pub const TAPE_DRIVE_FIXED: u32 = 1;
pub const TAPE_DRIVE_SELECT: u32 = 2;
pub const TAPE_DRIVE_INITIATOR: u32 = 4;
pub const TAPE_DRIVE_ERASE_SHORT: u32 = 16;
pub const TAPE_DRIVE_ERASE_LONG: u32 = 32;
pub const TAPE_DRIVE_ERASE_BOP_ONLY: u32 = 64;
pub const TAPE_DRIVE_ERASE_IMMEDIATE: u32 = 128;
pub const TAPE_DRIVE_TAPE_CAPACITY: u32 = 256;
pub const TAPE_DRIVE_TAPE_REMAINING: u32 = 512;
pub const TAPE_DRIVE_FIXED_BLOCK: u32 = 1024;
pub const TAPE_DRIVE_VARIABLE_BLOCK: u32 = 2048;
pub const TAPE_DRIVE_WRITE_PROTECT: u32 = 4096;
pub const TAPE_DRIVE_EOT_WZ_SIZE: u32 = 8192;
pub const TAPE_DRIVE_ECC: u32 = 65536;
pub const TAPE_DRIVE_COMPRESSION: u32 = 131072;
pub const TAPE_DRIVE_PADDING: u32 = 262144;
pub const TAPE_DRIVE_REPORT_SMKS: u32 = 524288;
pub const TAPE_DRIVE_GET_ABSOLUTE_BLK: u32 = 1048576;
pub const TAPE_DRIVE_GET_LOGICAL_BLK: u32 = 2097152;
pub const TAPE_DRIVE_SET_EOT_WZ_SIZE: u32 = 4194304;
pub const TAPE_DRIVE_EJECT_MEDIA: u32 = 16777216;
pub const TAPE_DRIVE_CLEAN_REQUESTS: u32 = 33554432;
pub const TAPE_DRIVE_SET_CMP_BOP_ONLY: u32 = 67108864;
pub const TAPE_DRIVE_RESERVED_BIT: u32 = 2147483648;
pub const TAPE_DRIVE_LOAD_UNLOAD: u32 = 2147483649;
pub const TAPE_DRIVE_TENSION: u32 = 2147483650;
pub const TAPE_DRIVE_LOCK_UNLOCK: u32 = 2147483652;
pub const TAPE_DRIVE_REWIND_IMMEDIATE: u32 = 2147483656;
pub const TAPE_DRIVE_SET_BLOCK_SIZE: u32 = 2147483664;
pub const TAPE_DRIVE_LOAD_UNLD_IMMED: u32 = 2147483680;
pub const TAPE_DRIVE_TENSION_IMMED: u32 = 2147483712;
pub const TAPE_DRIVE_LOCK_UNLK_IMMED: u32 = 2147483776;
pub const TAPE_DRIVE_SET_ECC: u32 = 2147483904;
pub const TAPE_DRIVE_SET_COMPRESSION: u32 = 2147484160;
pub const TAPE_DRIVE_SET_PADDING: u32 = 2147484672;
pub const TAPE_DRIVE_SET_REPORT_SMKS: u32 = 2147485696;
pub const TAPE_DRIVE_ABSOLUTE_BLK: u32 = 2147487744;
pub const TAPE_DRIVE_ABS_BLK_IMMED: u32 = 2147491840;
pub const TAPE_DRIVE_LOGICAL_BLK: u32 = 2147500032;
pub const TAPE_DRIVE_LOG_BLK_IMMED: u32 = 2147516416;
pub const TAPE_DRIVE_END_OF_DATA: u32 = 2147549184;
pub const TAPE_DRIVE_RELATIVE_BLKS: u32 = 2147614720;
pub const TAPE_DRIVE_FILEMARKS: u32 = 2147745792;
pub const TAPE_DRIVE_SEQUENTIAL_FMKS: u32 = 2148007936;
pub const TAPE_DRIVE_SETMARKS: u32 = 2148532224;
pub const TAPE_DRIVE_SEQUENTIAL_SMKS: u32 = 2149580800;
pub const TAPE_DRIVE_REVERSE_POSITION: u32 = 2151677952;
pub const TAPE_DRIVE_SPACE_IMMEDIATE: u32 = 2155872256;
pub const TAPE_DRIVE_WRITE_SETMARKS: u32 = 2164260864;
pub const TAPE_DRIVE_WRITE_FILEMARKS: u32 = 2181038080;
pub const TAPE_DRIVE_WRITE_SHORT_FMKS: u32 = 2214592512;
pub const TAPE_DRIVE_WRITE_LONG_FMKS: u32 = 2281701376;
pub const TAPE_DRIVE_WRITE_MARK_IMMED: u32 = 2415919104;
pub const TAPE_DRIVE_FORMAT: u32 = 2684354560;
pub const TAPE_DRIVE_FORMAT_IMMEDIATE: u32 = 3221225472;
pub const TAPE_DRIVE_HIGH_FEATURES: u32 = 2147483648;
pub const TAPE_FIXED_PARTITIONS: u32 = 0;
pub const TAPE_SELECT_PARTITIONS: u32 = 1;
pub const TAPE_INITIATOR_PARTITIONS: u32 = 2;
pub const TAPE_QUERY_DRIVE_PARAMETERS: u32 = 0;
pub const TAPE_QUERY_MEDIA_CAPACITY: u32 = 1;
pub const TAPE_CHECK_FOR_DRIVE_PROBLEM: u32 = 2;
pub const TAPE_QUERY_IO_ERROR_DATA: u32 = 3;
pub const TAPE_QUERY_DEVICE_ERROR_DATA: u32 = 4;
pub const TRANSACTION_MANAGER_VOLATILE: u32 = 1;
pub const TRANSACTION_MANAGER_COMMIT_DEFAULT: u32 = 0;
pub const TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME: u32 = 2;
pub const TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES: u32 = 4;
pub const TRANSACTION_MANAGER_COMMIT_LOWEST: u32 = 8;
pub const TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY: u32 = 16;
pub const TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS: u32 = 32;
pub const TRANSACTION_MANAGER_MAXIMUM_OPTION: u32 = 63;
pub const TRANSACTION_DO_NOT_PROMOTE: u32 = 1;
pub const TRANSACTION_MAXIMUM_OPTION: u32 = 1;
pub const RESOURCE_MANAGER_VOLATILE: u32 = 1;
pub const RESOURCE_MANAGER_COMMUNICATION: u32 = 2;
pub const RESOURCE_MANAGER_MAXIMUM_OPTION: u32 = 3;
pub const CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY: u32 = 1;
pub const CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO: u32 = 2;
pub const CRM_PROTOCOL_MAXIMUM_OPTION: u32 = 3;
pub const ENLISTMENT_SUPERIOR: u32 = 1;
pub const ENLISTMENT_MAXIMUM_OPTION: u32 = 1;
pub const TRANSACTION_NOTIFY_MASK: u32 = 1073741823;
pub const TRANSACTION_NOTIFY_PREPREPARE: u32 = 1;
pub const TRANSACTION_NOTIFY_PREPARE: u32 = 2;
pub const TRANSACTION_NOTIFY_COMMIT: u32 = 4;
pub const TRANSACTION_NOTIFY_ROLLBACK: u32 = 8;
pub const TRANSACTION_NOTIFY_PREPREPARE_COMPLETE: u32 = 16;
pub const TRANSACTION_NOTIFY_PREPARE_COMPLETE: u32 = 32;
pub const TRANSACTION_NOTIFY_COMMIT_COMPLETE: u32 = 64;
pub const TRANSACTION_NOTIFY_ROLLBACK_COMPLETE: u32 = 128;
pub const TRANSACTION_NOTIFY_RECOVER: u32 = 256;
pub const TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT: u32 = 512;
pub const TRANSACTION_NOTIFY_DELEGATE_COMMIT: u32 = 1024;
pub const TRANSACTION_NOTIFY_RECOVER_QUERY: u32 = 2048;
pub const TRANSACTION_NOTIFY_ENLIST_PREPREPARE: u32 = 4096;
pub const TRANSACTION_NOTIFY_LAST_RECOVER: u32 = 8192;
pub const TRANSACTION_NOTIFY_INDOUBT: u32 = 16384;
pub const TRANSACTION_NOTIFY_PROPAGATE_PULL: u32 = 32768;
pub const TRANSACTION_NOTIFY_PROPAGATE_PUSH: u32 = 65536;
pub const TRANSACTION_NOTIFY_MARSHAL: u32 = 131072;
pub const TRANSACTION_NOTIFY_ENLIST_MASK: u32 = 262144;
pub const TRANSACTION_NOTIFY_RM_DISCONNECTED: u32 = 16777216;
pub const TRANSACTION_NOTIFY_TM_ONLINE: u32 = 33554432;
pub const TRANSACTION_NOTIFY_COMMIT_REQUEST: u32 = 67108864;
pub const TRANSACTION_NOTIFY_PROMOTE: u32 = 134217728;
pub const TRANSACTION_NOTIFY_PROMOTE_NEW: u32 = 268435456;
pub const TRANSACTION_NOTIFY_REQUEST_OUTCOME: u32 = 536870912;
pub const TRANSACTION_NOTIFY_COMMIT_FINALIZE: u32 = 1073741824;
pub const TRANSACTIONMANAGER_OBJECT_PATH: &[u8; 21] = b"\\TransactionManager\\\0";
pub const TRANSACTION_OBJECT_PATH: &[u8; 14] = b"\\Transaction\\\0";
pub const ENLISTMENT_OBJECT_PATH: &[u8; 13] = b"\\Enlistment\\\0";
pub const RESOURCE_MANAGER_OBJECT_PATH: &[u8; 18] = b"\\ResourceManager\\\0";
pub const TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED: u32 = 1;
pub const KTM_MARSHAL_BLOB_VERSION_MAJOR: u32 = 1;
pub const KTM_MARSHAL_BLOB_VERSION_MINOR: u32 = 1;
pub const MAX_TRANSACTION_DESCRIPTION_LENGTH: u32 = 64;
pub const MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH: u32 = 64;
pub const TRANSACTIONMANAGER_QUERY_INFORMATION: u32 = 1;
pub const TRANSACTIONMANAGER_SET_INFORMATION: u32 = 2;
pub const TRANSACTIONMANAGER_RECOVER: u32 = 4;
pub const TRANSACTIONMANAGER_RENAME: u32 = 8;
pub const TRANSACTIONMANAGER_CREATE_RM: u32 = 16;
pub const TRANSACTIONMANAGER_BIND_TRANSACTION: u32 = 32;
pub const TRANSACTIONMANAGER_GENERIC_READ: u32 = 131073;
pub const TRANSACTIONMANAGER_GENERIC_WRITE: u32 = 131102;
pub const TRANSACTIONMANAGER_GENERIC_EXECUTE: u32 = 131072;
pub const TRANSACTIONMANAGER_ALL_ACCESS: u32 = 983103;
pub const TRANSACTION_QUERY_INFORMATION: u32 = 1;
pub const TRANSACTION_SET_INFORMATION: u32 = 2;
pub const TRANSACTION_ENLIST: u32 = 4;
pub const TRANSACTION_COMMIT: u32 = 8;
pub const TRANSACTION_ROLLBACK: u32 = 16;
pub const TRANSACTION_PROPAGATE: u32 = 32;
pub const TRANSACTION_RIGHT_RESERVED1: u32 = 64;
pub const TRANSACTION_GENERIC_READ: u32 = 1179649;
pub const TRANSACTION_GENERIC_WRITE: u32 = 1179710;
pub const TRANSACTION_GENERIC_EXECUTE: u32 = 1179672;
pub const TRANSACTION_ALL_ACCESS: u32 = 2031679;
pub const TRANSACTION_RESOURCE_MANAGER_RIGHTS: u32 = 1179703;
pub const RESOURCEMANAGER_QUERY_INFORMATION: u32 = 1;
pub const RESOURCEMANAGER_SET_INFORMATION: u32 = 2;
pub const RESOURCEMANAGER_RECOVER: u32 = 4;
pub const RESOURCEMANAGER_ENLIST: u32 = 8;
pub const RESOURCEMANAGER_GET_NOTIFICATION: u32 = 16;
pub const RESOURCEMANAGER_REGISTER_PROTOCOL: u32 = 32;
pub const RESOURCEMANAGER_COMPLETE_PROPAGATION: u32 = 64;
pub const RESOURCEMANAGER_GENERIC_READ: u32 = 1179649;
pub const RESOURCEMANAGER_GENERIC_WRITE: u32 = 1179774;
pub const RESOURCEMANAGER_GENERIC_EXECUTE: u32 = 1179740;
pub const RESOURCEMANAGER_ALL_ACCESS: u32 = 2031743;
pub const ENLISTMENT_QUERY_INFORMATION: u32 = 1;
pub const ENLISTMENT_SET_INFORMATION: u32 = 2;
pub const ENLISTMENT_RECOVER: u32 = 4;
pub const ENLISTMENT_SUBORDINATE_RIGHTS: u32 = 8;
pub const ENLISTMENT_SUPERIOR_RIGHTS: u32 = 16;
pub const ENLISTMENT_GENERIC_READ: u32 = 131073;
pub const ENLISTMENT_GENERIC_WRITE: u32 = 131102;
pub const ENLISTMENT_GENERIC_EXECUTE: u32 = 131100;
pub const ENLISTMENT_ALL_ACCESS: u32 = 983071;
pub const ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION: u32 = 1;
pub const ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION: u32 = 2;
pub const ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION: u32 = 3;
pub const ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION: u32 = 4;
pub const ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION: u32 = 5;
pub const ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION: u32 = 6;
pub const ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION: u32 = 7;
pub const ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE: u32 = 8;
pub const ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES: u32 = 9;
pub const ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS: u32 = 10;
pub const ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO: u32 = 11;
pub const ACTIVATION_CONTEXT_SECTION_WINRT_ACTIVATABLE_CLASSES: u32 = 12;
pub const DEVPROP_TYPEMOD_ARRAY: u32 = 4096;
pub const DEVPROP_TYPEMOD_LIST: u32 = 8192;
pub const DEVPROP_TYPE_EMPTY: u32 = 0;
pub const DEVPROP_TYPE_NULL: u32 = 1;
pub const DEVPROP_TYPE_SBYTE: u32 = 2;
pub const DEVPROP_TYPE_BYTE: u32 = 3;
pub const DEVPROP_TYPE_INT16: u32 = 4;
pub const DEVPROP_TYPE_UINT16: u32 = 5;
pub const DEVPROP_TYPE_INT32: u32 = 6;
pub const DEVPROP_TYPE_UINT32: u32 = 7;
pub const DEVPROP_TYPE_INT64: u32 = 8;
pub const DEVPROP_TYPE_UINT64: u32 = 9;
pub const DEVPROP_TYPE_FLOAT: u32 = 10;
pub const DEVPROP_TYPE_DOUBLE: u32 = 11;
pub const DEVPROP_TYPE_DECIMAL: u32 = 12;
pub const DEVPROP_TYPE_GUID: u32 = 13;
pub const DEVPROP_TYPE_CURRENCY: u32 = 14;
pub const DEVPROP_TYPE_DATE: u32 = 15;
pub const DEVPROP_TYPE_FILETIME: u32 = 16;
pub const DEVPROP_TYPE_BOOLEAN: u32 = 17;
pub const DEVPROP_TYPE_STRING: u32 = 18;
pub const DEVPROP_TYPE_STRING_LIST: u32 = 8210;
pub const DEVPROP_TYPE_SECURITY_DESCRIPTOR: u32 = 19;
pub const DEVPROP_TYPE_SECURITY_DESCRIPTOR_STRING: u32 = 20;
pub const DEVPROP_TYPE_DEVPROPKEY: u32 = 21;
pub const DEVPROP_TYPE_DEVPROPTYPE: u32 = 22;
pub const DEVPROP_TYPE_BINARY: u32 = 4099;
pub const DEVPROP_TYPE_ERROR: u32 = 23;
pub const DEVPROP_TYPE_NTSTATUS: u32 = 24;
pub const DEVPROP_TYPE_STRING_INDIRECT: u32 = 25;
pub const MAX_DEVPROP_TYPE: u32 = 25;
pub const MAX_DEVPROP_TYPEMOD: u32 = 8192;
pub const DEVPROP_MASK_TYPE: u32 = 4095;
pub const DEVPROP_MASK_TYPEMOD: u32 = 61440;
pub const DEVPROPID_FIRST_USABLE: u32 = 2;
pub type ULONG = ::std::os::raw::c_ulong;
pub type PULONG = *mut ULONG;
pub type USHORT = ::std::os::raw::c_ushort;
pub type PUSHORT = *mut USHORT;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type PUCHAR = *mut UCHAR;
pub type PSZ = *mut ::std::os::raw::c_char;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type FLOAT = f32;
pub type PFLOAT = *mut FLOAT;
pub type PBOOL = *mut BOOL;
pub type LPBOOL = *mut BOOL;
pub type PBYTE = *mut BYTE;
pub type LPBYTE = *mut BYTE;
pub type PINT = *mut ::std::os::raw::c_int;
pub type LPINT = *mut ::std::os::raw::c_int;
pub type PWORD = *mut WORD;
pub type LPWORD = *mut WORD;
pub type LPLONG = *mut ::std::os::raw::c_long;
pub type PDWORD = *mut DWORD;
pub type LPDWORD = *mut DWORD;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type LPCVOID = *const ::std::os::raw::c_void;
pub type INT = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type PUINT = *mut ::std::os::raw::c_uint;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
  pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
  pub fn __security_init_cookie();
}
extern "C" {
  pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
  pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
  pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
  pub fn _invalid_parameter_noinfo();
}
extern "C" {
  pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
  pub fn _invoke_watson(
    _Expression: *const wchar_t,
    _FunctionName: *const wchar_t,
    _FileName: *const wchar_t,
    _LineNo: ::std::os::raw::c_uint,
    _Reserved: usize,
  ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
  pub _locale_pctype: *const ::std::os::raw::c_ushort,
  pub _locale_mb_cur_max: ::std::os::raw::c_int,
  pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
  const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<__crt_locale_data_public>(),
    16usize,
    concat!("Size of: ", stringify!(__crt_locale_data_public))
  );
  assert_eq!(
    ::std::mem::align_of::<__crt_locale_data_public>(),
    8usize,
    concat!("Alignment of ", stringify!(__crt_locale_data_public))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__crt_locale_data_public),
      "::",
      stringify!(_locale_pctype)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__crt_locale_data_public),
      "::",
      stringify!(_locale_mb_cur_max)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(__crt_locale_data_public),
      "::",
      stringify!(_locale_lc_codepage)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
  pub locinfo: *mut __crt_locale_data,
  pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
  const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<__crt_locale_pointers>(),
    16usize,
    concat!("Size of: ", stringify!(__crt_locale_pointers))
  );
  assert_eq!(
    ::std::mem::align_of::<__crt_locale_pointers>(),
    8usize,
    concat!("Alignment of ", stringify!(__crt_locale_pointers))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__crt_locale_pointers),
      "::",
      stringify!(locinfo)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__crt_locale_pointers),
      "::",
      stringify!(mbcinfo)
    )
  );
}
pub type _locale_t = *mut __crt_locale_pointers;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
  pub _Wchar: ::std::os::raw::c_ulong,
  pub _Byte: ::std::os::raw::c_ushort,
  pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
  const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_Mbstatet>(),
    8usize,
    concat!("Size of: ", stringify!(_Mbstatet))
  );
  assert_eq!(
    ::std::mem::align_of::<_Mbstatet>(),
    4usize,
    concat!("Alignment of ", stringify!(_Mbstatet))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_Mbstatet),
      "::",
      stringify!(_Wchar)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_Mbstatet),
      "::",
      stringify!(_Byte)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_Mbstatet),
      "::",
      stringify!(_State)
    )
  );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
  pub fn __pctype_func() -> *const ::std::os::raw::c_ushort;
}
extern "C" {
  pub fn __pwctype_func() -> *const wctype_t;
}
extern "C" {
  pub fn iswalnum(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswalpha(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswascii(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswblank(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswcntrl(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswgraph(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswlower(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswprint(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswpunct(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswspace(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswupper(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iswxdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __iswcsymf(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __iswcsym(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswalnum_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswalpha_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswblank_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswcntrl_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswgraph_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswlower_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswprint_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswpunct_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswspace_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswupper_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswxdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswcsymf_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iswcsym_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn towupper(_C: wint_t) -> wint_t;
}
extern "C" {
  pub fn towlower(_C: wint_t) -> wint_t;
}
extern "C" {
  pub fn iswctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _towupper_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
  pub fn _towlower_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
  pub fn _iswctype_l(_C: wint_t, _Type: wctype_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn isleadbyte(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isleadbyte_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn is_wctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isctype(_C: ::std::os::raw::c_int, _Type: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isctype_l(
    _C: ::std::os::raw::c_int,
    _Type: ::std::os::raw::c_int,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn isalpha(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isalpha_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn isupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isupper_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn islower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _islower_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn isdigit(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isdigit_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn isxdigit(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isxdigit_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn isspace(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isspace_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ispunct(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _ispunct_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn isblank(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isblank_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn isalnum(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isalnum_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn isprint(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isprint_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn isgraph(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _isgraph_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn iscntrl(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _iscntrl_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn toupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn tolower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _tolower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _tolower_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _toupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _toupper_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __isascii(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __toascii(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __iscsymf(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __iscsym(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
pub type POINTER_64_INT = ::std::os::raw::c_ulonglong;
pub type INT8 = ::std::os::raw::c_schar;
pub type PINT8 = *mut ::std::os::raw::c_schar;
pub type INT16 = ::std::os::raw::c_short;
pub type PINT16 = *mut ::std::os::raw::c_short;
pub type INT32 = ::std::os::raw::c_int;
pub type PINT32 = *mut ::std::os::raw::c_int;
pub type INT64 = ::std::os::raw::c_longlong;
pub type PINT64 = *mut ::std::os::raw::c_longlong;
pub type UINT8 = ::std::os::raw::c_uchar;
pub type PUINT8 = *mut ::std::os::raw::c_uchar;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type PUINT16 = *mut ::std::os::raw::c_ushort;
pub type UINT32 = ::std::os::raw::c_uint;
pub type PUINT32 = *mut ::std::os::raw::c_uint;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type PUINT64 = *mut ::std::os::raw::c_ulonglong;
pub type LONG32 = ::std::os::raw::c_int;
pub type PLONG32 = *mut ::std::os::raw::c_int;
pub type ULONG32 = ::std::os::raw::c_uint;
pub type PULONG32 = *mut ::std::os::raw::c_uint;
pub type DWORD32 = ::std::os::raw::c_uint;
pub type PDWORD32 = *mut ::std::os::raw::c_uint;
pub type INT_PTR = ::std::os::raw::c_longlong;
pub type PINT_PTR = *mut ::std::os::raw::c_longlong;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type PUINT_PTR = *mut ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type PLONG_PTR = *mut ::std::os::raw::c_longlong;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type PULONG_PTR = *mut ::std::os::raw::c_ulonglong;
pub type PHANDLE64 = *mut *mut ::std::os::raw::c_void;
pub type SHANDLE_PTR = ::std::os::raw::c_longlong;
pub type HANDLE_PTR = ::std::os::raw::c_ulonglong;
pub type UHALF_PTR = ::std::os::raw::c_uint;
pub type PUHALF_PTR = *mut ::std::os::raw::c_uint;
pub type HALF_PTR = ::std::os::raw::c_int;
pub type PHALF_PTR = *mut ::std::os::raw::c_int;
pub type SIZE_T = ULONG_PTR;
pub type PSIZE_T = *mut ULONG_PTR;
pub type SSIZE_T = LONG_PTR;
pub type PSSIZE_T = *mut LONG_PTR;
pub type DWORD_PTR = ULONG_PTR;
pub type PDWORD_PTR = *mut ULONG_PTR;
pub type LONG64 = ::std::os::raw::c_longlong;
pub type PLONG64 = *mut ::std::os::raw::c_longlong;
pub type ULONG64 = ::std::os::raw::c_ulonglong;
pub type PULONG64 = *mut ::std::os::raw::c_ulonglong;
pub type DWORD64 = ::std::os::raw::c_ulonglong;
pub type PDWORD64 = *mut ::std::os::raw::c_ulonglong;
pub type KAFFINITY = ULONG_PTR;
pub type PKAFFINITY = *mut KAFFINITY;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type CHAR = ::std::os::raw::c_char;
pub type SHORT = ::std::os::raw::c_short;
pub type LONG = ::std::os::raw::c_long;
pub type WCHAR = wchar_t;
pub type PWCHAR = *mut WCHAR;
pub type LPWCH = *mut WCHAR;
pub type PWCH = *mut WCHAR;
pub type LPCWCH = *const WCHAR;
pub type PCWCH = *const WCHAR;
pub type NWPSTR = *mut WCHAR;
pub type LPWSTR = *mut WCHAR;
pub type PWSTR = *mut WCHAR;
pub type PZPWSTR = *mut PWSTR;
pub type PCZPWSTR = *const PWSTR;
pub type LPUWSTR = *mut WCHAR;
pub type PUWSTR = *mut WCHAR;
pub type LPCWSTR = *const WCHAR;
pub type PCWSTR = *const WCHAR;
pub type PZPCWSTR = *mut PCWSTR;
pub type PCZPCWSTR = *const PCWSTR;
pub type LPCUWSTR = *const WCHAR;
pub type PCUWSTR = *const WCHAR;
pub type PZZWSTR = *mut WCHAR;
pub type PCZZWSTR = *const WCHAR;
pub type PUZZWSTR = *mut WCHAR;
pub type PCUZZWSTR = *const WCHAR;
pub type PNZWCH = *mut WCHAR;
pub type PCNZWCH = *const WCHAR;
pub type PUNZWCH = *mut WCHAR;
pub type PCUNZWCH = *const WCHAR;
pub type PCHAR = *mut CHAR;
pub type LPCH = *mut CHAR;
pub type PCH = *mut CHAR;
pub type LPCCH = *const CHAR;
pub type PCCH = *const CHAR;
pub type NPSTR = *mut CHAR;
pub type LPSTR = *mut CHAR;
pub type PSTR = *mut CHAR;
pub type PZPSTR = *mut PSTR;
pub type PCZPSTR = *const PSTR;
pub type LPCSTR = *const CHAR;
pub type PCSTR = *const CHAR;
pub type PZPCSTR = *mut PCSTR;
pub type PCZPCSTR = *const PCSTR;
pub type PZZSTR = *mut CHAR;
pub type PCZZSTR = *const CHAR;
pub type PNZCH = *mut CHAR;
pub type PCNZCH = *const CHAR;
pub type TCHAR = ::std::os::raw::c_char;
pub type PTCHAR = *mut ::std::os::raw::c_char;
pub type TBYTE = ::std::os::raw::c_uchar;
pub type PTBYTE = *mut ::std::os::raw::c_uchar;
pub type LPTCH = LPCH;
pub type PTCH = LPCH;
pub type LPCTCH = LPCCH;
pub type PCTCH = LPCCH;
pub type PTSTR = LPSTR;
pub type LPTSTR = LPSTR;
pub type PUTSTR = LPSTR;
pub type LPUTSTR = LPSTR;
pub type PCTSTR = LPCSTR;
pub type LPCTSTR = LPCSTR;
pub type PCUTSTR = LPCSTR;
pub type LPCUTSTR = LPCSTR;
pub type PZZTSTR = PZZSTR;
pub type PUZZTSTR = PZZSTR;
pub type PCZZTSTR = PCZZSTR;
pub type PCUZZTSTR = PCZZSTR;
pub type PZPTSTR = PZPSTR;
pub type PNZTCH = PNZCH;
pub type PUNZTCH = PNZCH;
pub type PCNZTCH = PCNZCH;
pub type PCUNZTCH = PCNZCH;
pub type PSHORT = *mut SHORT;
pub type PLONG = *mut LONG;

pub type PPROCESSOR_NUMBER = *mut PROCESSOR_NUMBER;
pub type PGROUP_AFFINITY = *mut GROUP_AFFINITY;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type PHANDLE = *mut HANDLE;
pub type FCHAR = BYTE;
pub type FSHORT = WORD;
pub type FLONG = DWORD;
pub type HRESULT = ::std::os::raw::c_long;
pub type CCHAR = ::std::os::raw::c_char;
pub type LCID = DWORD;
pub type PLCID = PDWORD;
pub type LANGID = WORD;
pub const COMPARTMENT_ID_UNSPECIFIED_COMPARTMENT_ID: COMPARTMENT_ID = 0;
pub const COMPARTMENT_ID_DEFAULT_COMPARTMENT_ID: COMPARTMENT_ID = 1;
pub type COMPARTMENT_ID = ::std::os::raw::c_int;
pub type PCOMPARTMENT_ID = *mut COMPARTMENT_ID;
pub type PFLOAT128 = *mut FLOAT128;
pub type LONGLONG = ::std::os::raw::c_longlong;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
pub type PLONGLONG = *mut LONGLONG;
pub type PULONGLONG = *mut ULONGLONG;
pub type USN = LONGLONG;
pub type PLARGE_INTEGER = *mut LARGE_INTEGER;
pub type PULARGE_INTEGER = *mut ULARGE_INTEGER;
pub type RTL_REFERENCE_COUNT = LONG_PTR;
pub type PRTL_REFERENCE_COUNT = *mut LONG_PTR;
pub type RTL_REFERENCE_COUNT32 = LONG;
pub type PRTL_REFERENCE_COUNT32 = *mut LONG;
pub type PLUID = *mut LUID;
pub type DWORDLONG = ULONGLONG;
pub type PDWORDLONG = *mut DWORDLONG;
extern "C" {
  pub fn _rotl8(
    Value: ::std::os::raw::c_uchar,
    Shift: ::std::os::raw::c_uchar,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _rotl16(
    Value: ::std::os::raw::c_ushort,
    Shift: ::std::os::raw::c_uchar,
  ) -> ::std::os::raw::c_ushort;
}
extern "C" {
  pub fn _rotr8(
    Value: ::std::os::raw::c_uchar,
    Shift: ::std::os::raw::c_uchar,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _rotr16(
    Value: ::std::os::raw::c_ushort,
    Shift: ::std::os::raw::c_uchar,
  ) -> ::std::os::raw::c_ushort;
}
extern "C" {
  pub fn _rotl(
    Value: ::std::os::raw::c_uint,
    Shift: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn _rotl64(
    Value: ::std::os::raw::c_ulonglong,
    Shift: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn _rotr(
    Value: ::std::os::raw::c_uint,
    Shift: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn _rotr64(
    Value: ::std::os::raw::c_ulonglong,
    Shift: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_ulonglong;
}
pub type BOOLEAN = BYTE;
pub type PBOOLEAN = *mut BOOLEAN;

pub type PLIST_ENTRY = *mut LIST_ENTRY;
pub type PRLIST_ENTRY = *mut LIST_ENTRY;

pub type PSINGLE_LIST_ENTRY = *mut SINGLE_LIST_ENTRY;

pub type PLIST_ENTRY32 = *mut LIST_ENTRY32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LIST_ENTRY64 {
  pub Flink: ULONGLONG,
  pub Blink: ULONGLONG,
}
#[test]
fn bindgen_test_layout_LIST_ENTRY64() {
  const UNINIT: ::std::mem::MaybeUninit<LIST_ENTRY64> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<LIST_ENTRY64>(),
    16usize,
    concat!("Size of: ", stringify!(LIST_ENTRY64))
  );
  assert_eq!(
    ::std::mem::align_of::<LIST_ENTRY64>(),
    8usize,
    concat!("Alignment of ", stringify!(LIST_ENTRY64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flink) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(LIST_ENTRY64),
      "::",
      stringify!(Flink)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Blink) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(LIST_ENTRY64),
      "::",
      stringify!(Blink)
    )
  );
}
pub type PLIST_ENTRY64 = *mut LIST_ENTRY64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
  pub Data1: ::std::os::raw::c_ulong,
  pub Data2: ::std::os::raw::c_ushort,
  pub Data3: ::std::os::raw::c_ushort,
  pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout__GUID() {
  const UNINIT: ::std::mem::MaybeUninit<_GUID> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_GUID>(),
    16usize,
    concat!("Size of: ", stringify!(_GUID))
  );
  assert_eq!(
    ::std::mem::align_of::<_GUID>(),
    4usize,
    concat!("Alignment of ", stringify!(_GUID))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Data1) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_GUID),
      "::",
      stringify!(Data1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Data2) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_GUID),
      "::",
      stringify!(Data2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Data3) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_GUID),
      "::",
      stringify!(Data3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Data4) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_GUID),
      "::",
      stringify!(Data4)
    )
  );
}
pub type GUID = _GUID;
pub type LPGUID = *mut GUID;
pub type LPCGUID = *const GUID;
pub type IID = GUID;
pub type LPIID = *mut IID;
pub type CLSID = GUID;
pub type LPCLSID = *mut CLSID;
pub type FMTID = GUID;
pub type LPFMTID = *mut FMTID;
extern "C" {
  pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
  pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
  pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
  pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
  pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
  pub fn memchr(
    _Buf: *const ::std::os::raw::c_void,
    _Val: ::std::os::raw::c_int,
    _MaxCount: ::std::os::raw::c_ulonglong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn memcmp(
    _Buf1: *const ::std::os::raw::c_void,
    _Buf2: *const ::std::os::raw::c_void,
    _Size: ::std::os::raw::c_ulonglong,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn memcpy(
    _Dst: *mut ::std::os::raw::c_void,
    _Src: *const ::std::os::raw::c_void,
    _Size: ::std::os::raw::c_ulonglong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn memmove(
    _Dst: *mut ::std::os::raw::c_void,
    _Src: *const ::std::os::raw::c_void,
    _Size: ::std::os::raw::c_ulonglong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn memset(
    _Dst: *mut ::std::os::raw::c_void,
    _Val: ::std::os::raw::c_int,
    _Size: ::std::os::raw::c_ulonglong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn strchr(
    _Str: *const ::std::os::raw::c_char,
    _Val: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strrchr(
    _Str: *const ::std::os::raw::c_char,
    _Ch: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strstr(
    _Str: *const ::std::os::raw::c_char,
    _SubStr: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn wcschr(
    _Str: *const ::std::os::raw::c_ushort,
    _Ch: ::std::os::raw::c_ushort,
  ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
  pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn _memicmp(
    _Buf1: *const ::std::os::raw::c_void,
    _Buf2: *const ::std::os::raw::c_void,
    _Size: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _memicmp_l(
    _Buf1: *const ::std::os::raw::c_void,
    _Buf2: *const ::std::os::raw::c_void,
    _Size: usize,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn memccpy(
    _Dst: *mut ::std::os::raw::c_void,
    _Src: *const ::std::os::raw::c_void,
    _Val: ::std::os::raw::c_int,
    _Size: ::std::os::raw::c_ulonglong,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn memicmp(
    _Buf1: *const ::std::os::raw::c_void,
    _Buf2: *const ::std::os::raw::c_void,
    _Size: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wcscat_s(
    _Destination: *mut wchar_t,
    _SizeInWords: rsize_t,
    _Source: *const wchar_t,
  ) -> errno_t;
}
extern "C" {
  pub fn wcscpy_s(
    _Destination: *mut wchar_t,
    _SizeInWords: rsize_t,
    _Source: *const wchar_t,
  ) -> errno_t;
}
extern "C" {
  pub fn wcsncat_s(
    _Destination: *mut wchar_t,
    _SizeInWords: rsize_t,
    _Source: *const wchar_t,
    _MaxCount: rsize_t,
  ) -> errno_t;
}
extern "C" {
  pub fn wcsncpy_s(
    _Destination: *mut wchar_t,
    _SizeInWords: rsize_t,
    _Source: *const wchar_t,
    _MaxCount: rsize_t,
  ) -> errno_t;
}
extern "C" {
  pub fn wcstok_s(
    _String: *mut wchar_t,
    _Delimiter: *const wchar_t,
    _Context: *mut *mut wchar_t,
  ) -> *mut wchar_t;
}
extern "C" {
  pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcscmp(
    _String1: *const ::std::os::raw::c_ushort,
    _String2: *const ::std::os::raw::c_ushort,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
  pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
  pub fn wcsncat(
    _Destination: *mut wchar_t,
    _Source: *const wchar_t,
    _Count: usize,
  ) -> *mut wchar_t;
}
extern "C" {
  pub fn wcsncmp(
    _String1: *const ::std::os::raw::c_ushort,
    _String2: *const ::std::os::raw::c_ushort,
    _MaxCount: ::std::os::raw::c_ulonglong,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wcsncpy(
    _Destination: *mut wchar_t,
    _Source: *const wchar_t,
    _Count: usize,
  ) -> *mut wchar_t;
}
extern "C" {
  pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
  pub fn wcstok(
    _String: *mut wchar_t,
    _Delimiter: *const wchar_t,
    _Context: *mut *mut wchar_t,
  ) -> *mut wchar_t;
}
extern "C" {
  pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
  pub fn _wcserror_s(
    _Buffer: *mut wchar_t,
    _SizeInWords: usize,
    _ErrorNumber: ::std::os::raw::c_int,
  ) -> errno_t;
}
extern "C" {
  pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn __wcserror_s(
    _Buffer: *mut wchar_t,
    _SizeInWords: usize,
    _ErrorMessage: *const wchar_t,
  ) -> errno_t;
}
extern "C" {
  pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcsicmp_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcsnicmp(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcsnicmp_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount: usize,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcsnset_s(
    _Destination: *mut wchar_t,
    _SizeInWords: usize,
    _Value: wchar_t,
    _MaxCount: usize,
  ) -> errno_t;
}
extern "C" {
  pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
  pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: usize, _Value: wchar_t) -> errno_t;
}
extern "C" {
  pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
  pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
  pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
  pub fn _wcsupr_s(_String: *mut wchar_t, _Size: usize) -> errno_t;
}
extern "C" {
  pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
  pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcsxfrm(_Destination: *mut wchar_t, _Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
  pub fn _wcsxfrm_l(
    _Destination: *mut wchar_t,
    _Source: *const wchar_t,
    _MaxCount: usize,
    _Locale: _locale_t,
  ) -> usize;
}
extern "C" {
  pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcscoll_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcsicoll_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcsncoll(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcsncoll_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount: usize,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcsnicoll(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _wcsnicoll_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount: usize,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wcsnicmp(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
  pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
  pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strcpy_s(
    _Destination: *mut ::std::os::raw::c_char,
    _SizeInBytes: rsize_t,
    _Source: *const ::std::os::raw::c_char,
  ) -> errno_t;
}
extern "C" {
  pub fn strcat_s(
    _Destination: *mut ::std::os::raw::c_char,
    _SizeInBytes: rsize_t,
    _Source: *const ::std::os::raw::c_char,
  ) -> errno_t;
}
extern "C" {
  pub fn strerror_s(
    _Buffer: *mut ::std::os::raw::c_char,
    _SizeInBytes: usize,
    _ErrorNumber: ::std::os::raw::c_int,
  ) -> errno_t;
}
extern "C" {
  pub fn strncat_s(
    _Destination: *mut ::std::os::raw::c_char,
    _SizeInBytes: rsize_t,
    _Source: *const ::std::os::raw::c_char,
    _MaxCount: rsize_t,
  ) -> errno_t;
}
extern "C" {
  pub fn strncpy_s(
    _Destination: *mut ::std::os::raw::c_char,
    _SizeInBytes: rsize_t,
    _Source: *const ::std::os::raw::c_char,
    _MaxCount: rsize_t,
  ) -> errno_t;
}
extern "C" {
  pub fn strtok_s(
    _String: *mut ::std::os::raw::c_char,
    _Delimiter: *const ::std::os::raw::c_char,
    _Context: *mut *mut ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn _memccpy(
    _Dst: *mut ::std::os::raw::c_void,
    _Src: *const ::std::os::raw::c_void,
    _Val: ::std::os::raw::c_int,
    _MaxCount: usize,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn strcat(
    _Destination: *mut ::std::os::raw::c_char,
    _Source: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strcmp(
    _Str1: *const ::std::os::raw::c_char,
    _Str2: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _strcmpi(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strcoll(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _strcoll_l(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strcpy(
    _Destination: *mut ::std::os::raw::c_char,
    _Source: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strcspn(
    _Str: *const ::std::os::raw::c_char,
    _Control: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn _strerror_s(
    _Buffer: *mut ::std::os::raw::c_char,
    _SizeInBytes: usize,
    _ErrorMessage: *const ::std::os::raw::c_char,
  ) -> errno_t;
}
extern "C" {
  pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn _stricmp(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _stricoll(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _stricoll_l(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _stricmp_l(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
  pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn _strlwr_s_l(
    _String: *mut ::std::os::raw::c_char,
    _Size: usize,
    _Locale: _locale_t,
  ) -> errno_t;
}
extern "C" {
  pub fn _strlwr_l(
    _String: *mut ::std::os::raw::c_char,
    _Locale: _locale_t,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strncat(
    _Destination: *mut ::std::os::raw::c_char,
    _Source: *const ::std::os::raw::c_char,
    _Count: ::std::os::raw::c_ulonglong,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strncmp(
    _Str1: *const ::std::os::raw::c_char,
    _Str2: *const ::std::os::raw::c_char,
    _MaxCount: ::std::os::raw::c_ulonglong,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _strnicmp(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
    _MaxCount: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _strnicmp_l(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
    _MaxCount: usize,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _strnicoll(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
    _MaxCount: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _strnicoll_l(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
    _MaxCount: usize,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _strncoll(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
    _MaxCount: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn _strncoll_l(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
    _MaxCount: usize,
    _Locale: _locale_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: usize) -> usize;
}
extern "C" {
  pub fn strncpy(
    _Destination: *mut ::std::os::raw::c_char,
    _Source: *const ::std::os::raw::c_char,
    _Count: ::std::os::raw::c_ulonglong,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
  pub fn _strnset_s(
    _String: *mut ::std::os::raw::c_char,
    _SizeInBytes: usize,
    _Value: ::std::os::raw::c_int,
    _MaxCount: usize,
  ) -> errno_t;
}
extern "C" {
  pub fn _strnset(
    _Destination: *mut ::std::os::raw::c_char,
    _Value: ::std::os::raw::c_int,
    _Count: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strpbrk(
    _Str: *const ::std::os::raw::c_char,
    _Control: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn _strset_s(
    _Destination: *mut ::std::os::raw::c_char,
    _DestinationSize: usize,
    _Value: ::std::os::raw::c_int,
  ) -> errno_t;
}
extern "C" {
  pub fn _strset(
    _Destination: *mut ::std::os::raw::c_char,
    _Value: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strspn(
    _Str: *const ::std::os::raw::c_char,
    _Control: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn strtok(
    _String: *mut ::std::os::raw::c_char,
    _Delimiter: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
  pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn _strupr_s_l(
    _String: *mut ::std::os::raw::c_char,
    _Size: usize,
    _Locale: _locale_t,
  ) -> errno_t;
}
extern "C" {
  pub fn _strupr_l(
    _String: *mut ::std::os::raw::c_char,
    _Locale: _locale_t,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strxfrm(
    _Destination: *mut ::std::os::raw::c_char,
    _Source: *const ::std::os::raw::c_char,
    _MaxCount: ::std::os::raw::c_ulonglong,
  ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn _strxfrm_l(
    _Destination: *mut ::std::os::raw::c_char,
    _Source: *const ::std::os::raw::c_char,
    _MaxCount: usize,
    _Locale: _locale_t,
  ) -> usize;
}
extern "C" {
  pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strcmpi(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn stricmp(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strnicmp(
    _String1: *const ::std::os::raw::c_char,
    _String2: *const ::std::os::raw::c_char,
    _MaxCount: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn strnset(
    _String: *mut ::std::os::raw::c_char,
    _Value: ::std::os::raw::c_int,
    _MaxCount: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strset(
    _String: *mut ::std::os::raw::c_char,
    _Value: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OBJECTID {
  pub Lineage: GUID,
  pub Uniquifier: DWORD,
}
#[test]
fn bindgen_test_layout__OBJECTID() {
  const UNINIT: ::std::mem::MaybeUninit<_OBJECTID> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_OBJECTID>(),
    20usize,
    concat!("Size of: ", stringify!(_OBJECTID))
  );
  assert_eq!(
    ::std::mem::align_of::<_OBJECTID>(),
    4usize,
    concat!("Alignment of ", stringify!(_OBJECTID))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Lineage) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_OBJECTID),
      "::",
      stringify!(Lineage)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Uniquifier) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_OBJECTID),
      "::",
      stringify!(Uniquifier)
    )
  );
}
pub type OBJECTID = _OBJECTID;
pub const _EXCEPTION_DISPOSITION_ExceptionContinueExecution: _EXCEPTION_DISPOSITION = 0;
pub const _EXCEPTION_DISPOSITION_ExceptionContinueSearch: _EXCEPTION_DISPOSITION = 1;
pub const _EXCEPTION_DISPOSITION_ExceptionNestedException: _EXCEPTION_DISPOSITION = 2;
pub const _EXCEPTION_DISPOSITION_ExceptionCollidedUnwind: _EXCEPTION_DISPOSITION = 3;
pub type _EXCEPTION_DISPOSITION = ::std::os::raw::c_int;
use winapi::shared::ntdef::FLOAT128;
use winapi::shared::ntdef::GROUP_AFFINITY;
use winapi::shared::ntdef::LIST_ENTRY;
use winapi::shared::ntdef::LIST_ENTRY32;
use winapi::shared::ntdef::PROCESSOR_NUMBER;
use winapi::shared::ntdef::SINGLE_LIST_ENTRY;
use winapi::um::winnt::LARGE_INTEGER;
use winapi::um::winnt::LUID;
use winapi::um::winnt::ULARGE_INTEGER;

pub use self::_EXCEPTION_DISPOSITION as EXCEPTION_DISPOSITION;
extern "C" {
  pub fn __C_specific_handler(
    ExceptionRecord: *mut _EXCEPTION_RECORD,
    EstablisherFrame: *mut ::std::os::raw::c_void,
    ContextRecord: *mut _CONTEXT,
    DispatcherContext: *mut _DISPATCHER_CONTEXT,
  ) -> EXCEPTION_DISPOSITION;
}
extern "C" {
  pub fn _exception_code() -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn _exception_info() -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn _abnormal_termination() -> ::std::os::raw::c_int;
}
pub type PEXCEPTION_ROUTINE = ::std::option::Option<
  unsafe extern "C" fn(
    arg1: *mut _EXCEPTION_RECORD,
    arg2: PVOID,
    arg3: *mut _CONTEXT,
    arg4: PVOID,
  ) -> EXCEPTION_DISPOSITION,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _bindgen_ty_1 {
  pub x: ::std::os::raw::c_char,
  pub test: LARGE_INTEGER,
}
#[test]
fn bindgen_test_layout__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_bindgen_ty_1>(),
    16usize,
    concat!("Size of: ", stringify!(_bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_bindgen_ty_1>(),
    8usize,
    concat!("Alignment of ", stringify!(_bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_bindgen_ty_1),
      "::",
      stringify!(x)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).test) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_bindgen_ty_1),
      "::",
      stringify!(test)
    )
  );
}
pub type __C_ASSERT__ = [::std::os::raw::c_char; 1usize];
pub type KSPIN_LOCK = ULONG_PTR;
pub type PKSPIN_LOCK = *mut KSPIN_LOCK;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _M128A {
  pub Low: ULONGLONG,
  pub High: LONGLONG,
}
#[test]
fn bindgen_test_layout__M128A() {
  const UNINIT: ::std::mem::MaybeUninit<_M128A> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_M128A>(),
    16usize,
    concat!("Size of: ", stringify!(_M128A))
  );
  assert_eq!(
    ::std::mem::align_of::<_M128A>(),
    16usize,
    concat!("Alignment of ", stringify!(_M128A))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Low) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_M128A),
      "::",
      stringify!(Low)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).High) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_M128A),
      "::",
      stringify!(High)
    )
  );
}
pub type M128A = _M128A;
pub type PM128A = *mut _M128A;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _XSAVE_FORMAT {
  pub ControlWord: WORD,
  pub StatusWord: WORD,
  pub TagWord: BYTE,
  pub Reserved1: BYTE,
  pub ErrorOpcode: WORD,
  pub ErrorOffset: DWORD,
  pub ErrorSelector: WORD,
  pub Reserved2: WORD,
  pub DataOffset: DWORD,
  pub DataSelector: WORD,
  pub Reserved3: WORD,
  pub MxCsr: DWORD,
  pub MxCsr_Mask: DWORD,
  pub FloatRegisters: [M128A; 8usize],
  pub XmmRegisters: [M128A; 16usize],
  pub Reserved4: [BYTE; 96usize],
}
#[test]
fn bindgen_test_layout__XSAVE_FORMAT() {
  const UNINIT: ::std::mem::MaybeUninit<_XSAVE_FORMAT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_XSAVE_FORMAT>(),
    512usize,
    concat!("Size of: ", stringify!(_XSAVE_FORMAT))
  );
  assert_eq!(
    ::std::mem::align_of::<_XSAVE_FORMAT>(),
    16usize,
    concat!("Alignment of ", stringify!(_XSAVE_FORMAT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlWord) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(ControlWord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StatusWord) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(StatusWord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TagWord) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(TagWord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
    5usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ErrorOpcode) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(ErrorOpcode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ErrorOffset) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(ErrorOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ErrorSelector) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(ErrorSelector)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataOffset) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(DataOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataSelector) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(DataSelector)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize },
    22usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(Reserved3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MxCsr) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(MxCsr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MxCsr_Mask) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(MxCsr_Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FloatRegisters) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(FloatRegisters)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).XmmRegisters) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(XmmRegisters)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved4) as usize - ptr as usize },
    416usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_FORMAT),
      "::",
      stringify!(Reserved4)
    )
  );
}
pub type XSAVE_FORMAT = _XSAVE_FORMAT;
pub type PXSAVE_FORMAT = *mut _XSAVE_FORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XSAVE_CET_U_FORMAT {
  pub Ia32CetUMsr: DWORD64,
  pub Ia32Pl3SspMsr: DWORD64,
}
#[test]
fn bindgen_test_layout__XSAVE_CET_U_FORMAT() {
  const UNINIT: ::std::mem::MaybeUninit<_XSAVE_CET_U_FORMAT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_XSAVE_CET_U_FORMAT>(),
    16usize,
    concat!("Size of: ", stringify!(_XSAVE_CET_U_FORMAT))
  );
  assert_eq!(
    ::std::mem::align_of::<_XSAVE_CET_U_FORMAT>(),
    8usize,
    concat!("Alignment of ", stringify!(_XSAVE_CET_U_FORMAT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ia32CetUMsr) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_CET_U_FORMAT),
      "::",
      stringify!(Ia32CetUMsr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ia32Pl3SspMsr) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_CET_U_FORMAT),
      "::",
      stringify!(Ia32Pl3SspMsr)
    )
  );
}
pub type XSAVE_CET_U_FORMAT = _XSAVE_CET_U_FORMAT;
pub type PXSAVE_CET_U_FORMAT = *mut _XSAVE_CET_U_FORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XSAVE_AREA_HEADER {
  pub Mask: DWORD64,
  pub CompactionMask: DWORD64,
  pub Reserved2: [DWORD64; 6usize],
}
#[test]
fn bindgen_test_layout__XSAVE_AREA_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_XSAVE_AREA_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_XSAVE_AREA_HEADER>(),
    64usize,
    concat!("Size of: ", stringify!(_XSAVE_AREA_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_XSAVE_AREA_HEADER>(),
    8usize,
    concat!("Alignment of ", stringify!(_XSAVE_AREA_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_AREA_HEADER),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CompactionMask) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_AREA_HEADER),
      "::",
      stringify!(CompactionMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_AREA_HEADER),
      "::",
      stringify!(Reserved2)
    )
  );
}
pub type XSAVE_AREA_HEADER = _XSAVE_AREA_HEADER;
pub type PXSAVE_AREA_HEADER = *mut _XSAVE_AREA_HEADER;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _XSAVE_AREA {
  pub LegacyState: XSAVE_FORMAT,
  pub Header: XSAVE_AREA_HEADER,
}
#[test]
fn bindgen_test_layout__XSAVE_AREA() {
  const UNINIT: ::std::mem::MaybeUninit<_XSAVE_AREA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_XSAVE_AREA>(),
    576usize,
    concat!("Size of: ", stringify!(_XSAVE_AREA))
  );
  assert_eq!(
    ::std::mem::align_of::<_XSAVE_AREA>(),
    16usize,
    concat!("Alignment of ", stringify!(_XSAVE_AREA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LegacyState) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_AREA),
      "::",
      stringify!(LegacyState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSAVE_AREA),
      "::",
      stringify!(Header)
    )
  );
}
pub type XSAVE_AREA = _XSAVE_AREA;
pub type PXSAVE_AREA = *mut _XSAVE_AREA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XSTATE_CONTEXT {
  pub Mask: DWORD64,
  pub Length: DWORD,
  pub Reserved1: DWORD,
  pub Area: PXSAVE_AREA,
  pub Buffer: PVOID,
}
#[test]
fn bindgen_test_layout__XSTATE_CONTEXT() {
  const UNINIT: ::std::mem::MaybeUninit<_XSTATE_CONTEXT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_XSTATE_CONTEXT>(),
    32usize,
    concat!("Size of: ", stringify!(_XSTATE_CONTEXT))
  );
  assert_eq!(
    ::std::mem::align_of::<_XSTATE_CONTEXT>(),
    8usize,
    concat!("Alignment of ", stringify!(_XSTATE_CONTEXT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONTEXT),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONTEXT),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONTEXT),
      "::",
      stringify!(Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Area) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONTEXT),
      "::",
      stringify!(Area)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONTEXT),
      "::",
      stringify!(Buffer)
    )
  );
}
pub type XSTATE_CONTEXT = _XSTATE_CONTEXT;
pub type PXSTATE_CONTEXT = *mut _XSTATE_CONTEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _KERNEL_CET_CONTEXT {
  pub Ssp: DWORD64,
  pub Rip: DWORD64,
  pub SegCs: WORD,
  pub __bindgen_anon_1: _KERNEL_CET_CONTEXT__bindgen_ty_1,
  pub Fill: [WORD; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _KERNEL_CET_CONTEXT__bindgen_ty_1 {
  pub AllFlags: WORD,
  pub __bindgen_anon_1: _KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct _KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u16; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout__KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1>(),
    2usize,
    concat!(
      "Size of: ",
      stringify!(_KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn UseWrss(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_UseWrss(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn PopShadowStackOne(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_PopShadowStackOne(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Unused(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 14u8) as u16) }
  }
  #[inline]
  pub fn set_Unused(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 14u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    UseWrss: WORD,
    PopShadowStackOne: WORD,
    Unused: WORD,
  ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let UseWrss: u16 = unsafe { ::std::mem::transmute(UseWrss) };
      UseWrss as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let PopShadowStackOne: u16 = unsafe { ::std::mem::transmute(PopShadowStackOne) };
      PopShadowStackOne as u64
    });
    __bindgen_bitfield_unit.set(2usize, 14u8, {
      let Unused: u16 = unsafe { ::std::mem::transmute(Unused) };
      Unused as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__KERNEL_CET_CONTEXT__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_KERNEL_CET_CONTEXT__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KERNEL_CET_CONTEXT__bindgen_ty_1>(),
    2usize,
    concat!("Size of: ", stringify!(_KERNEL_CET_CONTEXT__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_KERNEL_CET_CONTEXT__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_KERNEL_CET_CONTEXT__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KERNEL_CET_CONTEXT__bindgen_ty_1),
      "::",
      stringify!(AllFlags)
    )
  );
}
#[test]
fn bindgen_test_layout__KERNEL_CET_CONTEXT() {
  const UNINIT: ::std::mem::MaybeUninit<_KERNEL_CET_CONTEXT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KERNEL_CET_CONTEXT>(),
    24usize,
    concat!("Size of: ", stringify!(_KERNEL_CET_CONTEXT))
  );
  assert_eq!(
    ::std::mem::align_of::<_KERNEL_CET_CONTEXT>(),
    8usize,
    concat!("Alignment of ", stringify!(_KERNEL_CET_CONTEXT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ssp) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KERNEL_CET_CONTEXT),
      "::",
      stringify!(Ssp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rip) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_KERNEL_CET_CONTEXT),
      "::",
      stringify!(Rip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegCs) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_KERNEL_CET_CONTEXT),
      "::",
      stringify!(SegCs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Fill) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_KERNEL_CET_CONTEXT),
      "::",
      stringify!(Fill)
    )
  );
}
pub type KERNEL_CET_CONTEXT = _KERNEL_CET_CONTEXT;
pub type PKERNEL_CET_CONTEXT = *mut _KERNEL_CET_CONTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_AMD64 {
  pub Count: DWORD,
  pub ScopeRecord: [_SCOPE_TABLE_AMD64__bindgen_ty_1; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_AMD64__bindgen_ty_1 {
  pub BeginAddress: DWORD,
  pub EndAddress: DWORD,
  pub HandlerAddress: DWORD,
  pub JumpTarget: DWORD,
}
#[test]
fn bindgen_test_layout__SCOPE_TABLE_AMD64__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_SCOPE_TABLE_AMD64__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SCOPE_TABLE_AMD64__bindgen_ty_1>(),
    16usize,
    concat!("Size of: ", stringify!(_SCOPE_TABLE_AMD64__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_SCOPE_TABLE_AMD64__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_SCOPE_TABLE_AMD64__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BeginAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_AMD64__bindgen_ty_1),
      "::",
      stringify!(BeginAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndAddress) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_AMD64__bindgen_ty_1),
      "::",
      stringify!(EndAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HandlerAddress) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_AMD64__bindgen_ty_1),
      "::",
      stringify!(HandlerAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JumpTarget) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_AMD64__bindgen_ty_1),
      "::",
      stringify!(JumpTarget)
    )
  );
}
#[test]
fn bindgen_test_layout__SCOPE_TABLE_AMD64() {
  const UNINIT: ::std::mem::MaybeUninit<_SCOPE_TABLE_AMD64> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SCOPE_TABLE_AMD64>(),
    20usize,
    concat!("Size of: ", stringify!(_SCOPE_TABLE_AMD64))
  );
  assert_eq!(
    ::std::mem::align_of::<_SCOPE_TABLE_AMD64>(),
    4usize,
    concat!("Alignment of ", stringify!(_SCOPE_TABLE_AMD64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_AMD64),
      "::",
      stringify!(Count)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ScopeRecord) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_AMD64),
      "::",
      stringify!(ScopeRecord)
    )
  );
}
pub type SCOPE_TABLE_AMD64 = _SCOPE_TABLE_AMD64;
pub type PSCOPE_TABLE_AMD64 = *mut _SCOPE_TABLE_AMD64;
extern "C" {
  pub fn _bittest(
    Base: *const ::std::os::raw::c_long,
    Offset: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _bittestandcomplement(
    Base: *mut ::std::os::raw::c_long,
    Offset: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _bittestandset(
    Base: *mut ::std::os::raw::c_long,
    Offset: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _bittestandreset(
    Base: *mut ::std::os::raw::c_long,
    Offset: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _interlockedbittestandset(
    Base: *mut ::std::os::raw::c_long,
    Offset: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _interlockedbittestandreset(
    Base: *mut ::std::os::raw::c_long,
    Offset: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _bittest64(
    Base: *const ::std::os::raw::c_longlong,
    Offset: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _bittestandcomplement64(
    Base: *mut ::std::os::raw::c_longlong,
    Offset: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _bittestandset64(
    Base: *mut ::std::os::raw::c_longlong,
    Offset: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _bittestandreset64(
    Base: *mut ::std::os::raw::c_longlong,
    Offset: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _interlockedbittestandset64(
    Base: *mut ::std::os::raw::c_longlong,
    Offset: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _interlockedbittestandreset64(
    Base: *mut ::std::os::raw::c_longlong,
    Offset: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _BitScanForward(
    Index: *mut ::std::os::raw::c_ulong,
    Mask: ::std::os::raw::c_ulong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _BitScanReverse(
    Index: *mut ::std::os::raw::c_ulong,
    Mask: ::std::os::raw::c_ulong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _BitScanForward64(
    Index: *mut ::std::os::raw::c_ulong,
    Mask: ::std::os::raw::c_ulonglong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _BitScanReverse64(
    Index: *mut ::std::os::raw::c_ulong,
    Mask: ::std::os::raw::c_ulonglong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _InterlockedIncrement16(Addend: *mut ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
  pub fn _InterlockedDecrement16(Addend: *mut ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
  pub fn _InterlockedCompareExchange16(
    Destination: *mut ::std::os::raw::c_short,
    ExChange: ::std::os::raw::c_short,
    Comperand: ::std::os::raw::c_short,
  ) -> ::std::os::raw::c_short;
}
extern "C" {
  pub fn _InterlockedAnd(
    Destination: *mut ::std::os::raw::c_long,
    Value: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn _InterlockedOr(
    Destination: *mut ::std::os::raw::c_long,
    Value: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn _InterlockedXor(
    Destination: *mut ::std::os::raw::c_long,
    Value: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn _InterlockedAnd64(
    Destination: *mut ::std::os::raw::c_longlong,
    Value: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn _InterlockedOr64(
    Destination: *mut ::std::os::raw::c_longlong,
    Value: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn _InterlockedXor64(
    Destination: *mut ::std::os::raw::c_longlong,
    Value: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn _InterlockedIncrement(Addend: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn _InterlockedDecrement(Addend: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn _InterlockedExchange(
    Target: *mut ::std::os::raw::c_long,
    Value: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn _InterlockedExchangeAdd(
    Addend: *mut ::std::os::raw::c_long,
    Value: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn _InterlockedCompareExchange(
    Destination: *mut ::std::os::raw::c_long,
    ExChange: ::std::os::raw::c_long,
    Comperand: ::std::os::raw::c_long,
  ) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn _InterlockedIncrement64(
    Addend: *mut ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn _InterlockedDecrement64(
    Addend: *mut ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn _InterlockedExchange64(
    Target: *mut ::std::os::raw::c_longlong,
    Value: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn _InterlockedExchangeAdd64(
    Addend: *mut ::std::os::raw::c_longlong,
    Value: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn _InterlockedCompareExchange64(
    Destination: *mut ::std::os::raw::c_longlong,
    ExChange: ::std::os::raw::c_longlong,
    Comperand: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn _InterlockedCompareExchange128(
    Destination: *mut ::std::os::raw::c_longlong,
    ExchangeHigh: ::std::os::raw::c_longlong,
    ExchangeLow: ::std::os::raw::c_longlong,
    ComparandResult: *mut ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn _InterlockedCompareExchangePointer(
    Destination: *mut *mut ::std::os::raw::c_void,
    Exchange: *mut ::std::os::raw::c_void,
    Comperand: *mut ::std::os::raw::c_void,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn _InterlockedExchangePointer(
    Target: *mut *mut ::std::os::raw::c_void,
    Value: *mut ::std::os::raw::c_void,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn _InterlockedExchange8(
    Target: *mut ::std::os::raw::c_char,
    Value: ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_char;
}
extern "C" {
  pub fn _InterlockedExchange16(
    Destination: *mut ::std::os::raw::c_short,
    ExChange: ::std::os::raw::c_short,
  ) -> ::std::os::raw::c_short;
}
extern "C" {
  pub fn _InterlockedExchangeAdd8(
    _Addend: *mut ::std::os::raw::c_char,
    _Value: ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_char;
}
extern "C" {
  pub fn _InterlockedAnd8(
    Destination: *mut ::std::os::raw::c_char,
    Value: ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_char;
}
extern "C" {
  pub fn _InterlockedOr8(
    Destination: *mut ::std::os::raw::c_char,
    Value: ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_char;
}
extern "C" {
  pub fn _InterlockedXor8(
    Destination: *mut ::std::os::raw::c_char,
    Value: ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_char;
}
extern "C" {
  pub fn _InterlockedAnd16(
    Destination: *mut ::std::os::raw::c_short,
    Value: ::std::os::raw::c_short,
  ) -> ::std::os::raw::c_short;
}
extern "C" {
  pub fn _InterlockedOr16(
    Destination: *mut ::std::os::raw::c_short,
    Value: ::std::os::raw::c_short,
  ) -> ::std::os::raw::c_short;
}
extern "C" {
  pub fn _InterlockedXor16(
    Destination: *mut ::std::os::raw::c_short,
    Value: ::std::os::raw::c_short,
  ) -> ::std::os::raw::c_short;
}
extern "C" {
  pub fn __cpuidex(
    CPUInfo: *mut ::std::os::raw::c_int,
    Function: ::std::os::raw::c_int,
    SubLeaf: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn _mm_clflush(Address: *const ::std::os::raw::c_void);
}
extern "C" {
  pub fn _ReadWriteBarrier();
}
extern "C" {
  pub fn __faststorefence();
}
extern "C" {
  pub fn _mm_lfence();
}
extern "C" {
  pub fn _mm_mfence();
}
extern "C" {
  pub fn _mm_sfence();
}
extern "C" {
  pub fn _mm_pause();
}
extern "C" {
  pub fn _mm_prefetch(a: *const ::std::os::raw::c_char, sel: ::std::os::raw::c_int);
}
extern "C" {
  pub fn _m_prefetchw(Source: *const ::std::os::raw::c_void);
}
extern "C" {
  pub fn _mm_getcsr() -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn _mm_setcsr(MxCsr: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn __getcallerseflags() -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn __segmentlimit(Selector: DWORD) -> DWORD;
}
extern "C" {
  pub fn __readpmc(Counter: DWORD) -> DWORD64;
}
extern "C" {
  pub fn __rdtsc() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn __movsb(Destination: PBYTE, Source: *const BYTE, Count: SIZE_T);
}
extern "C" {
  pub fn __movsw(Destination: PWORD, Source: *const WORD, Count: SIZE_T);
}
extern "C" {
  pub fn __movsd(Destination: PDWORD, Source: *const DWORD, Count: SIZE_T);
}
extern "C" {
  pub fn __movsq(Destination: PDWORD64, Source: *const DWORD64, Count: SIZE_T);
}
extern "C" {
  pub fn __stosb(
    Destination: *mut ::std::os::raw::c_uchar,
    Value: ::std::os::raw::c_uchar,
    Count: ::std::os::raw::c_ulonglong,
  );
}
extern "C" {
  pub fn __stosw(Destination: PWORD, Value: WORD, Count: SIZE_T);
}
extern "C" {
  pub fn __stosd(Destination: PDWORD, Value: DWORD, Count: SIZE_T);
}
extern "C" {
  pub fn __stosq(Destination: PDWORD64, Value: DWORD64, Count: SIZE_T);
}
extern "C" {
  pub fn __mulh(
    Multiplier: ::std::os::raw::c_longlong,
    Multiplicand: ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn __umulh(
    Multiplier: ::std::os::raw::c_ulonglong,
    Multiplicand: ::std::os::raw::c_ulonglong,
  ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn __popcnt64(operand: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn __shiftleft128(
    LowPart: ::std::os::raw::c_ulonglong,
    HighPart: ::std::os::raw::c_ulonglong,
    Shift: ::std::os::raw::c_uchar,
  ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn __shiftright128(
    LowPart: ::std::os::raw::c_ulonglong,
    HighPart: ::std::os::raw::c_ulonglong,
    Shift: ::std::os::raw::c_uchar,
  ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn _mul128(
    Multiplier: ::std::os::raw::c_longlong,
    Multiplicand: ::std::os::raw::c_longlong,
    HighProduct: *mut ::std::os::raw::c_longlong,
  ) -> ::std::os::raw::c_longlong;
}
extern "C" {
  pub fn UnsignedMultiply128(
    Multiplier: DWORD64,
    Multiplicand: DWORD64,
    HighProduct: *mut DWORD64,
  ) -> DWORD64;
}
extern "C" {
  pub fn _umul128(
    Multiplier: ::std::os::raw::c_ulonglong,
    Multiplicand: ::std::os::raw::c_ulonglong,
    HighProduct: *mut ::std::os::raw::c_ulonglong,
  ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn __readgsbyte(Offset: ::std::os::raw::c_ulong) -> ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn __readgsword(Offset: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ushort;
}
extern "C" {
  pub fn __readgsdword(Offset: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn __readgsqword(Offset: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
  pub fn __writegsbyte(Offset: DWORD, Data: BYTE);
}
extern "C" {
  pub fn __writegsword(Offset: DWORD, Data: WORD);
}
extern "C" {
  pub fn __writegsdword(Offset: DWORD, Data: DWORD);
}
extern "C" {
  pub fn __writegsqword(Offset: DWORD, Data: DWORD64);
}
extern "C" {
  pub fn __incgsbyte(Offset: DWORD);
}
extern "C" {
  pub fn __addgsbyte(Offset: DWORD, Value: BYTE);
}
extern "C" {
  pub fn __incgsword(Offset: DWORD);
}
extern "C" {
  pub fn __addgsword(Offset: DWORD, Value: WORD);
}
extern "C" {
  pub fn __incgsdword(Offset: DWORD);
}
extern "C" {
  pub fn __addgsdword(Offset: DWORD, Value: DWORD);
}
extern "C" {
  pub fn __incgsqword(Offset: DWORD);
}
extern "C" {
  pub fn __addgsqword(Offset: DWORD, Value: DWORD64);
}
pub type XMM_SAVE_AREA32 = XSAVE_FORMAT;
pub type PXMM_SAVE_AREA32 = *mut XSAVE_FORMAT;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _CONTEXT {
  pub P1Home: DWORD64,
  pub P2Home: DWORD64,
  pub P3Home: DWORD64,
  pub P4Home: DWORD64,
  pub P5Home: DWORD64,
  pub P6Home: DWORD64,
  pub ContextFlags: DWORD,
  pub MxCsr: DWORD,
  pub SegCs: WORD,
  pub SegDs: WORD,
  pub SegEs: WORD,
  pub SegFs: WORD,
  pub SegGs: WORD,
  pub SegSs: WORD,
  pub EFlags: DWORD,
  pub Dr0: DWORD64,
  pub Dr1: DWORD64,
  pub Dr2: DWORD64,
  pub Dr3: DWORD64,
  pub Dr6: DWORD64,
  pub Dr7: DWORD64,
  pub Rax: DWORD64,
  pub Rcx: DWORD64,
  pub Rdx: DWORD64,
  pub Rbx: DWORD64,
  pub Rsp: DWORD64,
  pub Rbp: DWORD64,
  pub Rsi: DWORD64,
  pub Rdi: DWORD64,
  pub R8: DWORD64,
  pub R9: DWORD64,
  pub R10: DWORD64,
  pub R11: DWORD64,
  pub R12: DWORD64,
  pub R13: DWORD64,
  pub R14: DWORD64,
  pub R15: DWORD64,
  pub Rip: DWORD64,
  pub __bindgen_anon_1: _CONTEXT__bindgen_ty_1,
  pub VectorRegister: [M128A; 26usize],
  pub VectorControl: DWORD64,
  pub DebugControl: DWORD64,
  pub LastBranchToRip: DWORD64,
  pub LastBranchFromRip: DWORD64,
  pub LastExceptionToRip: DWORD64,
  pub LastExceptionFromRip: DWORD64,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _CONTEXT__bindgen_ty_1 {
  pub FltSave: XMM_SAVE_AREA32,
  pub __bindgen_anon_1: _CONTEXT__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _CONTEXT__bindgen_ty_1__bindgen_ty_1 {
  pub Header: [M128A; 2usize],
  pub Legacy: [M128A; 8usize],
  pub Xmm0: M128A,
  pub Xmm1: M128A,
  pub Xmm2: M128A,
  pub Xmm3: M128A,
  pub Xmm4: M128A,
  pub Xmm5: M128A,
  pub Xmm6: M128A,
  pub Xmm7: M128A,
  pub Xmm8: M128A,
  pub Xmm9: M128A,
  pub Xmm10: M128A,
  pub Xmm11: M128A,
  pub Xmm12: M128A,
  pub Xmm13: M128A,
  pub Xmm14: M128A,
  pub Xmm15: M128A,
}
#[test]
fn bindgen_test_layout__CONTEXT__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_CONTEXT__bindgen_ty_1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CONTEXT__bindgen_ty_1__bindgen_ty_1>(),
    416usize,
    concat!(
      "Size of: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_CONTEXT__bindgen_ty_1__bindgen_ty_1>(),
    16usize,
    concat!(
      "Alignment of ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Legacy) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Legacy)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm0) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm1) as usize - ptr as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm2) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm3) as usize - ptr as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm4) as usize - ptr as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm5) as usize - ptr as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm5)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm6) as usize - ptr as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm6)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm7) as usize - ptr as usize },
    272usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm7)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm8) as usize - ptr as usize },
    288usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm8)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm9) as usize - ptr as usize },
    304usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm9)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm10) as usize - ptr as usize },
    320usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm10)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm11) as usize - ptr as usize },
    336usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm11)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm12) as usize - ptr as usize },
    352usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm12)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm13) as usize - ptr as usize },
    368usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm13)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm14) as usize - ptr as usize },
    384usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm14)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm15) as usize - ptr as usize },
    400usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm15)
    )
  );
}
#[test]
fn bindgen_test_layout__CONTEXT__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_CONTEXT__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CONTEXT__bindgen_ty_1>(),
    512usize,
    concat!("Size of: ", stringify!(_CONTEXT__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_CONTEXT__bindgen_ty_1>(),
    16usize,
    concat!("Alignment of ", stringify!(_CONTEXT__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FltSave) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT__bindgen_ty_1),
      "::",
      stringify!(FltSave)
    )
  );
}
#[test]
fn bindgen_test_layout__CONTEXT() {
  const UNINIT: ::std::mem::MaybeUninit<_CONTEXT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CONTEXT>(),
    1232usize,
    concat!("Size of: ", stringify!(_CONTEXT))
  );
  assert_eq!(
    ::std::mem::align_of::<_CONTEXT>(),
    16usize,
    concat!("Alignment of ", stringify!(_CONTEXT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).P1Home) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(P1Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).P2Home) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(P2Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).P3Home) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(P3Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).P4Home) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(P4Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).P5Home) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(P5Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).P6Home) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(P6Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ContextFlags) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(ContextFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MxCsr) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(MxCsr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegCs) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(SegCs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegDs) as usize - ptr as usize },
    58usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(SegDs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegEs) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(SegEs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegFs) as usize - ptr as usize },
    62usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(SegFs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegGs) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(SegGs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegSs) as usize - ptr as usize },
    66usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(SegSs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EFlags) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(EFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr0) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Dr0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr1) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Dr1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr2) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Dr2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr3) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Dr3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr6) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Dr6)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr7) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Dr7)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rax) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Rax)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rcx) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Rcx)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rdx) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Rdx)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rbx) as usize - ptr as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Rbx)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rsp) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Rsp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rbp) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Rbp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rsi) as usize - ptr as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Rsi)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rdi) as usize - ptr as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Rdi)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R8) as usize - ptr as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(R8)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R9) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(R9)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R10) as usize - ptr as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(R10)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R11) as usize - ptr as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(R11)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R12) as usize - ptr as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(R12)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R13) as usize - ptr as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(R13)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R14) as usize - ptr as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(R14)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R15) as usize - ptr as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(R15)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rip) as usize - ptr as usize },
    248usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(Rip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VectorRegister) as usize - ptr as usize },
    768usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(VectorRegister)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VectorControl) as usize - ptr as usize },
    1184usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(VectorControl)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DebugControl) as usize - ptr as usize },
    1192usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(DebugControl)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastBranchToRip) as usize - ptr as usize },
    1200usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(LastBranchToRip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastBranchFromRip) as usize - ptr as usize },
    1208usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(LastBranchFromRip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastExceptionToRip) as usize - ptr as usize },
    1216usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(LastExceptionToRip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastExceptionFromRip) as usize - ptr as usize },
    1224usize,
    concat!(
      "Offset of field: ",
      stringify!(_CONTEXT),
      "::",
      stringify!(LastExceptionFromRip)
    )
  );
}
pub type CONTEXT = _CONTEXT;
pub type PCONTEXT = *mut _CONTEXT;
pub type RUNTIME_FUNCTION = _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type PRUNTIME_FUNCTION = *mut _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type SCOPE_TABLE = SCOPE_TABLE_AMD64;
pub type PSCOPE_TABLE = *mut SCOPE_TABLE_AMD64;
pub type GET_RUNTIME_FUNCTION_CALLBACK = ::std::option::Option<
  unsafe extern "C" fn(ControlPc: DWORD64, Context: PVOID) -> PRUNTIME_FUNCTION,
>;
pub type PGET_RUNTIME_FUNCTION_CALLBACK = GET_RUNTIME_FUNCTION_CALLBACK;
pub type OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = ::std::option::Option<
  unsafe extern "C" fn(
    Process: HANDLE,
    TableAddress: PVOID,
    Entries: PDWORD,
    Functions: *mut PRUNTIME_FUNCTION,
  ) -> DWORD,
>;
pub type POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_CONTEXT {
  pub ControlPc: DWORD64,
  pub ImageBase: DWORD64,
  pub FunctionEntry: PRUNTIME_FUNCTION,
  pub EstablisherFrame: DWORD64,
  pub TargetIp: DWORD64,
  pub ContextRecord: PCONTEXT,
  pub LanguageHandler: PEXCEPTION_ROUTINE,
  pub HandlerData: PVOID,
  pub HistoryTable: *mut _UNWIND_HISTORY_TABLE,
  pub ScopeIndex: DWORD,
  pub Fill0: DWORD,
}
#[test]
fn bindgen_test_layout__DISPATCHER_CONTEXT() {
  const UNINIT: ::std::mem::MaybeUninit<_DISPATCHER_CONTEXT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DISPATCHER_CONTEXT>(),
    80usize,
    concat!("Size of: ", stringify!(_DISPATCHER_CONTEXT))
  );
  assert_eq!(
    ::std::mem::align_of::<_DISPATCHER_CONTEXT>(),
    8usize,
    concat!("Alignment of ", stringify!(_DISPATCHER_CONTEXT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlPc) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(ControlPc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageBase) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(ImageBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FunctionEntry) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(FunctionEntry)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EstablisherFrame) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(EstablisherFrame)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetIp) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(TargetIp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ContextRecord) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(ContextRecord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LanguageHandler) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(LanguageHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HandlerData) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(HandlerData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HistoryTable) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(HistoryTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ScopeIndex) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(ScopeIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Fill0) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT),
      "::",
      stringify!(Fill0)
    )
  );
}
pub type DISPATCHER_CONTEXT = _DISPATCHER_CONTEXT;
pub type PDISPATCHER_CONTEXT = *mut _DISPATCHER_CONTEXT;
pub type PEXCEPTION_FILTER = ::std::option::Option<
  unsafe extern "C" fn(
    ExceptionPointers: *mut _EXCEPTION_POINTERS,
    EstablisherFrame: PVOID,
  ) -> LONG,
>;
pub type PTERMINATION_HANDLER = ::std::option::Option<
  unsafe extern "C" fn(_abnormal_termination: BOOLEAN, EstablisherFrame: PVOID),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _KNONVOLATILE_CONTEXT_POINTERS {
  pub __bindgen_anon_1: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1,
  pub __bindgen_anon_2: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1 {
  pub FloatingContext: [PM128A; 16usize],
  pub __bindgen_anon_1: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1 {
  pub Xmm0: PM128A,
  pub Xmm1: PM128A,
  pub Xmm2: PM128A,
  pub Xmm3: PM128A,
  pub Xmm4: PM128A,
  pub Xmm5: PM128A,
  pub Xmm6: PM128A,
  pub Xmm7: PM128A,
  pub Xmm8: PM128A,
  pub Xmm9: PM128A,
  pub Xmm10: PM128A,
  pub Xmm11: PM128A,
  pub Xmm12: PM128A,
  pub Xmm13: PM128A,
  pub Xmm14: PM128A,
  pub Xmm15: PM128A,
}
#[test]
fn bindgen_test_layout__KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1>(),
    128usize,
    concat!(
      "Size of: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm0) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm1) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm2) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm3) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm4) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm5) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm5)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm6) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm6)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm7) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm7)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm8) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm8)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm9) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm9)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm10) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm10)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm11) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm11)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm12) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm12)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm13) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm13)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm14) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm14)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Xmm15) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Xmm15)
    )
  );
}
#[test]
fn bindgen_test_layout__KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1>(),
    128usize,
    concat!(
      "Size of: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FloatingContext) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1),
      "::",
      stringify!(FloatingContext)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2 {
  pub IntegerContext: [PDWORD64; 16usize],
  pub __bindgen_anon_1: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1 {
  pub Rax: PDWORD64,
  pub Rcx: PDWORD64,
  pub Rdx: PDWORD64,
  pub Rbx: PDWORD64,
  pub Rsp: PDWORD64,
  pub Rbp: PDWORD64,
  pub Rsi: PDWORD64,
  pub Rdi: PDWORD64,
  pub R8: PDWORD64,
  pub R9: PDWORD64,
  pub R10: PDWORD64,
  pub R11: PDWORD64,
  pub R12: PDWORD64,
  pub R13: PDWORD64,
  pub R14: PDWORD64,
  pub R15: PDWORD64,
}
#[test]
fn bindgen_test_layout__KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1>(),
    128usize,
    concat!(
      "Size of: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rax) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(Rax)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rcx) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(Rcx)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rdx) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(Rdx)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rbx) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(Rbx)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rsp) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(Rsp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rbp) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(Rbp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rsi) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(Rsi)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rdi) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(Rdi)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R8) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(R8)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R9) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(R9)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R10) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(R10)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R11) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(R11)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R12) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(R12)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R13) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(R13)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R14) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(R14)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R15) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(R15)
    )
  );
}
#[test]
fn bindgen_test_layout__KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2>(),
    128usize,
    concat!(
      "Size of: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IntegerContext) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2),
      "::",
      stringify!(IntegerContext)
    )
  );
}
#[test]
fn bindgen_test_layout__KNONVOLATILE_CONTEXT_POINTERS() {
  assert_eq!(
    ::std::mem::size_of::<_KNONVOLATILE_CONTEXT_POINTERS>(),
    256usize,
    concat!("Size of: ", stringify!(_KNONVOLATILE_CONTEXT_POINTERS))
  );
  assert_eq!(
    ::std::mem::align_of::<_KNONVOLATILE_CONTEXT_POINTERS>(),
    8usize,
    concat!("Alignment of ", stringify!(_KNONVOLATILE_CONTEXT_POINTERS))
  );
}
pub type KNONVOLATILE_CONTEXT_POINTERS = _KNONVOLATILE_CONTEXT_POINTERS;
pub type PKNONVOLATILE_CONTEXT_POINTERS = *mut _KNONVOLATILE_CONTEXT_POINTERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_ARM {
  pub Count: DWORD,
  pub ScopeRecord: [_SCOPE_TABLE_ARM__bindgen_ty_1; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_ARM__bindgen_ty_1 {
  pub BeginAddress: DWORD,
  pub EndAddress: DWORD,
  pub HandlerAddress: DWORD,
  pub JumpTarget: DWORD,
}
#[test]
fn bindgen_test_layout__SCOPE_TABLE_ARM__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_SCOPE_TABLE_ARM__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SCOPE_TABLE_ARM__bindgen_ty_1>(),
    16usize,
    concat!("Size of: ", stringify!(_SCOPE_TABLE_ARM__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_SCOPE_TABLE_ARM__bindgen_ty_1>(),
    4usize,
    concat!("Alignment of ", stringify!(_SCOPE_TABLE_ARM__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BeginAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM__bindgen_ty_1),
      "::",
      stringify!(BeginAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndAddress) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM__bindgen_ty_1),
      "::",
      stringify!(EndAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HandlerAddress) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM__bindgen_ty_1),
      "::",
      stringify!(HandlerAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JumpTarget) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM__bindgen_ty_1),
      "::",
      stringify!(JumpTarget)
    )
  );
}
#[test]
fn bindgen_test_layout__SCOPE_TABLE_ARM() {
  const UNINIT: ::std::mem::MaybeUninit<_SCOPE_TABLE_ARM> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SCOPE_TABLE_ARM>(),
    20usize,
    concat!("Size of: ", stringify!(_SCOPE_TABLE_ARM))
  );
  assert_eq!(
    ::std::mem::align_of::<_SCOPE_TABLE_ARM>(),
    4usize,
    concat!("Alignment of ", stringify!(_SCOPE_TABLE_ARM))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM),
      "::",
      stringify!(Count)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ScopeRecord) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM),
      "::",
      stringify!(ScopeRecord)
    )
  );
}
pub type SCOPE_TABLE_ARM = _SCOPE_TABLE_ARM;
pub type PSCOPE_TABLE_ARM = *mut _SCOPE_TABLE_ARM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_ARM64 {
  pub Count: DWORD,
  pub ScopeRecord: [_SCOPE_TABLE_ARM64__bindgen_ty_1; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_ARM64__bindgen_ty_1 {
  pub BeginAddress: DWORD,
  pub EndAddress: DWORD,
  pub HandlerAddress: DWORD,
  pub JumpTarget: DWORD,
}
#[test]
fn bindgen_test_layout__SCOPE_TABLE_ARM64__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_SCOPE_TABLE_ARM64__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SCOPE_TABLE_ARM64__bindgen_ty_1>(),
    16usize,
    concat!("Size of: ", stringify!(_SCOPE_TABLE_ARM64__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_SCOPE_TABLE_ARM64__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_SCOPE_TABLE_ARM64__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BeginAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM64__bindgen_ty_1),
      "::",
      stringify!(BeginAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndAddress) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM64__bindgen_ty_1),
      "::",
      stringify!(EndAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HandlerAddress) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM64__bindgen_ty_1),
      "::",
      stringify!(HandlerAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JumpTarget) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM64__bindgen_ty_1),
      "::",
      stringify!(JumpTarget)
    )
  );
}
#[test]
fn bindgen_test_layout__SCOPE_TABLE_ARM64() {
  const UNINIT: ::std::mem::MaybeUninit<_SCOPE_TABLE_ARM64> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SCOPE_TABLE_ARM64>(),
    20usize,
    concat!("Size of: ", stringify!(_SCOPE_TABLE_ARM64))
  );
  assert_eq!(
    ::std::mem::align_of::<_SCOPE_TABLE_ARM64>(),
    4usize,
    concat!("Alignment of ", stringify!(_SCOPE_TABLE_ARM64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM64),
      "::",
      stringify!(Count)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ScopeRecord) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCOPE_TABLE_ARM64),
      "::",
      stringify!(ScopeRecord)
    )
  );
}
pub type SCOPE_TABLE_ARM64 = _SCOPE_TABLE_ARM64;
pub type PSCOPE_TABLE_ARM64 = *mut _SCOPE_TABLE_ARM64;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ARM64_NT_NEON128 {
  pub __bindgen_anon_1: _ARM64_NT_NEON128__bindgen_ty_1,
  pub D: [f64; 2usize],
  pub S: [f32; 4usize],
  pub H: [WORD; 8usize],
  pub B: [BYTE; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ARM64_NT_NEON128__bindgen_ty_1 {
  pub Low: ULONGLONG,
  pub High: LONGLONG,
}
#[test]
fn bindgen_test_layout__ARM64_NT_NEON128__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_ARM64_NT_NEON128__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ARM64_NT_NEON128__bindgen_ty_1>(),
    16usize,
    concat!("Size of: ", stringify!(_ARM64_NT_NEON128__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_ARM64_NT_NEON128__bindgen_ty_1>(),
    8usize,
    concat!("Alignment of ", stringify!(_ARM64_NT_NEON128__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Low) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_NEON128__bindgen_ty_1),
      "::",
      stringify!(Low)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).High) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_NEON128__bindgen_ty_1),
      "::",
      stringify!(High)
    )
  );
}
#[test]
fn bindgen_test_layout__ARM64_NT_NEON128() {
  const UNINIT: ::std::mem::MaybeUninit<_ARM64_NT_NEON128> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ARM64_NT_NEON128>(),
    16usize,
    concat!("Size of: ", stringify!(_ARM64_NT_NEON128))
  );
  assert_eq!(
    ::std::mem::align_of::<_ARM64_NT_NEON128>(),
    8usize,
    concat!("Alignment of ", stringify!(_ARM64_NT_NEON128))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).D) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_NEON128),
      "::",
      stringify!(D)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).S) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_NEON128),
      "::",
      stringify!(S)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).H) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_NEON128),
      "::",
      stringify!(H)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).B) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_NEON128),
      "::",
      stringify!(B)
    )
  );
}
pub type ARM64_NT_NEON128 = _ARM64_NT_NEON128;
pub type PARM64_NT_NEON128 = *mut _ARM64_NT_NEON128;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _ARM64_NT_CONTEXT {
  pub ContextFlags: DWORD,
  pub Cpsr: DWORD,
  pub __bindgen_anon_1: _ARM64_NT_CONTEXT__bindgen_ty_1,
  pub Sp: DWORD64,
  pub Pc: DWORD64,
  pub V: [ARM64_NT_NEON128; 32usize],
  pub Fpcr: DWORD,
  pub Fpsr: DWORD,
  pub Bcr: [DWORD; 8usize],
  pub Bvr: [DWORD64; 8usize],
  pub Wcr: [DWORD; 2usize],
  pub Wvr: [DWORD64; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ARM64_NT_CONTEXT__bindgen_ty_1 {
  pub __bindgen_anon_1: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
  pub X: [DWORD64; 31usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
  pub X0: DWORD64,
  pub X1: DWORD64,
  pub X2: DWORD64,
  pub X3: DWORD64,
  pub X4: DWORD64,
  pub X5: DWORD64,
  pub X6: DWORD64,
  pub X7: DWORD64,
  pub X8: DWORD64,
  pub X9: DWORD64,
  pub X10: DWORD64,
  pub X11: DWORD64,
  pub X12: DWORD64,
  pub X13: DWORD64,
  pub X14: DWORD64,
  pub X15: DWORD64,
  pub X16: DWORD64,
  pub X17: DWORD64,
  pub X18: DWORD64,
  pub X19: DWORD64,
  pub X20: DWORD64,
  pub X21: DWORD64,
  pub X22: DWORD64,
  pub X23: DWORD64,
  pub X24: DWORD64,
  pub X25: DWORD64,
  pub X26: DWORD64,
  pub X27: DWORD64,
  pub X28: DWORD64,
  pub Fp: DWORD64,
  pub Lr: DWORD64,
}
#[test]
fn bindgen_test_layout__ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1>(),
    248usize,
    concat!(
      "Size of: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X0) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X1) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X2) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X3) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X4) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X5) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X5)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X6) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X6)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X7) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X7)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X8) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X8)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X9) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X9)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X10) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X10)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X11) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X11)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X12) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X12)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X13) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X13)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X14) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X14)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X15) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X15)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X16) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X16)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X17) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X17)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X18) as usize - ptr as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X18)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X19) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X19)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X20) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X20)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X21) as usize - ptr as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X21)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X22) as usize - ptr as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X22)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X23) as usize - ptr as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X23)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X24) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X24)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X25) as usize - ptr as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X25)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X26) as usize - ptr as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X26)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X27) as usize - ptr as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X27)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X28) as usize - ptr as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X28)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Fp) as usize - ptr as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Fp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Lr) as usize - ptr as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Lr)
    )
  );
}
#[test]
fn bindgen_test_layout__ARM64_NT_CONTEXT__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_ARM64_NT_CONTEXT__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ARM64_NT_CONTEXT__bindgen_ty_1>(),
    248usize,
    concat!("Size of: ", stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_ARM64_NT_CONTEXT__bindgen_ty_1>(),
    8usize,
    concat!("Alignment of ", stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT__bindgen_ty_1),
      "::",
      stringify!(X)
    )
  );
}
#[test]
fn bindgen_test_layout__ARM64_NT_CONTEXT() {
  const UNINIT: ::std::mem::MaybeUninit<_ARM64_NT_CONTEXT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ARM64_NT_CONTEXT>(),
    912usize,
    concat!("Size of: ", stringify!(_ARM64_NT_CONTEXT))
  );
  assert_eq!(
    ::std::mem::align_of::<_ARM64_NT_CONTEXT>(),
    16usize,
    concat!("Alignment of ", stringify!(_ARM64_NT_CONTEXT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ContextFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(ContextFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Cpsr) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(Cpsr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sp) as usize - ptr as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(Sp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Pc) as usize - ptr as usize },
    264usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(Pc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).V) as usize - ptr as usize },
    272usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(V)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Fpcr) as usize - ptr as usize },
    784usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(Fpcr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Fpsr) as usize - ptr as usize },
    788usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(Fpsr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Bcr) as usize - ptr as usize },
    792usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(Bcr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Bvr) as usize - ptr as usize },
    824usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(Bvr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Wcr) as usize - ptr as usize },
    888usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(Wcr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Wvr) as usize - ptr as usize },
    896usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64_NT_CONTEXT),
      "::",
      stringify!(Wvr)
    )
  );
}
pub type ARM64_NT_CONTEXT = _ARM64_NT_CONTEXT;
pub type PARM64_NT_CONTEXT = *mut _ARM64_NT_CONTEXT;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _ARM64EC_NT_CONTEXT {
  pub __bindgen_anon_1: _ARM64EC_NT_CONTEXT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ARM64EC_NT_CONTEXT__bindgen_ty_1 {
  pub __bindgen_anon_1: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
  pub AMD64_P1Home: DWORD64,
  pub AMD64_P2Home: DWORD64,
  pub AMD64_P3Home: DWORD64,
  pub AMD64_P4Home: DWORD64,
  pub AMD64_P5Home: DWORD64,
  pub AMD64_P6Home: DWORD64,
  pub ContextFlags: DWORD,
  pub AMD64_MxCsr_copy: DWORD,
  pub AMD64_SegCs: WORD,
  pub AMD64_SegDs: WORD,
  pub AMD64_SegEs: WORD,
  pub AMD64_SegFs: WORD,
  pub AMD64_SegGs: WORD,
  pub AMD64_SegSs: WORD,
  pub AMD64_EFlags: DWORD,
  pub AMD64_Dr0: DWORD64,
  pub AMD64_Dr1: DWORD64,
  pub AMD64_Dr2: DWORD64,
  pub AMD64_Dr3: DWORD64,
  pub AMD64_Dr6: DWORD64,
  pub AMD64_Dr7: DWORD64,
  pub X8: DWORD64,
  pub X0: DWORD64,
  pub X1: DWORD64,
  pub X27: DWORD64,
  pub Sp: DWORD64,
  pub Fp: DWORD64,
  pub X25: DWORD64,
  pub X26: DWORD64,
  pub X2: DWORD64,
  pub X3: DWORD64,
  pub X4: DWORD64,
  pub X5: DWORD64,
  pub X19: DWORD64,
  pub X20: DWORD64,
  pub X21: DWORD64,
  pub X22: DWORD64,
  pub Pc: DWORD64,
  pub __bindgen_anon_1: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
  pub AMD64_VectorRegister: [ARM64_NT_NEON128; 26usize],
  pub AMD64_VectorControl: DWORD64,
  pub AMD64_DebugControl: DWORD64,
  pub AMD64_LastBranchToRip: DWORD64,
  pub AMD64_LastBranchFromRip: DWORD64,
  pub AMD64_LastExceptionToRip: DWORD64,
  pub AMD64_LastExceptionFromRip: DWORD64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
  pub AMD64_ControlWord: WORD,
  pub AMD64_StatusWord: WORD,
  pub AMD64_TagWord: BYTE,
  pub AMD64_Reserved1: BYTE,
  pub AMD64_ErrorOpcode: WORD,
  pub AMD64_ErrorOffset: DWORD,
  pub AMD64_ErrorSelector: WORD,
  pub AMD64_Reserved2: WORD,
  pub AMD64_DataOffset: DWORD,
  pub AMD64_DataSelector: WORD,
  pub AMD64_Reserved3: WORD,
  pub AMD64_MxCsr: DWORD,
  pub AMD64_MxCsr_Mask: DWORD,
  pub Lr: DWORD64,
  pub X16_0: WORD,
  pub AMD64_St0_Reserved1: WORD,
  pub AMD64_St0_Reserved2: DWORD,
  pub X6: DWORD64,
  pub X16_1: WORD,
  pub AMD64_St1_Reserved1: WORD,
  pub AMD64_St1_Reserved2: DWORD,
  pub X7: DWORD64,
  pub X16_2: WORD,
  pub AMD64_St2_Reserved1: WORD,
  pub AMD64_St2_Reserved2: DWORD,
  pub X9: DWORD64,
  pub X16_3: WORD,
  pub AMD64_St3_Reserved1: WORD,
  pub AMD64_St3_Reserved2: DWORD,
  pub X10: DWORD64,
  pub X17_0: WORD,
  pub AMD64_St4_Reserved1: WORD,
  pub AMD64_St4_Reserved2: DWORD,
  pub X11: DWORD64,
  pub X17_1: WORD,
  pub AMD64_St5_Reserved1: WORD,
  pub AMD64_St5_Reserved2: DWORD,
  pub X12: DWORD64,
  pub X17_2: WORD,
  pub AMD64_St6_Reserved1: WORD,
  pub AMD64_St6_Reserved2: DWORD,
  pub X15: DWORD64,
  pub X17_3: WORD,
  pub AMD64_St7_Reserved1: WORD,
  pub AMD64_St7_Reserved2: DWORD,
  pub V: [ARM64_NT_NEON128; 16usize],
  pub AMD64_XSAVE_FORMAT_Reserved4: [BYTE; 96usize],
}
#[test]
fn bindgen_test_layout__ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
    512usize,
    concat!(
      "Size of: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_ControlWord) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_ControlWord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_StatusWord) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_StatusWord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_TagWord) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_TagWord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_Reserved1) as usize - ptr as usize },
    5usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_ErrorOpcode) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_ErrorOpcode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_ErrorOffset) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_ErrorOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_ErrorSelector) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_ErrorSelector)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_Reserved2) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_DataOffset) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_DataOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_DataSelector) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_DataSelector)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_Reserved3) as usize - ptr as usize },
    22usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_Reserved3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_MxCsr) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_MxCsr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_MxCsr_Mask) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_MxCsr_Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Lr) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Lr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X16_0) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X16_0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St0_Reserved1) as usize - ptr as usize },
    42usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St0_Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St0_Reserved2) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St0_Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X6) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X6)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X16_1) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X16_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St1_Reserved1) as usize - ptr as usize },
    58usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St1_Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St1_Reserved2) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St1_Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X7) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X7)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X16_2) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X16_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St2_Reserved1) as usize - ptr as usize },
    74usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St2_Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St2_Reserved2) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St2_Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X9) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X9)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X16_3) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X16_3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St3_Reserved1) as usize - ptr as usize },
    90usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St3_Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St3_Reserved2) as usize - ptr as usize },
    92usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St3_Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X10) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X10)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X17_0) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X17_0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St4_Reserved1) as usize - ptr as usize },
    106usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St4_Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St4_Reserved2) as usize - ptr as usize },
    108usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St4_Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X11) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X11)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X17_1) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X17_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St5_Reserved1) as usize - ptr as usize },
    122usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St5_Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St5_Reserved2) as usize - ptr as usize },
    124usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St5_Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X12) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X12)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X17_2) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X17_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St6_Reserved1) as usize - ptr as usize },
    138usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St6_Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St6_Reserved2) as usize - ptr as usize },
    140usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St6_Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X15) as usize - ptr as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X15)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X17_3) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X17_3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St7_Reserved1) as usize - ptr as usize },
    154usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St7_Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_St7_Reserved2) as usize - ptr as usize },
    156usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_St7_Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).V) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(V)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_XSAVE_FORMAT_Reserved4) as usize - ptr as usize },
    416usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_XSAVE_FORMAT_Reserved4)
    )
  );
}
#[test]
fn bindgen_test_layout__ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1>(),
    1232usize,
    concat!(
      "Size of: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_P1Home) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_P1Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_P2Home) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_P2Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_P3Home) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_P3Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_P4Home) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_P4Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_P5Home) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_P5Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_P6Home) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_P6Home)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ContextFlags) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(ContextFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_MxCsr_copy) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_MxCsr_copy)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_SegCs) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_SegCs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_SegDs) as usize - ptr as usize },
    58usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_SegDs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_SegEs) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_SegEs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_SegFs) as usize - ptr as usize },
    62usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_SegFs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_SegGs) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_SegGs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_SegSs) as usize - ptr as usize },
    66usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_SegSs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_EFlags) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_EFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_Dr0) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_Dr0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_Dr1) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_Dr1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_Dr2) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_Dr2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_Dr3) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_Dr3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_Dr6) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_Dr6)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_Dr7) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_Dr7)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X8) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X8)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X0) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X1) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X27) as usize - ptr as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X27)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sp) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Sp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Fp) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Fp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X25) as usize - ptr as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X25)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X26) as usize - ptr as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X26)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X2) as usize - ptr as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X3) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X4) as usize - ptr as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X5) as usize - ptr as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X5)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X19) as usize - ptr as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X19)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X20) as usize - ptr as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X20)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X21) as usize - ptr as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X21)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X22) as usize - ptr as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(X22)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Pc) as usize - ptr as usize },
    248usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Pc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_VectorRegister) as usize - ptr as usize },
    768usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_VectorRegister)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_VectorControl) as usize - ptr as usize },
    1184usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_VectorControl)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_DebugControl) as usize - ptr as usize },
    1192usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_DebugControl)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_LastBranchToRip) as usize - ptr as usize },
    1200usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_LastBranchToRip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_LastBranchFromRip) as usize - ptr as usize },
    1208usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_LastBranchFromRip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_LastExceptionToRip) as usize - ptr as usize },
    1216usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_LastExceptionToRip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AMD64_LastExceptionFromRip) as usize - ptr as usize },
    1224usize,
    concat!(
      "Offset of field: ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AMD64_LastExceptionFromRip)
    )
  );
}
#[test]
fn bindgen_test_layout__ARM64EC_NT_CONTEXT__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1>(),
    1232usize,
    concat!("Size of: ", stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_ARM64EC_NT_CONTEXT__bindgen_ty_1)
    )
  );
}
#[test]
fn bindgen_test_layout__ARM64EC_NT_CONTEXT() {
  assert_eq!(
    ::std::mem::size_of::<_ARM64EC_NT_CONTEXT>(),
    1232usize,
    concat!("Size of: ", stringify!(_ARM64EC_NT_CONTEXT))
  );
  assert_eq!(
    ::std::mem::align_of::<_ARM64EC_NT_CONTEXT>(),
    16usize,
    concat!("Alignment of ", stringify!(_ARM64EC_NT_CONTEXT))
  );
}
pub type ARM64EC_NT_CONTEXT = _ARM64EC_NT_CONTEXT;
pub type PARM64EC_NT_CONTEXT = *mut _ARM64EC_NT_CONTEXT;
pub type ARM64_RUNTIME_FUNCTION = _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
pub type PARM64_RUNTIME_FUNCTION = *mut _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPATCHER_CONTEXT_NONVOLREG_ARM64 {
  pub Buffer: [BYTE; 152usize],
  pub __bindgen_anon_1: _DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1 {
  pub GpNvRegs: [DWORD64; 11usize],
  pub FpNvRegs: [f64; 8usize],
}
#[test]
fn bindgen_test_layout__DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1>(),
    152usize,
    concat!(
      "Size of: ",
      stringify!(_DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GpNvRegs) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1),
      "::",
      stringify!(GpNvRegs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FpNvRegs) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1),
      "::",
      stringify!(FpNvRegs)
    )
  );
}
#[test]
fn bindgen_test_layout__DISPATCHER_CONTEXT_NONVOLREG_ARM64() {
  const UNINIT: ::std::mem::MaybeUninit<_DISPATCHER_CONTEXT_NONVOLREG_ARM64> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DISPATCHER_CONTEXT_NONVOLREG_ARM64>(),
    152usize,
    concat!("Size of: ", stringify!(_DISPATCHER_CONTEXT_NONVOLREG_ARM64))
  );
  assert_eq!(
    ::std::mem::align_of::<_DISPATCHER_CONTEXT_NONVOLREG_ARM64>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_DISPATCHER_CONTEXT_NONVOLREG_ARM64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_NONVOLREG_ARM64),
      "::",
      stringify!(Buffer)
    )
  );
}
pub type DISPATCHER_CONTEXT_NONVOLREG_ARM64 = _DISPATCHER_CONTEXT_NONVOLREG_ARM64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_CONTEXT_ARM64 {
  pub ControlPc: ULONG_PTR,
  pub ImageBase: ULONG_PTR,
  pub FunctionEntry: PARM64_RUNTIME_FUNCTION,
  pub EstablisherFrame: ULONG_PTR,
  pub TargetPc: ULONG_PTR,
  pub ContextRecord: PARM64_NT_CONTEXT,
  pub LanguageHandler: PEXCEPTION_ROUTINE,
  pub HandlerData: PVOID,
  pub HistoryTable: *mut _UNWIND_HISTORY_TABLE,
  pub ScopeIndex: DWORD,
  pub ControlPcIsUnwound: BOOLEAN,
  pub NonVolatileRegisters: PBYTE,
}
#[test]
fn bindgen_test_layout__DISPATCHER_CONTEXT_ARM64() {
  const UNINIT: ::std::mem::MaybeUninit<_DISPATCHER_CONTEXT_ARM64> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DISPATCHER_CONTEXT_ARM64>(),
    88usize,
    concat!("Size of: ", stringify!(_DISPATCHER_CONTEXT_ARM64))
  );
  assert_eq!(
    ::std::mem::align_of::<_DISPATCHER_CONTEXT_ARM64>(),
    8usize,
    concat!("Alignment of ", stringify!(_DISPATCHER_CONTEXT_ARM64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlPc) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(ControlPc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageBase) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(ImageBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FunctionEntry) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(FunctionEntry)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EstablisherFrame) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(EstablisherFrame)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetPc) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(TargetPc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ContextRecord) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(ContextRecord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LanguageHandler) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(LanguageHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HandlerData) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(HandlerData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HistoryTable) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(HistoryTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ScopeIndex) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(ScopeIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlPcIsUnwound) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(ControlPcIsUnwound)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NonVolatileRegisters) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_DISPATCHER_CONTEXT_ARM64),
      "::",
      stringify!(NonVolatileRegisters)
    )
  );
}
pub type DISPATCHER_CONTEXT_ARM64 = _DISPATCHER_CONTEXT_ARM64;
pub type PDISPATCHER_CONTEXT_ARM64 = *mut _DISPATCHER_CONTEXT_ARM64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64 {
  pub X19: PDWORD64,
  pub X20: PDWORD64,
  pub X21: PDWORD64,
  pub X22: PDWORD64,
  pub X23: PDWORD64,
  pub X24: PDWORD64,
  pub X25: PDWORD64,
  pub X26: PDWORD64,
  pub X27: PDWORD64,
  pub X28: PDWORD64,
  pub Fp: PDWORD64,
  pub Lr: PDWORD64,
  pub D8: PDWORD64,
  pub D9: PDWORD64,
  pub D10: PDWORD64,
  pub D11: PDWORD64,
  pub D12: PDWORD64,
  pub D13: PDWORD64,
  pub D14: PDWORD64,
  pub D15: PDWORD64,
}
#[test]
fn bindgen_test_layout__KNONVOLATILE_CONTEXT_POINTERS_ARM64() {
  const UNINIT: ::std::mem::MaybeUninit<_KNONVOLATILE_CONTEXT_POINTERS_ARM64> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KNONVOLATILE_CONTEXT_POINTERS_ARM64>(),
    160usize,
    concat!(
      "Size of: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_KNONVOLATILE_CONTEXT_POINTERS_ARM64>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X19) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(X19)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X20) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(X20)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X21) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(X21)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X22) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(X22)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X23) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(X23)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X24) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(X24)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X25) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(X25)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X26) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(X26)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X27) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(X27)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).X28) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(X28)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Fp) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(Fp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Lr) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(Lr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).D8) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(D8)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).D9) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(D9)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).D10) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(D10)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).D11) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(D11)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).D12) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(D12)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).D13) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(D13)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).D14) as usize - ptr as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(D14)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).D15) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64),
      "::",
      stringify!(D15)
    )
  );
}
pub type KNONVOLATILE_CONTEXT_POINTERS_ARM64 = _KNONVOLATILE_CONTEXT_POINTERS_ARM64;
pub type PKNONVOLATILE_CONTEXT_POINTERS_ARM64 = *mut _KNONVOLATILE_CONTEXT_POINTERS_ARM64;
extern "C" {
  pub fn __int2c() -> !;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _LDT_ENTRY {
  pub LimitLow: WORD,
  pub BaseLow: WORD,
  pub HighWord: _LDT_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _LDT_ENTRY__bindgen_ty_1 {
  pub Bytes: _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1,
  pub Bits: _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1 {
  pub BaseMid: BYTE,
  pub Flags1: BYTE,
  pub Flags2: BYTE,
  pub BaseHi: BYTE,
}
#[test]
fn bindgen_test_layout__LDT_ENTRY__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseMid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(BaseMid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags1) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Flags1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags2) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Flags2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseHi) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(BaseHi)
    )
  );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__LDT_ENTRY__bindgen_ty_1__bindgen_ty_2() {
  assert_eq!(
    ::std::mem::size_of::<_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2)
    )
  );
}
impl _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
  #[inline]
  pub fn BaseMid(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_BaseMid(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn Type(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u32) }
  }
  #[inline]
  pub fn set_Type(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 5u8, val as u64)
    }
  }
  #[inline]
  pub fn Dpl(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
  }
  #[inline]
  pub fn set_Dpl(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(13usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn Pres(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Pres(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(15usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn LimitHi(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
  }
  #[inline]
  pub fn set_LimitHi(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(16usize, 4u8, val as u64)
    }
  }
  #[inline]
  pub fn Sys(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Sys(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(20usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved_0(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Reserved_0(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(21usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Default_Big(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Default_Big(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(22usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Granularity(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Granularity(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(23usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn BaseHi(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_BaseHi(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(24usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    BaseMid: DWORD,
    Type: DWORD,
    Dpl: DWORD,
    Pres: DWORD,
    LimitHi: DWORD,
    Sys: DWORD,
    Reserved_0: DWORD,
    Default_Big: DWORD,
    Granularity: DWORD,
    BaseHi: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 8u8, {
      let BaseMid: u32 = unsafe { ::std::mem::transmute(BaseMid) };
      BaseMid as u64
    });
    __bindgen_bitfield_unit.set(8usize, 5u8, {
      let Type: u32 = unsafe { ::std::mem::transmute(Type) };
      Type as u64
    });
    __bindgen_bitfield_unit.set(13usize, 2u8, {
      let Dpl: u32 = unsafe { ::std::mem::transmute(Dpl) };
      Dpl as u64
    });
    __bindgen_bitfield_unit.set(15usize, 1u8, {
      let Pres: u32 = unsafe { ::std::mem::transmute(Pres) };
      Pres as u64
    });
    __bindgen_bitfield_unit.set(16usize, 4u8, {
      let LimitHi: u32 = unsafe { ::std::mem::transmute(LimitHi) };
      LimitHi as u64
    });
    __bindgen_bitfield_unit.set(20usize, 1u8, {
      let Sys: u32 = unsafe { ::std::mem::transmute(Sys) };
      Sys as u64
    });
    __bindgen_bitfield_unit.set(21usize, 1u8, {
      let Reserved_0: u32 = unsafe { ::std::mem::transmute(Reserved_0) };
      Reserved_0 as u64
    });
    __bindgen_bitfield_unit.set(22usize, 1u8, {
      let Default_Big: u32 = unsafe { ::std::mem::transmute(Default_Big) };
      Default_Big as u64
    });
    __bindgen_bitfield_unit.set(23usize, 1u8, {
      let Granularity: u32 = unsafe { ::std::mem::transmute(Granularity) };
      Granularity as u64
    });
    __bindgen_bitfield_unit.set(24usize, 8u8, {
      let BaseHi: u32 = unsafe { ::std::mem::transmute(BaseHi) };
      BaseHi as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__LDT_ENTRY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_LDT_ENTRY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_LDT_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(_LDT_ENTRY__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_LDT_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!("Alignment of ", stringify!(_LDT_ENTRY__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Bytes) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_LDT_ENTRY__bindgen_ty_1),
      "::",
      stringify!(Bytes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Bits) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_LDT_ENTRY__bindgen_ty_1),
      "::",
      stringify!(Bits)
    )
  );
}
#[test]
fn bindgen_test_layout__LDT_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_LDT_ENTRY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_LDT_ENTRY>(),
    8usize,
    concat!("Size of: ", stringify!(_LDT_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_LDT_ENTRY>(),
    4usize,
    concat!("Alignment of ", stringify!(_LDT_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LimitLow) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_LDT_ENTRY),
      "::",
      stringify!(LimitLow)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseLow) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_LDT_ENTRY),
      "::",
      stringify!(BaseLow)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HighWord) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_LDT_ENTRY),
      "::",
      stringify!(HighWord)
    )
  );
}
pub type LDT_ENTRY = _LDT_ENTRY;
pub type PLDT_ENTRY = *mut _LDT_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WOW64_FLOATING_SAVE_AREA {
  pub ControlWord: DWORD,
  pub StatusWord: DWORD,
  pub TagWord: DWORD,
  pub ErrorOffset: DWORD,
  pub ErrorSelector: DWORD,
  pub DataOffset: DWORD,
  pub DataSelector: DWORD,
  pub RegisterArea: [BYTE; 80usize],
  pub Cr0NpxState: DWORD,
}
#[test]
fn bindgen_test_layout__WOW64_FLOATING_SAVE_AREA() {
  const UNINIT: ::std::mem::MaybeUninit<_WOW64_FLOATING_SAVE_AREA> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_WOW64_FLOATING_SAVE_AREA>(),
    112usize,
    concat!("Size of: ", stringify!(_WOW64_FLOATING_SAVE_AREA))
  );
  assert_eq!(
    ::std::mem::align_of::<_WOW64_FLOATING_SAVE_AREA>(),
    4usize,
    concat!("Alignment of ", stringify!(_WOW64_FLOATING_SAVE_AREA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlWord) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_FLOATING_SAVE_AREA),
      "::",
      stringify!(ControlWord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StatusWord) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_FLOATING_SAVE_AREA),
      "::",
      stringify!(StatusWord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TagWord) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_FLOATING_SAVE_AREA),
      "::",
      stringify!(TagWord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ErrorOffset) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_FLOATING_SAVE_AREA),
      "::",
      stringify!(ErrorOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ErrorSelector) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_FLOATING_SAVE_AREA),
      "::",
      stringify!(ErrorSelector)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataOffset) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_FLOATING_SAVE_AREA),
      "::",
      stringify!(DataOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataSelector) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_FLOATING_SAVE_AREA),
      "::",
      stringify!(DataSelector)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RegisterArea) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_FLOATING_SAVE_AREA),
      "::",
      stringify!(RegisterArea)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Cr0NpxState) as usize - ptr as usize },
    108usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_FLOATING_SAVE_AREA),
      "::",
      stringify!(Cr0NpxState)
    )
  );
}
pub type WOW64_FLOATING_SAVE_AREA = _WOW64_FLOATING_SAVE_AREA;
pub type PWOW64_FLOATING_SAVE_AREA = *mut WOW64_FLOATING_SAVE_AREA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WOW64_CONTEXT {
  pub ContextFlags: DWORD,
  pub Dr0: DWORD,
  pub Dr1: DWORD,
  pub Dr2: DWORD,
  pub Dr3: DWORD,
  pub Dr6: DWORD,
  pub Dr7: DWORD,
  pub FloatSave: WOW64_FLOATING_SAVE_AREA,
  pub SegGs: DWORD,
  pub SegFs: DWORD,
  pub SegEs: DWORD,
  pub SegDs: DWORD,
  pub Edi: DWORD,
  pub Esi: DWORD,
  pub Ebx: DWORD,
  pub Edx: DWORD,
  pub Ecx: DWORD,
  pub Eax: DWORD,
  pub Ebp: DWORD,
  pub Eip: DWORD,
  pub SegCs: DWORD,
  pub EFlags: DWORD,
  pub Esp: DWORD,
  pub SegSs: DWORD,
  pub ExtendedRegisters: [BYTE; 512usize],
}
#[test]
fn bindgen_test_layout__WOW64_CONTEXT() {
  const UNINIT: ::std::mem::MaybeUninit<_WOW64_CONTEXT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_WOW64_CONTEXT>(),
    716usize,
    concat!("Size of: ", stringify!(_WOW64_CONTEXT))
  );
  assert_eq!(
    ::std::mem::align_of::<_WOW64_CONTEXT>(),
    4usize,
    concat!("Alignment of ", stringify!(_WOW64_CONTEXT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ContextFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(ContextFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr0) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Dr0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr1) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Dr1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr2) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Dr2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr3) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Dr3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr6) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Dr6)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dr7) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Dr7)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FloatSave) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(FloatSave)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegGs) as usize - ptr as usize },
    140usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(SegGs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegFs) as usize - ptr as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(SegFs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegEs) as usize - ptr as usize },
    148usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(SegEs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegDs) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(SegDs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Edi) as usize - ptr as usize },
    156usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Edi)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Esi) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Esi)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ebx) as usize - ptr as usize },
    164usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Ebx)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Edx) as usize - ptr as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Edx)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ecx) as usize - ptr as usize },
    172usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Ecx)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Eax) as usize - ptr as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Eax)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ebp) as usize - ptr as usize },
    180usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Ebp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Eip) as usize - ptr as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Eip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegCs) as usize - ptr as usize },
    188usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(SegCs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EFlags) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(EFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Esp) as usize - ptr as usize },
    196usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(Esp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SegSs) as usize - ptr as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(SegSs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExtendedRegisters) as usize - ptr as usize },
    204usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_CONTEXT),
      "::",
      stringify!(ExtendedRegisters)
    )
  );
}
pub type WOW64_CONTEXT = _WOW64_CONTEXT;
pub type PWOW64_CONTEXT = *mut WOW64_CONTEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _WOW64_LDT_ENTRY {
  pub LimitLow: WORD,
  pub BaseLow: WORD,
  pub HighWord: _WOW64_LDT_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _WOW64_LDT_ENTRY__bindgen_ty_1 {
  pub Bytes: _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1,
  pub Bits: _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1 {
  pub BaseMid: BYTE,
  pub Flags1: BYTE,
  pub Flags2: BYTE,
  pub BaseHi: BYTE,
}
#[test]
fn bindgen_test_layout__WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseMid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(BaseMid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags1) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Flags1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags2) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Flags2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseHi) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(BaseHi)
    )
  );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2() {
  assert_eq!(
    ::std::mem::size_of::<_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2)
    )
  );
}
impl _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
  #[inline]
  pub fn BaseMid(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_BaseMid(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn Type(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u32) }
  }
  #[inline]
  pub fn set_Type(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 5u8, val as u64)
    }
  }
  #[inline]
  pub fn Dpl(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
  }
  #[inline]
  pub fn set_Dpl(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(13usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn Pres(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Pres(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(15usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn LimitHi(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
  }
  #[inline]
  pub fn set_LimitHi(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(16usize, 4u8, val as u64)
    }
  }
  #[inline]
  pub fn Sys(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Sys(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(20usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved_0(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Reserved_0(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(21usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Default_Big(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Default_Big(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(22usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Granularity(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Granularity(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(23usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn BaseHi(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_BaseHi(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(24usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    BaseMid: DWORD,
    Type: DWORD,
    Dpl: DWORD,
    Pres: DWORD,
    LimitHi: DWORD,
    Sys: DWORD,
    Reserved_0: DWORD,
    Default_Big: DWORD,
    Granularity: DWORD,
    BaseHi: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 8u8, {
      let BaseMid: u32 = unsafe { ::std::mem::transmute(BaseMid) };
      BaseMid as u64
    });
    __bindgen_bitfield_unit.set(8usize, 5u8, {
      let Type: u32 = unsafe { ::std::mem::transmute(Type) };
      Type as u64
    });
    __bindgen_bitfield_unit.set(13usize, 2u8, {
      let Dpl: u32 = unsafe { ::std::mem::transmute(Dpl) };
      Dpl as u64
    });
    __bindgen_bitfield_unit.set(15usize, 1u8, {
      let Pres: u32 = unsafe { ::std::mem::transmute(Pres) };
      Pres as u64
    });
    __bindgen_bitfield_unit.set(16usize, 4u8, {
      let LimitHi: u32 = unsafe { ::std::mem::transmute(LimitHi) };
      LimitHi as u64
    });
    __bindgen_bitfield_unit.set(20usize, 1u8, {
      let Sys: u32 = unsafe { ::std::mem::transmute(Sys) };
      Sys as u64
    });
    __bindgen_bitfield_unit.set(21usize, 1u8, {
      let Reserved_0: u32 = unsafe { ::std::mem::transmute(Reserved_0) };
      Reserved_0 as u64
    });
    __bindgen_bitfield_unit.set(22usize, 1u8, {
      let Default_Big: u32 = unsafe { ::std::mem::transmute(Default_Big) };
      Default_Big as u64
    });
    __bindgen_bitfield_unit.set(23usize, 1u8, {
      let Granularity: u32 = unsafe { ::std::mem::transmute(Granularity) };
      Granularity as u64
    });
    __bindgen_bitfield_unit.set(24usize, 8u8, {
      let BaseHi: u32 = unsafe { ::std::mem::transmute(BaseHi) };
      BaseHi as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__WOW64_LDT_ENTRY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_WOW64_LDT_ENTRY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_WOW64_LDT_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_WOW64_LDT_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!("Alignment of ", stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Bytes) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1),
      "::",
      stringify!(Bytes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Bits) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_LDT_ENTRY__bindgen_ty_1),
      "::",
      stringify!(Bits)
    )
  );
}
#[test]
fn bindgen_test_layout__WOW64_LDT_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_WOW64_LDT_ENTRY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_WOW64_LDT_ENTRY>(),
    8usize,
    concat!("Size of: ", stringify!(_WOW64_LDT_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_WOW64_LDT_ENTRY>(),
    4usize,
    concat!("Alignment of ", stringify!(_WOW64_LDT_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LimitLow) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_LDT_ENTRY),
      "::",
      stringify!(LimitLow)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseLow) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_LDT_ENTRY),
      "::",
      stringify!(BaseLow)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HighWord) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_LDT_ENTRY),
      "::",
      stringify!(HighWord)
    )
  );
}
pub type WOW64_LDT_ENTRY = _WOW64_LDT_ENTRY;
pub type PWOW64_LDT_ENTRY = *mut _WOW64_LDT_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
  pub Selector: DWORD,
  pub Descriptor: WOW64_LDT_ENTRY,
}
#[test]
fn bindgen_test_layout__WOW64_DESCRIPTOR_TABLE_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_WOW64_DESCRIPTOR_TABLE_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_WOW64_DESCRIPTOR_TABLE_ENTRY>(),
    12usize,
    concat!("Size of: ", stringify!(_WOW64_DESCRIPTOR_TABLE_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_WOW64_DESCRIPTOR_TABLE_ENTRY>(),
    4usize,
    concat!("Alignment of ", stringify!(_WOW64_DESCRIPTOR_TABLE_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Selector) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_DESCRIPTOR_TABLE_ENTRY),
      "::",
      stringify!(Selector)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Descriptor) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_WOW64_DESCRIPTOR_TABLE_ENTRY),
      "::",
      stringify!(Descriptor)
    )
  );
}
pub type WOW64_DESCRIPTOR_TABLE_ENTRY = _WOW64_DESCRIPTOR_TABLE_ENTRY;
pub type PWOW64_DESCRIPTOR_TABLE_ENTRY = *mut _WOW64_DESCRIPTOR_TABLE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_RECORD {
  pub ExceptionCode: DWORD,
  pub ExceptionFlags: DWORD,
  pub ExceptionRecord: *mut _EXCEPTION_RECORD,
  pub ExceptionAddress: PVOID,
  pub NumberParameters: DWORD,
  pub ExceptionInformation: [ULONG_PTR; 15usize],
}
#[test]
fn bindgen_test_layout__EXCEPTION_RECORD() {
  const UNINIT: ::std::mem::MaybeUninit<_EXCEPTION_RECORD> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_EXCEPTION_RECORD>(),
    152usize,
    concat!("Size of: ", stringify!(_EXCEPTION_RECORD))
  );
  assert_eq!(
    ::std::mem::align_of::<_EXCEPTION_RECORD>(),
    8usize,
    concat!("Alignment of ", stringify!(_EXCEPTION_RECORD))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionCode) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD),
      "::",
      stringify!(ExceptionCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionFlags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD),
      "::",
      stringify!(ExceptionFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionRecord) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD),
      "::",
      stringify!(ExceptionRecord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionAddress) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD),
      "::",
      stringify!(ExceptionAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberParameters) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD),
      "::",
      stringify!(NumberParameters)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionInformation) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD),
      "::",
      stringify!(ExceptionInformation)
    )
  );
}
pub type EXCEPTION_RECORD = _EXCEPTION_RECORD;
pub type PEXCEPTION_RECORD = *mut EXCEPTION_RECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_RECORD32 {
  pub ExceptionCode: DWORD,
  pub ExceptionFlags: DWORD,
  pub ExceptionRecord: DWORD,
  pub ExceptionAddress: DWORD,
  pub NumberParameters: DWORD,
  pub ExceptionInformation: [DWORD; 15usize],
}
#[test]
fn bindgen_test_layout__EXCEPTION_RECORD32() {
  const UNINIT: ::std::mem::MaybeUninit<_EXCEPTION_RECORD32> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_EXCEPTION_RECORD32>(),
    80usize,
    concat!("Size of: ", stringify!(_EXCEPTION_RECORD32))
  );
  assert_eq!(
    ::std::mem::align_of::<_EXCEPTION_RECORD32>(),
    4usize,
    concat!("Alignment of ", stringify!(_EXCEPTION_RECORD32))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionCode) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD32),
      "::",
      stringify!(ExceptionCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionFlags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD32),
      "::",
      stringify!(ExceptionFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionRecord) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD32),
      "::",
      stringify!(ExceptionRecord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionAddress) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD32),
      "::",
      stringify!(ExceptionAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberParameters) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD32),
      "::",
      stringify!(NumberParameters)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionInformation) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD32),
      "::",
      stringify!(ExceptionInformation)
    )
  );
}
pub type EXCEPTION_RECORD32 = _EXCEPTION_RECORD32;
pub type PEXCEPTION_RECORD32 = *mut _EXCEPTION_RECORD32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_RECORD64 {
  pub ExceptionCode: DWORD,
  pub ExceptionFlags: DWORD,
  pub ExceptionRecord: DWORD64,
  pub ExceptionAddress: DWORD64,
  pub NumberParameters: DWORD,
  pub __unusedAlignment: DWORD,
  pub ExceptionInformation: [DWORD64; 15usize],
}
#[test]
fn bindgen_test_layout__EXCEPTION_RECORD64() {
  const UNINIT: ::std::mem::MaybeUninit<_EXCEPTION_RECORD64> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_EXCEPTION_RECORD64>(),
    152usize,
    concat!("Size of: ", stringify!(_EXCEPTION_RECORD64))
  );
  assert_eq!(
    ::std::mem::align_of::<_EXCEPTION_RECORD64>(),
    8usize,
    concat!("Alignment of ", stringify!(_EXCEPTION_RECORD64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionCode) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD64),
      "::",
      stringify!(ExceptionCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionFlags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD64),
      "::",
      stringify!(ExceptionFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionRecord) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD64),
      "::",
      stringify!(ExceptionRecord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionAddress) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD64),
      "::",
      stringify!(ExceptionAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberParameters) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD64),
      "::",
      stringify!(NumberParameters)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).__unusedAlignment) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD64),
      "::",
      stringify!(__unusedAlignment)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionInformation) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_RECORD64),
      "::",
      stringify!(ExceptionInformation)
    )
  );
}
pub type EXCEPTION_RECORD64 = _EXCEPTION_RECORD64;
pub type PEXCEPTION_RECORD64 = *mut _EXCEPTION_RECORD64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_POINTERS {
  pub ExceptionRecord: PEXCEPTION_RECORD,
  pub ContextRecord: PCONTEXT,
}
#[test]
fn bindgen_test_layout__EXCEPTION_POINTERS() {
  const UNINIT: ::std::mem::MaybeUninit<_EXCEPTION_POINTERS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_EXCEPTION_POINTERS>(),
    16usize,
    concat!("Size of: ", stringify!(_EXCEPTION_POINTERS))
  );
  assert_eq!(
    ::std::mem::align_of::<_EXCEPTION_POINTERS>(),
    8usize,
    concat!("Alignment of ", stringify!(_EXCEPTION_POINTERS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionRecord) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_POINTERS),
      "::",
      stringify!(ExceptionRecord)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ContextRecord) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_POINTERS),
      "::",
      stringify!(ContextRecord)
    )
  );
}
pub type EXCEPTION_POINTERS = _EXCEPTION_POINTERS;
pub type PEXCEPTION_POINTERS = *mut _EXCEPTION_POINTERS;
pub type PACCESS_TOKEN = PVOID;
pub type PSECURITY_DESCRIPTOR = PVOID;
pub type PSID = PVOID;
pub type PCLAIMS_BLOB = PVOID;
pub type ACCESS_MASK = DWORD;
pub type PACCESS_MASK = *mut ACCESS_MASK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GENERIC_MAPPING {
  pub GenericRead: ACCESS_MASK,
  pub GenericWrite: ACCESS_MASK,
  pub GenericExecute: ACCESS_MASK,
  pub GenericAll: ACCESS_MASK,
}
#[test]
fn bindgen_test_layout__GENERIC_MAPPING() {
  const UNINIT: ::std::mem::MaybeUninit<_GENERIC_MAPPING> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_GENERIC_MAPPING>(),
    16usize,
    concat!("Size of: ", stringify!(_GENERIC_MAPPING))
  );
  assert_eq!(
    ::std::mem::align_of::<_GENERIC_MAPPING>(),
    4usize,
    concat!("Alignment of ", stringify!(_GENERIC_MAPPING))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GenericRead) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_GENERIC_MAPPING),
      "::",
      stringify!(GenericRead)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GenericWrite) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_GENERIC_MAPPING),
      "::",
      stringify!(GenericWrite)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GenericExecute) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_GENERIC_MAPPING),
      "::",
      stringify!(GenericExecute)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GenericAll) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_GENERIC_MAPPING),
      "::",
      stringify!(GenericAll)
    )
  );
}
pub type GENERIC_MAPPING = _GENERIC_MAPPING;
pub type PGENERIC_MAPPING = *mut GENERIC_MAPPING;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _LUID_AND_ATTRIBUTES {
  pub Luid: LUID,
  pub Attributes: DWORD,
}
#[test]
fn bindgen_test_layout__LUID_AND_ATTRIBUTES() {
  const UNINIT: ::std::mem::MaybeUninit<_LUID_AND_ATTRIBUTES> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_LUID_AND_ATTRIBUTES>(),
    12usize,
    concat!("Size of: ", stringify!(_LUID_AND_ATTRIBUTES))
  );
  assert_eq!(
    ::std::mem::align_of::<_LUID_AND_ATTRIBUTES>(),
    4usize,
    concat!("Alignment of ", stringify!(_LUID_AND_ATTRIBUTES))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Luid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_LUID_AND_ATTRIBUTES),
      "::",
      stringify!(Luid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Attributes) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_LUID_AND_ATTRIBUTES),
      "::",
      stringify!(Attributes)
    )
  );
}
pub type LUID_AND_ATTRIBUTES = _LUID_AND_ATTRIBUTES;
pub type PLUID_AND_ATTRIBUTES = *mut _LUID_AND_ATTRIBUTES;
pub type LUID_AND_ATTRIBUTES_ARRAY = [LUID_AND_ATTRIBUTES; 1usize];
pub type PLUID_AND_ATTRIBUTES_ARRAY = *mut LUID_AND_ATTRIBUTES_ARRAY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SID_IDENTIFIER_AUTHORITY {
  pub Value: [BYTE; 6usize],
}
#[test]
fn bindgen_test_layout__SID_IDENTIFIER_AUTHORITY() {
  const UNINIT: ::std::mem::MaybeUninit<_SID_IDENTIFIER_AUTHORITY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SID_IDENTIFIER_AUTHORITY>(),
    6usize,
    concat!("Size of: ", stringify!(_SID_IDENTIFIER_AUTHORITY))
  );
  assert_eq!(
    ::std::mem::align_of::<_SID_IDENTIFIER_AUTHORITY>(),
    1usize,
    concat!("Alignment of ", stringify!(_SID_IDENTIFIER_AUTHORITY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SID_IDENTIFIER_AUTHORITY),
      "::",
      stringify!(Value)
    )
  );
}
pub type SID_IDENTIFIER_AUTHORITY = _SID_IDENTIFIER_AUTHORITY;
pub type PSID_IDENTIFIER_AUTHORITY = *mut _SID_IDENTIFIER_AUTHORITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SID {
  pub Revision: BYTE,
  pub SubAuthorityCount: BYTE,
  pub IdentifierAuthority: SID_IDENTIFIER_AUTHORITY,
  pub SubAuthority: [DWORD; 1usize],
}
#[test]
fn bindgen_test_layout__SID() {
  const UNINIT: ::std::mem::MaybeUninit<_SID> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SID>(),
    12usize,
    concat!("Size of: ", stringify!(_SID))
  );
  assert_eq!(
    ::std::mem::align_of::<_SID>(),
    4usize,
    concat!("Alignment of ", stringify!(_SID))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Revision) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SID),
      "::",
      stringify!(Revision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SubAuthorityCount) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_SID),
      "::",
      stringify!(SubAuthorityCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IdentifierAuthority) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_SID),
      "::",
      stringify!(IdentifierAuthority)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SubAuthority) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SID),
      "::",
      stringify!(SubAuthority)
    )
  );
}
pub type SID = _SID;
pub type PISID = *mut _SID;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SE_SID {
  pub Sid: SID,
  pub Buffer: [BYTE; 68usize],
}
#[test]
fn bindgen_test_layout__SE_SID() {
  const UNINIT: ::std::mem::MaybeUninit<_SE_SID> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SE_SID>(),
    68usize,
    concat!("Size of: ", stringify!(_SE_SID))
  );
  assert_eq!(
    ::std::mem::align_of::<_SE_SID>(),
    4usize,
    concat!("Alignment of ", stringify!(_SE_SID))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_SID),
      "::",
      stringify!(Sid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_SID),
      "::",
      stringify!(Buffer)
    )
  );
}
pub type SE_SID = _SE_SID;
pub type PSE_SID = *mut _SE_SID;
pub const _SID_NAME_USE_SidTypeUser: _SID_NAME_USE = 1;
pub const _SID_NAME_USE_SidTypeGroup: _SID_NAME_USE = 2;
pub const _SID_NAME_USE_SidTypeDomain: _SID_NAME_USE = 3;
pub const _SID_NAME_USE_SidTypeAlias: _SID_NAME_USE = 4;
pub const _SID_NAME_USE_SidTypeWellKnownGroup: _SID_NAME_USE = 5;
pub const _SID_NAME_USE_SidTypeDeletedAccount: _SID_NAME_USE = 6;
pub const _SID_NAME_USE_SidTypeInvalid: _SID_NAME_USE = 7;
pub const _SID_NAME_USE_SidTypeUnknown: _SID_NAME_USE = 8;
pub const _SID_NAME_USE_SidTypeComputer: _SID_NAME_USE = 9;
pub const _SID_NAME_USE_SidTypeLabel: _SID_NAME_USE = 10;
pub const _SID_NAME_USE_SidTypeLogonSession: _SID_NAME_USE = 11;
pub type _SID_NAME_USE = ::std::os::raw::c_int;
pub use self::_SID_NAME_USE as SID_NAME_USE;
pub type PSID_NAME_USE = *mut _SID_NAME_USE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SID_AND_ATTRIBUTES {
  pub Sid: PSID,
  pub Attributes: DWORD,
}
#[test]
fn bindgen_test_layout__SID_AND_ATTRIBUTES() {
  const UNINIT: ::std::mem::MaybeUninit<_SID_AND_ATTRIBUTES> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SID_AND_ATTRIBUTES>(),
    16usize,
    concat!("Size of: ", stringify!(_SID_AND_ATTRIBUTES))
  );
  assert_eq!(
    ::std::mem::align_of::<_SID_AND_ATTRIBUTES>(),
    8usize,
    concat!("Alignment of ", stringify!(_SID_AND_ATTRIBUTES))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SID_AND_ATTRIBUTES),
      "::",
      stringify!(Sid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Attributes) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SID_AND_ATTRIBUTES),
      "::",
      stringify!(Attributes)
    )
  );
}
pub type SID_AND_ATTRIBUTES = _SID_AND_ATTRIBUTES;
pub type PSID_AND_ATTRIBUTES = *mut _SID_AND_ATTRIBUTES;
pub type SID_AND_ATTRIBUTES_ARRAY = [SID_AND_ATTRIBUTES; 1usize];
pub type PSID_AND_ATTRIBUTES_ARRAY = *mut SID_AND_ATTRIBUTES_ARRAY;
pub type SID_HASH_ENTRY = ULONG_PTR;
pub type PSID_HASH_ENTRY = *mut ULONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SID_AND_ATTRIBUTES_HASH {
  pub SidCount: DWORD,
  pub SidAttr: PSID_AND_ATTRIBUTES,
  pub Hash: [SID_HASH_ENTRY; 32usize],
}
#[test]
fn bindgen_test_layout__SID_AND_ATTRIBUTES_HASH() {
  const UNINIT: ::std::mem::MaybeUninit<_SID_AND_ATTRIBUTES_HASH> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SID_AND_ATTRIBUTES_HASH>(),
    272usize,
    concat!("Size of: ", stringify!(_SID_AND_ATTRIBUTES_HASH))
  );
  assert_eq!(
    ::std::mem::align_of::<_SID_AND_ATTRIBUTES_HASH>(),
    8usize,
    concat!("Alignment of ", stringify!(_SID_AND_ATTRIBUTES_HASH))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SID_AND_ATTRIBUTES_HASH),
      "::",
      stringify!(SidCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidAttr) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SID_AND_ATTRIBUTES_HASH),
      "::",
      stringify!(SidAttr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Hash) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SID_AND_ATTRIBUTES_HASH),
      "::",
      stringify!(Hash)
    )
  );
}
pub type SID_AND_ATTRIBUTES_HASH = _SID_AND_ATTRIBUTES_HASH;
pub type PSID_AND_ATTRIBUTES_HASH = *mut _SID_AND_ATTRIBUTES_HASH;
pub const WELL_KNOWN_SID_TYPE_WinNullSid: WELL_KNOWN_SID_TYPE = 0;
pub const WELL_KNOWN_SID_TYPE_WinWorldSid: WELL_KNOWN_SID_TYPE = 1;
pub const WELL_KNOWN_SID_TYPE_WinLocalSid: WELL_KNOWN_SID_TYPE = 2;
pub const WELL_KNOWN_SID_TYPE_WinCreatorOwnerSid: WELL_KNOWN_SID_TYPE = 3;
pub const WELL_KNOWN_SID_TYPE_WinCreatorGroupSid: WELL_KNOWN_SID_TYPE = 4;
pub const WELL_KNOWN_SID_TYPE_WinCreatorOwnerServerSid: WELL_KNOWN_SID_TYPE = 5;
pub const WELL_KNOWN_SID_TYPE_WinCreatorGroupServerSid: WELL_KNOWN_SID_TYPE = 6;
pub const WELL_KNOWN_SID_TYPE_WinNtAuthoritySid: WELL_KNOWN_SID_TYPE = 7;
pub const WELL_KNOWN_SID_TYPE_WinDialupSid: WELL_KNOWN_SID_TYPE = 8;
pub const WELL_KNOWN_SID_TYPE_WinNetworkSid: WELL_KNOWN_SID_TYPE = 9;
pub const WELL_KNOWN_SID_TYPE_WinBatchSid: WELL_KNOWN_SID_TYPE = 10;
pub const WELL_KNOWN_SID_TYPE_WinInteractiveSid: WELL_KNOWN_SID_TYPE = 11;
pub const WELL_KNOWN_SID_TYPE_WinServiceSid: WELL_KNOWN_SID_TYPE = 12;
pub const WELL_KNOWN_SID_TYPE_WinAnonymousSid: WELL_KNOWN_SID_TYPE = 13;
pub const WELL_KNOWN_SID_TYPE_WinProxySid: WELL_KNOWN_SID_TYPE = 14;
pub const WELL_KNOWN_SID_TYPE_WinEnterpriseControllersSid: WELL_KNOWN_SID_TYPE = 15;
pub const WELL_KNOWN_SID_TYPE_WinSelfSid: WELL_KNOWN_SID_TYPE = 16;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticatedUserSid: WELL_KNOWN_SID_TYPE = 17;
pub const WELL_KNOWN_SID_TYPE_WinRestrictedCodeSid: WELL_KNOWN_SID_TYPE = 18;
pub const WELL_KNOWN_SID_TYPE_WinTerminalServerSid: WELL_KNOWN_SID_TYPE = 19;
pub const WELL_KNOWN_SID_TYPE_WinRemoteLogonIdSid: WELL_KNOWN_SID_TYPE = 20;
pub const WELL_KNOWN_SID_TYPE_WinLogonIdsSid: WELL_KNOWN_SID_TYPE = 21;
pub const WELL_KNOWN_SID_TYPE_WinLocalSystemSid: WELL_KNOWN_SID_TYPE = 22;
pub const WELL_KNOWN_SID_TYPE_WinLocalServiceSid: WELL_KNOWN_SID_TYPE = 23;
pub const WELL_KNOWN_SID_TYPE_WinNetworkServiceSid: WELL_KNOWN_SID_TYPE = 24;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinDomainSid: WELL_KNOWN_SID_TYPE = 25;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinAdministratorsSid: WELL_KNOWN_SID_TYPE = 26;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinUsersSid: WELL_KNOWN_SID_TYPE = 27;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinGuestsSid: WELL_KNOWN_SID_TYPE = 28;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinPowerUsersSid: WELL_KNOWN_SID_TYPE = 29;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinAccountOperatorsSid: WELL_KNOWN_SID_TYPE = 30;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinSystemOperatorsSid: WELL_KNOWN_SID_TYPE = 31;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinPrintOperatorsSid: WELL_KNOWN_SID_TYPE = 32;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinBackupOperatorsSid: WELL_KNOWN_SID_TYPE = 33;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinReplicatorSid: WELL_KNOWN_SID_TYPE = 34;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinPreWindows2000CompatibleAccessSid: WELL_KNOWN_SID_TYPE = 35;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinRemoteDesktopUsersSid: WELL_KNOWN_SID_TYPE = 36;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinNetworkConfigurationOperatorsSid: WELL_KNOWN_SID_TYPE = 37;
pub const WELL_KNOWN_SID_TYPE_WinAccountAdministratorSid: WELL_KNOWN_SID_TYPE = 38;
pub const WELL_KNOWN_SID_TYPE_WinAccountGuestSid: WELL_KNOWN_SID_TYPE = 39;
pub const WELL_KNOWN_SID_TYPE_WinAccountKrbtgtSid: WELL_KNOWN_SID_TYPE = 40;
pub const WELL_KNOWN_SID_TYPE_WinAccountDomainAdminsSid: WELL_KNOWN_SID_TYPE = 41;
pub const WELL_KNOWN_SID_TYPE_WinAccountDomainUsersSid: WELL_KNOWN_SID_TYPE = 42;
pub const WELL_KNOWN_SID_TYPE_WinAccountDomainGuestsSid: WELL_KNOWN_SID_TYPE = 43;
pub const WELL_KNOWN_SID_TYPE_WinAccountComputersSid: WELL_KNOWN_SID_TYPE = 44;
pub const WELL_KNOWN_SID_TYPE_WinAccountControllersSid: WELL_KNOWN_SID_TYPE = 45;
pub const WELL_KNOWN_SID_TYPE_WinAccountCertAdminsSid: WELL_KNOWN_SID_TYPE = 46;
pub const WELL_KNOWN_SID_TYPE_WinAccountSchemaAdminsSid: WELL_KNOWN_SID_TYPE = 47;
pub const WELL_KNOWN_SID_TYPE_WinAccountEnterpriseAdminsSid: WELL_KNOWN_SID_TYPE = 48;
pub const WELL_KNOWN_SID_TYPE_WinAccountPolicyAdminsSid: WELL_KNOWN_SID_TYPE = 49;
pub const WELL_KNOWN_SID_TYPE_WinAccountRasAndIasServersSid: WELL_KNOWN_SID_TYPE = 50;
pub const WELL_KNOWN_SID_TYPE_WinNTLMAuthenticationSid: WELL_KNOWN_SID_TYPE = 51;
pub const WELL_KNOWN_SID_TYPE_WinDigestAuthenticationSid: WELL_KNOWN_SID_TYPE = 52;
pub const WELL_KNOWN_SID_TYPE_WinSChannelAuthenticationSid: WELL_KNOWN_SID_TYPE = 53;
pub const WELL_KNOWN_SID_TYPE_WinThisOrganizationSid: WELL_KNOWN_SID_TYPE = 54;
pub const WELL_KNOWN_SID_TYPE_WinOtherOrganizationSid: WELL_KNOWN_SID_TYPE = 55;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinIncomingForestTrustBuildersSid: WELL_KNOWN_SID_TYPE = 56;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinPerfMonitoringUsersSid: WELL_KNOWN_SID_TYPE = 57;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinPerfLoggingUsersSid: WELL_KNOWN_SID_TYPE = 58;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinAuthorizationAccessSid: WELL_KNOWN_SID_TYPE = 59;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinTerminalServerLicenseServersSid: WELL_KNOWN_SID_TYPE = 60;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinDCOMUsersSid: WELL_KNOWN_SID_TYPE = 61;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinIUsersSid: WELL_KNOWN_SID_TYPE = 62;
pub const WELL_KNOWN_SID_TYPE_WinIUserSid: WELL_KNOWN_SID_TYPE = 63;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinCryptoOperatorsSid: WELL_KNOWN_SID_TYPE = 64;
pub const WELL_KNOWN_SID_TYPE_WinUntrustedLabelSid: WELL_KNOWN_SID_TYPE = 65;
pub const WELL_KNOWN_SID_TYPE_WinLowLabelSid: WELL_KNOWN_SID_TYPE = 66;
pub const WELL_KNOWN_SID_TYPE_WinMediumLabelSid: WELL_KNOWN_SID_TYPE = 67;
pub const WELL_KNOWN_SID_TYPE_WinHighLabelSid: WELL_KNOWN_SID_TYPE = 68;
pub const WELL_KNOWN_SID_TYPE_WinSystemLabelSid: WELL_KNOWN_SID_TYPE = 69;
pub const WELL_KNOWN_SID_TYPE_WinWriteRestrictedCodeSid: WELL_KNOWN_SID_TYPE = 70;
pub const WELL_KNOWN_SID_TYPE_WinCreatorOwnerRightsSid: WELL_KNOWN_SID_TYPE = 71;
pub const WELL_KNOWN_SID_TYPE_WinCacheablePrincipalsGroupSid: WELL_KNOWN_SID_TYPE = 72;
pub const WELL_KNOWN_SID_TYPE_WinNonCacheablePrincipalsGroupSid: WELL_KNOWN_SID_TYPE = 73;
pub const WELL_KNOWN_SID_TYPE_WinEnterpriseReadonlyControllersSid: WELL_KNOWN_SID_TYPE = 74;
pub const WELL_KNOWN_SID_TYPE_WinAccountReadonlyControllersSid: WELL_KNOWN_SID_TYPE = 75;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinEventLogReadersGroup: WELL_KNOWN_SID_TYPE = 76;
pub const WELL_KNOWN_SID_TYPE_WinNewEnterpriseReadonlyControllersSid: WELL_KNOWN_SID_TYPE = 77;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinCertSvcDComAccessGroup: WELL_KNOWN_SID_TYPE = 78;
pub const WELL_KNOWN_SID_TYPE_WinMediumPlusLabelSid: WELL_KNOWN_SID_TYPE = 79;
pub const WELL_KNOWN_SID_TYPE_WinLocalLogonSid: WELL_KNOWN_SID_TYPE = 80;
pub const WELL_KNOWN_SID_TYPE_WinConsoleLogonSid: WELL_KNOWN_SID_TYPE = 81;
pub const WELL_KNOWN_SID_TYPE_WinThisOrganizationCertificateSid: WELL_KNOWN_SID_TYPE = 82;
pub const WELL_KNOWN_SID_TYPE_WinApplicationPackageAuthoritySid: WELL_KNOWN_SID_TYPE = 83;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinAnyPackageSid: WELL_KNOWN_SID_TYPE = 84;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityInternetClientSid: WELL_KNOWN_SID_TYPE = 85;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityInternetClientServerSid: WELL_KNOWN_SID_TYPE = 86;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityPrivateNetworkClientServerSid: WELL_KNOWN_SID_TYPE = 87;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityPicturesLibrarySid: WELL_KNOWN_SID_TYPE = 88;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityVideosLibrarySid: WELL_KNOWN_SID_TYPE = 89;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityMusicLibrarySid: WELL_KNOWN_SID_TYPE = 90;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityDocumentsLibrarySid: WELL_KNOWN_SID_TYPE = 91;
pub const WELL_KNOWN_SID_TYPE_WinCapabilitySharedUserCertificatesSid: WELL_KNOWN_SID_TYPE = 92;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityEnterpriseAuthenticationSid: WELL_KNOWN_SID_TYPE = 93;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityRemovableStorageSid: WELL_KNOWN_SID_TYPE = 94;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinRDSRemoteAccessServersSid: WELL_KNOWN_SID_TYPE = 95;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinRDSEndpointServersSid: WELL_KNOWN_SID_TYPE = 96;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinRDSManagementServersSid: WELL_KNOWN_SID_TYPE = 97;
pub const WELL_KNOWN_SID_TYPE_WinUserModeDriversSid: WELL_KNOWN_SID_TYPE = 98;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinHyperVAdminsSid: WELL_KNOWN_SID_TYPE = 99;
pub const WELL_KNOWN_SID_TYPE_WinAccountCloneableControllersSid: WELL_KNOWN_SID_TYPE = 100;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinAccessControlAssistanceOperatorsSid: WELL_KNOWN_SID_TYPE =
  101;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinRemoteManagementUsersSid: WELL_KNOWN_SID_TYPE = 102;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationAuthorityAssertedSid: WELL_KNOWN_SID_TYPE = 103;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationServiceAssertedSid: WELL_KNOWN_SID_TYPE = 104;
pub const WELL_KNOWN_SID_TYPE_WinLocalAccountSid: WELL_KNOWN_SID_TYPE = 105;
pub const WELL_KNOWN_SID_TYPE_WinLocalAccountAndAdministratorSid: WELL_KNOWN_SID_TYPE = 106;
pub const WELL_KNOWN_SID_TYPE_WinAccountProtectedUsersSid: WELL_KNOWN_SID_TYPE = 107;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityAppointmentsSid: WELL_KNOWN_SID_TYPE = 108;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityContactsSid: WELL_KNOWN_SID_TYPE = 109;
pub const WELL_KNOWN_SID_TYPE_WinAccountDefaultSystemManagedSid: WELL_KNOWN_SID_TYPE = 110;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinDefaultSystemManagedGroupSid: WELL_KNOWN_SID_TYPE = 111;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinStorageReplicaAdminsSid: WELL_KNOWN_SID_TYPE = 112;
pub const WELL_KNOWN_SID_TYPE_WinAccountKeyAdminsSid: WELL_KNOWN_SID_TYPE = 113;
pub const WELL_KNOWN_SID_TYPE_WinAccountEnterpriseKeyAdminsSid: WELL_KNOWN_SID_TYPE = 114;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationKeyTrustSid: WELL_KNOWN_SID_TYPE = 115;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationKeyPropertyMFASid: WELL_KNOWN_SID_TYPE = 116;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationKeyPropertyAttestationSid: WELL_KNOWN_SID_TYPE = 117;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationFreshKeyAuthSid: WELL_KNOWN_SID_TYPE = 118;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinDeviceOwnersSid: WELL_KNOWN_SID_TYPE = 119;
pub type WELL_KNOWN_SID_TYPE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACL {
  pub AclRevision: BYTE,
  pub Sbz1: BYTE,
  pub AclSize: WORD,
  pub AceCount: WORD,
  pub Sbz2: WORD,
}
#[test]
fn bindgen_test_layout__ACL() {
  const UNINIT: ::std::mem::MaybeUninit<_ACL> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACL>(),
    8usize,
    concat!("Size of: ", stringify!(_ACL))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACL>(),
    2usize,
    concat!("Alignment of ", stringify!(_ACL))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AclRevision) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACL),
      "::",
      stringify!(AclRevision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sbz1) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACL),
      "::",
      stringify!(Sbz1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AclSize) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACL),
      "::",
      stringify!(AclSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AceCount) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACL),
      "::",
      stringify!(AceCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sbz2) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACL),
      "::",
      stringify!(Sbz2)
    )
  );
}
pub type ACL = _ACL;
pub type PACL = *mut ACL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACE_HEADER {
  pub AceType: BYTE,
  pub AceFlags: BYTE,
  pub AceSize: WORD,
}
#[test]
fn bindgen_test_layout__ACE_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_ACE_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACE_HEADER>(),
    4usize,
    concat!("Size of: ", stringify!(_ACE_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACE_HEADER>(),
    2usize,
    concat!("Alignment of ", stringify!(_ACE_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AceType) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACE_HEADER),
      "::",
      stringify!(AceType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AceFlags) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACE_HEADER),
      "::",
      stringify!(AceFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AceSize) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACE_HEADER),
      "::",
      stringify!(AceSize)
    )
  );
}
pub type ACE_HEADER = _ACE_HEADER;
pub type PACE_HEADER = *mut ACE_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_ALLOWED_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__ACCESS_ALLOWED_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_ACCESS_ALLOWED_ACE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACCESS_ALLOWED_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_ACCESS_ALLOWED_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACCESS_ALLOWED_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_ACCESS_ALLOWED_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type ACCESS_ALLOWED_ACE = _ACCESS_ALLOWED_ACE;
pub type PACCESS_ALLOWED_ACE = *mut ACCESS_ALLOWED_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_DENIED_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__ACCESS_DENIED_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_ACCESS_DENIED_ACE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACCESS_DENIED_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_ACCESS_DENIED_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACCESS_DENIED_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_ACCESS_DENIED_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type ACCESS_DENIED_ACE = _ACCESS_DENIED_ACE;
pub type PACCESS_DENIED_ACE = *mut ACCESS_DENIED_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_AUDIT_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_AUDIT_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_AUDIT_ACE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_AUDIT_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_SYSTEM_AUDIT_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_AUDIT_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_AUDIT_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_AUDIT_ACE = _SYSTEM_AUDIT_ACE;
pub type PSYSTEM_AUDIT_ACE = *mut SYSTEM_AUDIT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_ALARM_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_ALARM_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_ALARM_ACE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_ALARM_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_SYSTEM_ALARM_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_ALARM_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_ALARM_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_ALARM_ACE = _SYSTEM_ALARM_ACE;
pub type PSYSTEM_ALARM_ACE = *mut SYSTEM_ALARM_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_RESOURCE_ATTRIBUTE_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_RESOURCE_ATTRIBUTE_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_RESOURCE_ATTRIBUTE_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_SYSTEM_RESOURCE_ATTRIBUTE_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_RESOURCE_ATTRIBUTE_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_RESOURCE_ATTRIBUTE_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_RESOURCE_ATTRIBUTE_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_RESOURCE_ATTRIBUTE_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_RESOURCE_ATTRIBUTE_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_RESOURCE_ATTRIBUTE_ACE = _SYSTEM_RESOURCE_ATTRIBUTE_ACE;
pub type PSYSTEM_RESOURCE_ATTRIBUTE_ACE = *mut _SYSTEM_RESOURCE_ATTRIBUTE_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_SCOPED_POLICY_ID_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_SCOPED_POLICY_ID_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_SCOPED_POLICY_ID_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_SCOPED_POLICY_ID_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_SYSTEM_SCOPED_POLICY_ID_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_SCOPED_POLICY_ID_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_SCOPED_POLICY_ID_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_SCOPED_POLICY_ID_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_SCOPED_POLICY_ID_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_SCOPED_POLICY_ID_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_SCOPED_POLICY_ID_ACE = _SYSTEM_SCOPED_POLICY_ID_ACE;
pub type PSYSTEM_SCOPED_POLICY_ID_ACE = *mut _SYSTEM_SCOPED_POLICY_ID_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_MANDATORY_LABEL_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_MANDATORY_LABEL_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_MANDATORY_LABEL_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_MANDATORY_LABEL_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_SYSTEM_MANDATORY_LABEL_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_MANDATORY_LABEL_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_MANDATORY_LABEL_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_MANDATORY_LABEL_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_MANDATORY_LABEL_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_MANDATORY_LABEL_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_MANDATORY_LABEL_ACE = _SYSTEM_MANDATORY_LABEL_ACE;
pub type PSYSTEM_MANDATORY_LABEL_ACE = *mut _SYSTEM_MANDATORY_LABEL_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_PROCESS_TRUST_LABEL_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_PROCESS_TRUST_LABEL_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_PROCESS_TRUST_LABEL_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_SYSTEM_PROCESS_TRUST_LABEL_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_PROCESS_TRUST_LABEL_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_PROCESS_TRUST_LABEL_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_PROCESS_TRUST_LABEL_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_PROCESS_TRUST_LABEL_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_PROCESS_TRUST_LABEL_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_PROCESS_TRUST_LABEL_ACE = _SYSTEM_PROCESS_TRUST_LABEL_ACE;
pub type PSYSTEM_PROCESS_TRUST_LABEL_ACE = *mut _SYSTEM_PROCESS_TRUST_LABEL_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_ACCESS_FILTER_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_ACCESS_FILTER_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_ACCESS_FILTER_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_ACCESS_FILTER_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_SYSTEM_ACCESS_FILTER_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_ACCESS_FILTER_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_ACCESS_FILTER_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ACCESS_FILTER_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ACCESS_FILTER_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ACCESS_FILTER_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_ACCESS_FILTER_ACE = _SYSTEM_ACCESS_FILTER_ACE;
pub type PSYSTEM_ACCESS_FILTER_ACE = *mut _SYSTEM_ACCESS_FILTER_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_ALLOWED_OBJECT_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub Flags: DWORD,
  pub ObjectType: GUID,
  pub InheritedObjectType: GUID,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__ACCESS_ALLOWED_OBJECT_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_ACCESS_ALLOWED_OBJECT_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACCESS_ALLOWED_OBJECT_ACE>(),
    48usize,
    concat!("Size of: ", stringify!(_ACCESS_ALLOWED_OBJECT_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACCESS_ALLOWED_OBJECT_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_ACCESS_ALLOWED_OBJECT_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_OBJECT_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_OBJECT_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_OBJECT_ACE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectType) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_OBJECT_ACE),
      "::",
      stringify!(ObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InheritedObjectType) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_OBJECT_ACE),
      "::",
      stringify!(InheritedObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_OBJECT_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type ACCESS_ALLOWED_OBJECT_ACE = _ACCESS_ALLOWED_OBJECT_ACE;
pub type PACCESS_ALLOWED_OBJECT_ACE = *mut _ACCESS_ALLOWED_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_DENIED_OBJECT_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub Flags: DWORD,
  pub ObjectType: GUID,
  pub InheritedObjectType: GUID,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__ACCESS_DENIED_OBJECT_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_ACCESS_DENIED_OBJECT_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACCESS_DENIED_OBJECT_ACE>(),
    48usize,
    concat!("Size of: ", stringify!(_ACCESS_DENIED_OBJECT_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACCESS_DENIED_OBJECT_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_ACCESS_DENIED_OBJECT_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_OBJECT_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_OBJECT_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_OBJECT_ACE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectType) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_OBJECT_ACE),
      "::",
      stringify!(ObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InheritedObjectType) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_OBJECT_ACE),
      "::",
      stringify!(InheritedObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_OBJECT_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type ACCESS_DENIED_OBJECT_ACE = _ACCESS_DENIED_OBJECT_ACE;
pub type PACCESS_DENIED_OBJECT_ACE = *mut _ACCESS_DENIED_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_AUDIT_OBJECT_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub Flags: DWORD,
  pub ObjectType: GUID,
  pub InheritedObjectType: GUID,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_AUDIT_OBJECT_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_AUDIT_OBJECT_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_AUDIT_OBJECT_ACE>(),
    48usize,
    concat!("Size of: ", stringify!(_SYSTEM_AUDIT_OBJECT_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_AUDIT_OBJECT_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_AUDIT_OBJECT_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_OBJECT_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_OBJECT_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_OBJECT_ACE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectType) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_OBJECT_ACE),
      "::",
      stringify!(ObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InheritedObjectType) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_OBJECT_ACE),
      "::",
      stringify!(InheritedObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_OBJECT_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_AUDIT_OBJECT_ACE = _SYSTEM_AUDIT_OBJECT_ACE;
pub type PSYSTEM_AUDIT_OBJECT_ACE = *mut _SYSTEM_AUDIT_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_ALARM_OBJECT_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub Flags: DWORD,
  pub ObjectType: GUID,
  pub InheritedObjectType: GUID,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_ALARM_OBJECT_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_ALARM_OBJECT_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_ALARM_OBJECT_ACE>(),
    48usize,
    concat!("Size of: ", stringify!(_SYSTEM_ALARM_OBJECT_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_ALARM_OBJECT_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_ALARM_OBJECT_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_OBJECT_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_OBJECT_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_OBJECT_ACE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectType) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_OBJECT_ACE),
      "::",
      stringify!(ObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InheritedObjectType) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_OBJECT_ACE),
      "::",
      stringify!(InheritedObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_OBJECT_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_ALARM_OBJECT_ACE = _SYSTEM_ALARM_OBJECT_ACE;
pub type PSYSTEM_ALARM_OBJECT_ACE = *mut _SYSTEM_ALARM_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_ALLOWED_CALLBACK_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__ACCESS_ALLOWED_CALLBACK_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_ACCESS_ALLOWED_CALLBACK_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACCESS_ALLOWED_CALLBACK_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_ACCESS_ALLOWED_CALLBACK_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACCESS_ALLOWED_CALLBACK_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_ACCESS_ALLOWED_CALLBACK_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_CALLBACK_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_CALLBACK_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_CALLBACK_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type ACCESS_ALLOWED_CALLBACK_ACE = _ACCESS_ALLOWED_CALLBACK_ACE;
pub type PACCESS_ALLOWED_CALLBACK_ACE = *mut _ACCESS_ALLOWED_CALLBACK_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_DENIED_CALLBACK_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__ACCESS_DENIED_CALLBACK_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_ACCESS_DENIED_CALLBACK_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACCESS_DENIED_CALLBACK_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_ACCESS_DENIED_CALLBACK_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACCESS_DENIED_CALLBACK_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_ACCESS_DENIED_CALLBACK_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_CALLBACK_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_CALLBACK_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_CALLBACK_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type ACCESS_DENIED_CALLBACK_ACE = _ACCESS_DENIED_CALLBACK_ACE;
pub type PACCESS_DENIED_CALLBACK_ACE = *mut _ACCESS_DENIED_CALLBACK_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_AUDIT_CALLBACK_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_AUDIT_CALLBACK_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_AUDIT_CALLBACK_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_AUDIT_CALLBACK_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_SYSTEM_AUDIT_CALLBACK_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_AUDIT_CALLBACK_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_AUDIT_CALLBACK_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_CALLBACK_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_CALLBACK_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_CALLBACK_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_AUDIT_CALLBACK_ACE = _SYSTEM_AUDIT_CALLBACK_ACE;
pub type PSYSTEM_AUDIT_CALLBACK_ACE = *mut _SYSTEM_AUDIT_CALLBACK_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_ALARM_CALLBACK_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_ALARM_CALLBACK_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_ALARM_CALLBACK_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_ALARM_CALLBACK_ACE>(),
    12usize,
    concat!("Size of: ", stringify!(_SYSTEM_ALARM_CALLBACK_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_ALARM_CALLBACK_ACE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_ALARM_CALLBACK_ACE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_CALLBACK_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_CALLBACK_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_CALLBACK_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_ALARM_CALLBACK_ACE = _SYSTEM_ALARM_CALLBACK_ACE;
pub type PSYSTEM_ALARM_CALLBACK_ACE = *mut _SYSTEM_ALARM_CALLBACK_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub Flags: DWORD,
  pub ObjectType: GUID,
  pub InheritedObjectType: GUID,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE>(),
    48usize,
    concat!("Size of: ", stringify!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectType) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(ObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InheritedObjectType) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(InheritedObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
pub type PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = *mut _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub Flags: DWORD,
  pub ObjectType: GUID,
  pub InheritedObjectType: GUID,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__ACCESS_DENIED_CALLBACK_OBJECT_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_ACCESS_DENIED_CALLBACK_OBJECT_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACCESS_DENIED_CALLBACK_OBJECT_ACE>(),
    48usize,
    concat!("Size of: ", stringify!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACCESS_DENIED_CALLBACK_OBJECT_ACE>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectType) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(ObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InheritedObjectType) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(InheritedObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type ACCESS_DENIED_CALLBACK_OBJECT_ACE = _ACCESS_DENIED_CALLBACK_OBJECT_ACE;
pub type PACCESS_DENIED_CALLBACK_OBJECT_ACE = *mut _ACCESS_DENIED_CALLBACK_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub Flags: DWORD,
  pub ObjectType: GUID,
  pub InheritedObjectType: GUID,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE>(),
    48usize,
    concat!("Size of: ", stringify!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectType) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(ObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InheritedObjectType) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(InheritedObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
pub type PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = *mut _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
  pub Header: ACE_HEADER,
  pub Mask: ACCESS_MASK,
  pub Flags: DWORD,
  pub ObjectType: GUID,
  pub InheritedObjectType: GUID,
  pub SidStart: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_ALARM_CALLBACK_OBJECT_ACE() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_ALARM_CALLBACK_OBJECT_ACE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_ALARM_CALLBACK_OBJECT_ACE>(),
    48usize,
    concat!("Size of: ", stringify!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_ALARM_CALLBACK_OBJECT_ACE>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Header) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Header)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Mask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectType) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(ObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InheritedObjectType) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(InheritedObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidStart) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE),
      "::",
      stringify!(SidStart)
    )
  );
}
pub type SYSTEM_ALARM_CALLBACK_OBJECT_ACE = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
pub type PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = *mut _SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
pub const _ACL_INFORMATION_CLASS_AclRevisionInformation: _ACL_INFORMATION_CLASS = 1;
pub const _ACL_INFORMATION_CLASS_AclSizeInformation: _ACL_INFORMATION_CLASS = 2;
pub type _ACL_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_ACL_INFORMATION_CLASS as ACL_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACL_REVISION_INFORMATION {
  pub AclRevision: DWORD,
}
#[test]
fn bindgen_test_layout__ACL_REVISION_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_ACL_REVISION_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACL_REVISION_INFORMATION>(),
    4usize,
    concat!("Size of: ", stringify!(_ACL_REVISION_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACL_REVISION_INFORMATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_ACL_REVISION_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AclRevision) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACL_REVISION_INFORMATION),
      "::",
      stringify!(AclRevision)
    )
  );
}
pub type ACL_REVISION_INFORMATION = _ACL_REVISION_INFORMATION;
pub type PACL_REVISION_INFORMATION = *mut ACL_REVISION_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACL_SIZE_INFORMATION {
  pub AceCount: DWORD,
  pub AclBytesInUse: DWORD,
  pub AclBytesFree: DWORD,
}
#[test]
fn bindgen_test_layout__ACL_SIZE_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_ACL_SIZE_INFORMATION> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACL_SIZE_INFORMATION>(),
    12usize,
    concat!("Size of: ", stringify!(_ACL_SIZE_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACL_SIZE_INFORMATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_ACL_SIZE_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AceCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACL_SIZE_INFORMATION),
      "::",
      stringify!(AceCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AclBytesInUse) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACL_SIZE_INFORMATION),
      "::",
      stringify!(AclBytesInUse)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AclBytesFree) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACL_SIZE_INFORMATION),
      "::",
      stringify!(AclBytesFree)
    )
  );
}
pub type ACL_SIZE_INFORMATION = _ACL_SIZE_INFORMATION;
pub type PACL_SIZE_INFORMATION = *mut ACL_SIZE_INFORMATION;
pub type SECURITY_DESCRIPTOR_CONTROL = WORD;
pub type PSECURITY_DESCRIPTOR_CONTROL = *mut WORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_DESCRIPTOR_RELATIVE {
  pub Revision: BYTE,
  pub Sbz1: BYTE,
  pub Control: SECURITY_DESCRIPTOR_CONTROL,
  pub Owner: DWORD,
  pub Group: DWORD,
  pub Sacl: DWORD,
  pub Dacl: DWORD,
}
#[test]
fn bindgen_test_layout__SECURITY_DESCRIPTOR_RELATIVE() {
  const UNINIT: ::std::mem::MaybeUninit<_SECURITY_DESCRIPTOR_RELATIVE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SECURITY_DESCRIPTOR_RELATIVE>(),
    20usize,
    concat!("Size of: ", stringify!(_SECURITY_DESCRIPTOR_RELATIVE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SECURITY_DESCRIPTOR_RELATIVE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SECURITY_DESCRIPTOR_RELATIVE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Revision) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR_RELATIVE),
      "::",
      stringify!(Revision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sbz1) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR_RELATIVE),
      "::",
      stringify!(Sbz1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Control) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR_RELATIVE),
      "::",
      stringify!(Control)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Owner) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR_RELATIVE),
      "::",
      stringify!(Owner)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Group) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR_RELATIVE),
      "::",
      stringify!(Group)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sacl) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR_RELATIVE),
      "::",
      stringify!(Sacl)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dacl) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR_RELATIVE),
      "::",
      stringify!(Dacl)
    )
  );
}
pub type SECURITY_DESCRIPTOR_RELATIVE = _SECURITY_DESCRIPTOR_RELATIVE;
pub type PISECURITY_DESCRIPTOR_RELATIVE = *mut _SECURITY_DESCRIPTOR_RELATIVE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_DESCRIPTOR {
  pub Revision: BYTE,
  pub Sbz1: BYTE,
  pub Control: SECURITY_DESCRIPTOR_CONTROL,
  pub Owner: PSID,
  pub Group: PSID,
  pub Sacl: PACL,
  pub Dacl: PACL,
}
#[test]
fn bindgen_test_layout__SECURITY_DESCRIPTOR() {
  const UNINIT: ::std::mem::MaybeUninit<_SECURITY_DESCRIPTOR> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SECURITY_DESCRIPTOR>(),
    40usize,
    concat!("Size of: ", stringify!(_SECURITY_DESCRIPTOR))
  );
  assert_eq!(
    ::std::mem::align_of::<_SECURITY_DESCRIPTOR>(),
    8usize,
    concat!("Alignment of ", stringify!(_SECURITY_DESCRIPTOR))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Revision) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR),
      "::",
      stringify!(Revision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sbz1) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR),
      "::",
      stringify!(Sbz1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Control) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR),
      "::",
      stringify!(Control)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Owner) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR),
      "::",
      stringify!(Owner)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Group) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR),
      "::",
      stringify!(Group)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sacl) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR),
      "::",
      stringify!(Sacl)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dacl) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_DESCRIPTOR),
      "::",
      stringify!(Dacl)
    )
  );
}
pub type SECURITY_DESCRIPTOR = _SECURITY_DESCRIPTOR;
pub type PISECURITY_DESCRIPTOR = *mut _SECURITY_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_OBJECT_AI_PARAMS {
  pub Size: DWORD,
  pub ConstraintMask: DWORD,
}
#[test]
fn bindgen_test_layout__SECURITY_OBJECT_AI_PARAMS() {
  const UNINIT: ::std::mem::MaybeUninit<_SECURITY_OBJECT_AI_PARAMS> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SECURITY_OBJECT_AI_PARAMS>(),
    8usize,
    concat!("Size of: ", stringify!(_SECURITY_OBJECT_AI_PARAMS))
  );
  assert_eq!(
    ::std::mem::align_of::<_SECURITY_OBJECT_AI_PARAMS>(),
    4usize,
    concat!("Alignment of ", stringify!(_SECURITY_OBJECT_AI_PARAMS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_OBJECT_AI_PARAMS),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ConstraintMask) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_OBJECT_AI_PARAMS),
      "::",
      stringify!(ConstraintMask)
    )
  );
}
pub type SECURITY_OBJECT_AI_PARAMS = _SECURITY_OBJECT_AI_PARAMS;
pub type PSECURITY_OBJECT_AI_PARAMS = *mut _SECURITY_OBJECT_AI_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OBJECT_TYPE_LIST {
  pub Level: WORD,
  pub Sbz: WORD,
  pub ObjectType: *mut GUID,
}
#[test]
fn bindgen_test_layout__OBJECT_TYPE_LIST() {
  const UNINIT: ::std::mem::MaybeUninit<_OBJECT_TYPE_LIST> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_OBJECT_TYPE_LIST>(),
    16usize,
    concat!("Size of: ", stringify!(_OBJECT_TYPE_LIST))
  );
  assert_eq!(
    ::std::mem::align_of::<_OBJECT_TYPE_LIST>(),
    8usize,
    concat!("Alignment of ", stringify!(_OBJECT_TYPE_LIST))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Level) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_OBJECT_TYPE_LIST),
      "::",
      stringify!(Level)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sbz) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_OBJECT_TYPE_LIST),
      "::",
      stringify!(Sbz)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectType) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_OBJECT_TYPE_LIST),
      "::",
      stringify!(ObjectType)
    )
  );
}
pub type OBJECT_TYPE_LIST = _OBJECT_TYPE_LIST;
pub type POBJECT_TYPE_LIST = *mut _OBJECT_TYPE_LIST;
pub const _AUDIT_EVENT_TYPE_AuditEventObjectAccess: _AUDIT_EVENT_TYPE = 0;
pub const _AUDIT_EVENT_TYPE_AuditEventDirectoryServiceAccess: _AUDIT_EVENT_TYPE = 1;
pub type _AUDIT_EVENT_TYPE = ::std::os::raw::c_int;
pub use self::_AUDIT_EVENT_TYPE as AUDIT_EVENT_TYPE;
pub type PAUDIT_EVENT_TYPE = *mut _AUDIT_EVENT_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PRIVILEGE_SET {
  pub PrivilegeCount: DWORD,
  pub Control: DWORD,
  pub Privilege: [LUID_AND_ATTRIBUTES; 1usize],
}
#[test]
fn bindgen_test_layout__PRIVILEGE_SET() {
  const UNINIT: ::std::mem::MaybeUninit<_PRIVILEGE_SET> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PRIVILEGE_SET>(),
    20usize,
    concat!("Size of: ", stringify!(_PRIVILEGE_SET))
  );
  assert_eq!(
    ::std::mem::align_of::<_PRIVILEGE_SET>(),
    4usize,
    concat!("Alignment of ", stringify!(_PRIVILEGE_SET))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrivilegeCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PRIVILEGE_SET),
      "::",
      stringify!(PrivilegeCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Control) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_PRIVILEGE_SET),
      "::",
      stringify!(Control)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Privilege) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_PRIVILEGE_SET),
      "::",
      stringify!(Privilege)
    )
  );
}
pub type PRIVILEGE_SET = _PRIVILEGE_SET;
pub type PPRIVILEGE_SET = *mut _PRIVILEGE_SET;
pub const _ACCESS_REASON_TYPE_AccessReasonNone: _ACCESS_REASON_TYPE = 0;
pub const _ACCESS_REASON_TYPE_AccessReasonAllowedAce: _ACCESS_REASON_TYPE = 65536;
pub const _ACCESS_REASON_TYPE_AccessReasonDeniedAce: _ACCESS_REASON_TYPE = 131072;
pub const _ACCESS_REASON_TYPE_AccessReasonAllowedParentAce: _ACCESS_REASON_TYPE = 196608;
pub const _ACCESS_REASON_TYPE_AccessReasonDeniedParentAce: _ACCESS_REASON_TYPE = 262144;
pub const _ACCESS_REASON_TYPE_AccessReasonNotGrantedByCape: _ACCESS_REASON_TYPE = 327680;
pub const _ACCESS_REASON_TYPE_AccessReasonNotGrantedByParentCape: _ACCESS_REASON_TYPE = 393216;
pub const _ACCESS_REASON_TYPE_AccessReasonNotGrantedToAppContainer: _ACCESS_REASON_TYPE = 458752;
pub const _ACCESS_REASON_TYPE_AccessReasonMissingPrivilege: _ACCESS_REASON_TYPE = 1048576;
pub const _ACCESS_REASON_TYPE_AccessReasonFromPrivilege: _ACCESS_REASON_TYPE = 2097152;
pub const _ACCESS_REASON_TYPE_AccessReasonIntegrityLevel: _ACCESS_REASON_TYPE = 3145728;
pub const _ACCESS_REASON_TYPE_AccessReasonOwnership: _ACCESS_REASON_TYPE = 4194304;
pub const _ACCESS_REASON_TYPE_AccessReasonNullDacl: _ACCESS_REASON_TYPE = 5242880;
pub const _ACCESS_REASON_TYPE_AccessReasonEmptyDacl: _ACCESS_REASON_TYPE = 6291456;
pub const _ACCESS_REASON_TYPE_AccessReasonNoSD: _ACCESS_REASON_TYPE = 7340032;
pub const _ACCESS_REASON_TYPE_AccessReasonNoGrant: _ACCESS_REASON_TYPE = 8388608;
pub const _ACCESS_REASON_TYPE_AccessReasonTrustLabel: _ACCESS_REASON_TYPE = 9437184;
pub const _ACCESS_REASON_TYPE_AccessReasonFilterAce: _ACCESS_REASON_TYPE = 10485760;
pub type _ACCESS_REASON_TYPE = ::std::os::raw::c_int;
pub use self::_ACCESS_REASON_TYPE as ACCESS_REASON_TYPE;
pub type ACCESS_REASON = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_REASONS {
  pub Data: [ACCESS_REASON; 32usize],
}
#[test]
fn bindgen_test_layout__ACCESS_REASONS() {
  const UNINIT: ::std::mem::MaybeUninit<_ACCESS_REASONS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACCESS_REASONS>(),
    128usize,
    concat!("Size of: ", stringify!(_ACCESS_REASONS))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACCESS_REASONS>(),
    4usize,
    concat!("Alignment of ", stringify!(_ACCESS_REASONS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACCESS_REASONS),
      "::",
      stringify!(Data)
    )
  );
}
pub type ACCESS_REASONS = _ACCESS_REASONS;
pub type PACCESS_REASONS = *mut _ACCESS_REASONS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SE_SECURITY_DESCRIPTOR {
  pub Size: DWORD,
  pub Flags: DWORD,
  pub SecurityDescriptor: PSECURITY_DESCRIPTOR,
}
#[test]
fn bindgen_test_layout__SE_SECURITY_DESCRIPTOR() {
  const UNINIT: ::std::mem::MaybeUninit<_SE_SECURITY_DESCRIPTOR> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SE_SECURITY_DESCRIPTOR>(),
    16usize,
    concat!("Size of: ", stringify!(_SE_SECURITY_DESCRIPTOR))
  );
  assert_eq!(
    ::std::mem::align_of::<_SE_SECURITY_DESCRIPTOR>(),
    8usize,
    concat!("Alignment of ", stringify!(_SE_SECURITY_DESCRIPTOR))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_SECURITY_DESCRIPTOR),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_SECURITY_DESCRIPTOR),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SecurityDescriptor) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_SECURITY_DESCRIPTOR),
      "::",
      stringify!(SecurityDescriptor)
    )
  );
}
pub type SE_SECURITY_DESCRIPTOR = _SE_SECURITY_DESCRIPTOR;
pub type PSE_SECURITY_DESCRIPTOR = *mut _SE_SECURITY_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SE_ACCESS_REQUEST {
  pub Size: DWORD,
  pub SeSecurityDescriptor: PSE_SECURITY_DESCRIPTOR,
  pub DesiredAccess: ACCESS_MASK,
  pub PreviouslyGrantedAccess: ACCESS_MASK,
  pub PrincipalSelfSid: PSID,
  pub GenericMapping: PGENERIC_MAPPING,
  pub ObjectTypeListCount: DWORD,
  pub ObjectTypeList: POBJECT_TYPE_LIST,
}
#[test]
fn bindgen_test_layout__SE_ACCESS_REQUEST() {
  const UNINIT: ::std::mem::MaybeUninit<_SE_ACCESS_REQUEST> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SE_ACCESS_REQUEST>(),
    56usize,
    concat!("Size of: ", stringify!(_SE_ACCESS_REQUEST))
  );
  assert_eq!(
    ::std::mem::align_of::<_SE_ACCESS_REQUEST>(),
    8usize,
    concat!("Alignment of ", stringify!(_SE_ACCESS_REQUEST))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REQUEST),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SeSecurityDescriptor) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REQUEST),
      "::",
      stringify!(SeSecurityDescriptor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DesiredAccess) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REQUEST),
      "::",
      stringify!(DesiredAccess)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PreviouslyGrantedAccess) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REQUEST),
      "::",
      stringify!(PreviouslyGrantedAccess)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrincipalSelfSid) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REQUEST),
      "::",
      stringify!(PrincipalSelfSid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GenericMapping) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REQUEST),
      "::",
      stringify!(GenericMapping)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectTypeListCount) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REQUEST),
      "::",
      stringify!(ObjectTypeListCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectTypeList) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REQUEST),
      "::",
      stringify!(ObjectTypeList)
    )
  );
}
pub type SE_ACCESS_REQUEST = _SE_ACCESS_REQUEST;
pub type PSE_ACCESS_REQUEST = *mut _SE_ACCESS_REQUEST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SE_ACCESS_REPLY {
  pub Size: DWORD,
  pub ResultListCount: DWORD,
  pub GrantedAccess: PACCESS_MASK,
  pub AccessStatus: PDWORD,
  pub AccessReason: PACCESS_REASONS,
  pub Privileges: *mut PPRIVILEGE_SET,
}
#[test]
fn bindgen_test_layout__SE_ACCESS_REPLY() {
  const UNINIT: ::std::mem::MaybeUninit<_SE_ACCESS_REPLY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SE_ACCESS_REPLY>(),
    40usize,
    concat!("Size of: ", stringify!(_SE_ACCESS_REPLY))
  );
  assert_eq!(
    ::std::mem::align_of::<_SE_ACCESS_REPLY>(),
    8usize,
    concat!("Alignment of ", stringify!(_SE_ACCESS_REPLY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REPLY),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ResultListCount) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REPLY),
      "::",
      stringify!(ResultListCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GrantedAccess) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REPLY),
      "::",
      stringify!(GrantedAccess)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AccessStatus) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REPLY),
      "::",
      stringify!(AccessStatus)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AccessReason) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REPLY),
      "::",
      stringify!(AccessReason)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Privileges) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_ACCESS_REPLY),
      "::",
      stringify!(Privileges)
    )
  );
}
pub type SE_ACCESS_REPLY = _SE_ACCESS_REPLY;
pub type PSE_ACCESS_REPLY = *mut _SE_ACCESS_REPLY;
pub const _SECURITY_IMPERSONATION_LEVEL_SecurityAnonymous: _SECURITY_IMPERSONATION_LEVEL = 0;
pub const _SECURITY_IMPERSONATION_LEVEL_SecurityIdentification: _SECURITY_IMPERSONATION_LEVEL = 1;
pub const _SECURITY_IMPERSONATION_LEVEL_SecurityImpersonation: _SECURITY_IMPERSONATION_LEVEL = 2;
pub const _SECURITY_IMPERSONATION_LEVEL_SecurityDelegation: _SECURITY_IMPERSONATION_LEVEL = 3;
pub type _SECURITY_IMPERSONATION_LEVEL = ::std::os::raw::c_int;
pub use self::_SECURITY_IMPERSONATION_LEVEL as SECURITY_IMPERSONATION_LEVEL;
pub type PSECURITY_IMPERSONATION_LEVEL = *mut _SECURITY_IMPERSONATION_LEVEL;
pub const _TOKEN_TYPE_TokenPrimary: _TOKEN_TYPE = 1;
pub const _TOKEN_TYPE_TokenImpersonation: _TOKEN_TYPE = 2;
pub type _TOKEN_TYPE = ::std::os::raw::c_int;
pub use self::_TOKEN_TYPE as TOKEN_TYPE;
pub type PTOKEN_TYPE = *mut TOKEN_TYPE;
pub const _TOKEN_ELEVATION_TYPE_TokenElevationTypeDefault: _TOKEN_ELEVATION_TYPE = 1;
pub const _TOKEN_ELEVATION_TYPE_TokenElevationTypeFull: _TOKEN_ELEVATION_TYPE = 2;
pub const _TOKEN_ELEVATION_TYPE_TokenElevationTypeLimited: _TOKEN_ELEVATION_TYPE = 3;
pub type _TOKEN_ELEVATION_TYPE = ::std::os::raw::c_int;
pub use self::_TOKEN_ELEVATION_TYPE as TOKEN_ELEVATION_TYPE;
pub type PTOKEN_ELEVATION_TYPE = *mut _TOKEN_ELEVATION_TYPE;
pub const _TOKEN_INFORMATION_CLASS_TokenUser: _TOKEN_INFORMATION_CLASS = 1;
pub const _TOKEN_INFORMATION_CLASS_TokenGroups: _TOKEN_INFORMATION_CLASS = 2;
pub const _TOKEN_INFORMATION_CLASS_TokenPrivileges: _TOKEN_INFORMATION_CLASS = 3;
pub const _TOKEN_INFORMATION_CLASS_TokenOwner: _TOKEN_INFORMATION_CLASS = 4;
pub const _TOKEN_INFORMATION_CLASS_TokenPrimaryGroup: _TOKEN_INFORMATION_CLASS = 5;
pub const _TOKEN_INFORMATION_CLASS_TokenDefaultDacl: _TOKEN_INFORMATION_CLASS = 6;
pub const _TOKEN_INFORMATION_CLASS_TokenSource: _TOKEN_INFORMATION_CLASS = 7;
pub const _TOKEN_INFORMATION_CLASS_TokenType: _TOKEN_INFORMATION_CLASS = 8;
pub const _TOKEN_INFORMATION_CLASS_TokenImpersonationLevel: _TOKEN_INFORMATION_CLASS = 9;
pub const _TOKEN_INFORMATION_CLASS_TokenStatistics: _TOKEN_INFORMATION_CLASS = 10;
pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedSids: _TOKEN_INFORMATION_CLASS = 11;
pub const _TOKEN_INFORMATION_CLASS_TokenSessionId: _TOKEN_INFORMATION_CLASS = 12;
pub const _TOKEN_INFORMATION_CLASS_TokenGroupsAndPrivileges: _TOKEN_INFORMATION_CLASS = 13;
pub const _TOKEN_INFORMATION_CLASS_TokenSessionReference: _TOKEN_INFORMATION_CLASS = 14;
pub const _TOKEN_INFORMATION_CLASS_TokenSandBoxInert: _TOKEN_INFORMATION_CLASS = 15;
pub const _TOKEN_INFORMATION_CLASS_TokenAuditPolicy: _TOKEN_INFORMATION_CLASS = 16;
pub const _TOKEN_INFORMATION_CLASS_TokenOrigin: _TOKEN_INFORMATION_CLASS = 17;
pub const _TOKEN_INFORMATION_CLASS_TokenElevationType: _TOKEN_INFORMATION_CLASS = 18;
pub const _TOKEN_INFORMATION_CLASS_TokenLinkedToken: _TOKEN_INFORMATION_CLASS = 19;
pub const _TOKEN_INFORMATION_CLASS_TokenElevation: _TOKEN_INFORMATION_CLASS = 20;
pub const _TOKEN_INFORMATION_CLASS_TokenHasRestrictions: _TOKEN_INFORMATION_CLASS = 21;
pub const _TOKEN_INFORMATION_CLASS_TokenAccessInformation: _TOKEN_INFORMATION_CLASS = 22;
pub const _TOKEN_INFORMATION_CLASS_TokenVirtualizationAllowed: _TOKEN_INFORMATION_CLASS = 23;
pub const _TOKEN_INFORMATION_CLASS_TokenVirtualizationEnabled: _TOKEN_INFORMATION_CLASS = 24;
pub const _TOKEN_INFORMATION_CLASS_TokenIntegrityLevel: _TOKEN_INFORMATION_CLASS = 25;
pub const _TOKEN_INFORMATION_CLASS_TokenUIAccess: _TOKEN_INFORMATION_CLASS = 26;
pub const _TOKEN_INFORMATION_CLASS_TokenMandatoryPolicy: _TOKEN_INFORMATION_CLASS = 27;
pub const _TOKEN_INFORMATION_CLASS_TokenLogonSid: _TOKEN_INFORMATION_CLASS = 28;
pub const _TOKEN_INFORMATION_CLASS_TokenIsAppContainer: _TOKEN_INFORMATION_CLASS = 29;
pub const _TOKEN_INFORMATION_CLASS_TokenCapabilities: _TOKEN_INFORMATION_CLASS = 30;
pub const _TOKEN_INFORMATION_CLASS_TokenAppContainerSid: _TOKEN_INFORMATION_CLASS = 31;
pub const _TOKEN_INFORMATION_CLASS_TokenAppContainerNumber: _TOKEN_INFORMATION_CLASS = 32;
pub const _TOKEN_INFORMATION_CLASS_TokenUserClaimAttributes: _TOKEN_INFORMATION_CLASS = 33;
pub const _TOKEN_INFORMATION_CLASS_TokenDeviceClaimAttributes: _TOKEN_INFORMATION_CLASS = 34;
pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedUserClaimAttributes: _TOKEN_INFORMATION_CLASS =
  35;
pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedDeviceClaimAttributes: _TOKEN_INFORMATION_CLASS =
  36;
pub const _TOKEN_INFORMATION_CLASS_TokenDeviceGroups: _TOKEN_INFORMATION_CLASS = 37;
pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedDeviceGroups: _TOKEN_INFORMATION_CLASS = 38;
pub const _TOKEN_INFORMATION_CLASS_TokenSecurityAttributes: _TOKEN_INFORMATION_CLASS = 39;
pub const _TOKEN_INFORMATION_CLASS_TokenIsRestricted: _TOKEN_INFORMATION_CLASS = 40;
pub const _TOKEN_INFORMATION_CLASS_TokenProcessTrustLevel: _TOKEN_INFORMATION_CLASS = 41;
pub const _TOKEN_INFORMATION_CLASS_TokenPrivateNameSpace: _TOKEN_INFORMATION_CLASS = 42;
pub const _TOKEN_INFORMATION_CLASS_TokenSingletonAttributes: _TOKEN_INFORMATION_CLASS = 43;
pub const _TOKEN_INFORMATION_CLASS_TokenBnoIsolation: _TOKEN_INFORMATION_CLASS = 44;
pub const _TOKEN_INFORMATION_CLASS_TokenChildProcessFlags: _TOKEN_INFORMATION_CLASS = 45;
pub const _TOKEN_INFORMATION_CLASS_TokenIsLessPrivilegedAppContainer: _TOKEN_INFORMATION_CLASS = 46;
pub const _TOKEN_INFORMATION_CLASS_TokenIsSandboxed: _TOKEN_INFORMATION_CLASS = 47;
pub const _TOKEN_INFORMATION_CLASS_TokenIsAppSilo: _TOKEN_INFORMATION_CLASS = 48;
pub const _TOKEN_INFORMATION_CLASS_MaxTokenInfoClass: _TOKEN_INFORMATION_CLASS = 49;
pub type _TOKEN_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_TOKEN_INFORMATION_CLASS as TOKEN_INFORMATION_CLASS;
pub type PTOKEN_INFORMATION_CLASS = *mut _TOKEN_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_USER {
  pub User: SID_AND_ATTRIBUTES,
}
#[test]
fn bindgen_test_layout__TOKEN_USER() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_USER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_USER>(),
    16usize,
    concat!("Size of: ", stringify!(_TOKEN_USER))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_USER>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_USER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).User) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_USER),
      "::",
      stringify!(User)
    )
  );
}
pub type TOKEN_USER = _TOKEN_USER;
pub type PTOKEN_USER = *mut _TOKEN_USER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SE_TOKEN_USER {
  pub __bindgen_anon_1: _SE_TOKEN_USER__bindgen_ty_1,
  pub __bindgen_anon_2: _SE_TOKEN_USER__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SE_TOKEN_USER__bindgen_ty_1 {
  pub TokenUser: TOKEN_USER,
  pub User: SID_AND_ATTRIBUTES,
}
#[test]
fn bindgen_test_layout__SE_TOKEN_USER__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_SE_TOKEN_USER__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SE_TOKEN_USER__bindgen_ty_1>(),
    16usize,
    concat!("Size of: ", stringify!(_SE_TOKEN_USER__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_SE_TOKEN_USER__bindgen_ty_1>(),
    8usize,
    concat!("Alignment of ", stringify!(_SE_TOKEN_USER__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TokenUser) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_TOKEN_USER__bindgen_ty_1),
      "::",
      stringify!(TokenUser)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).User) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_TOKEN_USER__bindgen_ty_1),
      "::",
      stringify!(User)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SE_TOKEN_USER__bindgen_ty_2 {
  pub Sid: SID,
  pub Buffer: [BYTE; 68usize],
}
#[test]
fn bindgen_test_layout__SE_TOKEN_USER__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<_SE_TOKEN_USER__bindgen_ty_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SE_TOKEN_USER__bindgen_ty_2>(),
    68usize,
    concat!("Size of: ", stringify!(_SE_TOKEN_USER__bindgen_ty_2))
  );
  assert_eq!(
    ::std::mem::align_of::<_SE_TOKEN_USER__bindgen_ty_2>(),
    4usize,
    concat!("Alignment of ", stringify!(_SE_TOKEN_USER__bindgen_ty_2))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_TOKEN_USER__bindgen_ty_2),
      "::",
      stringify!(Sid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_TOKEN_USER__bindgen_ty_2),
      "::",
      stringify!(Buffer)
    )
  );
}
#[test]
fn bindgen_test_layout__SE_TOKEN_USER() {
  assert_eq!(
    ::std::mem::size_of::<_SE_TOKEN_USER>(),
    88usize,
    concat!("Size of: ", stringify!(_SE_TOKEN_USER))
  );
  assert_eq!(
    ::std::mem::align_of::<_SE_TOKEN_USER>(),
    8usize,
    concat!("Alignment of ", stringify!(_SE_TOKEN_USER))
  );
}
pub type SE_TOKEN_USER = _SE_TOKEN_USER;
pub type PSE_TOKEN_USER = _SE_TOKEN_USER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_GROUPS {
  pub GroupCount: DWORD,
  pub Groups: [SID_AND_ATTRIBUTES; 1usize],
}
#[test]
fn bindgen_test_layout__TOKEN_GROUPS() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_GROUPS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_GROUPS>(),
    24usize,
    concat!("Size of: ", stringify!(_TOKEN_GROUPS))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_GROUPS>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_GROUPS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS),
      "::",
      stringify!(GroupCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Groups) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS),
      "::",
      stringify!(Groups)
    )
  );
}
pub type TOKEN_GROUPS = _TOKEN_GROUPS;
pub type PTOKEN_GROUPS = *mut _TOKEN_GROUPS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TOKEN_PRIVILEGES {
  pub PrivilegeCount: DWORD,
  pub Privileges: [LUID_AND_ATTRIBUTES; 1usize],
}
#[test]
fn bindgen_test_layout__TOKEN_PRIVILEGES() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_PRIVILEGES> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_PRIVILEGES>(),
    16usize,
    concat!("Size of: ", stringify!(_TOKEN_PRIVILEGES))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_PRIVILEGES>(),
    4usize,
    concat!("Alignment of ", stringify!(_TOKEN_PRIVILEGES))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrivilegeCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_PRIVILEGES),
      "::",
      stringify!(PrivilegeCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Privileges) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_PRIVILEGES),
      "::",
      stringify!(Privileges)
    )
  );
}
pub type TOKEN_PRIVILEGES = _TOKEN_PRIVILEGES;
pub type PTOKEN_PRIVILEGES = *mut _TOKEN_PRIVILEGES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_OWNER {
  pub Owner: PSID,
}
#[test]
fn bindgen_test_layout__TOKEN_OWNER() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_OWNER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_OWNER>(),
    8usize,
    concat!("Size of: ", stringify!(_TOKEN_OWNER))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_OWNER>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_OWNER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Owner) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_OWNER),
      "::",
      stringify!(Owner)
    )
  );
}
pub type TOKEN_OWNER = _TOKEN_OWNER;
pub type PTOKEN_OWNER = *mut _TOKEN_OWNER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_PRIMARY_GROUP {
  pub PrimaryGroup: PSID,
}
#[test]
fn bindgen_test_layout__TOKEN_PRIMARY_GROUP() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_PRIMARY_GROUP> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_PRIMARY_GROUP>(),
    8usize,
    concat!("Size of: ", stringify!(_TOKEN_PRIMARY_GROUP))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_PRIMARY_GROUP>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_PRIMARY_GROUP))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrimaryGroup) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_PRIMARY_GROUP),
      "::",
      stringify!(PrimaryGroup)
    )
  );
}
pub type TOKEN_PRIMARY_GROUP = _TOKEN_PRIMARY_GROUP;
pub type PTOKEN_PRIMARY_GROUP = *mut _TOKEN_PRIMARY_GROUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_DEFAULT_DACL {
  pub DefaultDacl: PACL,
}
#[test]
fn bindgen_test_layout__TOKEN_DEFAULT_DACL() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_DEFAULT_DACL> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_DEFAULT_DACL>(),
    8usize,
    concat!("Size of: ", stringify!(_TOKEN_DEFAULT_DACL))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_DEFAULT_DACL>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_DEFAULT_DACL))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DefaultDacl) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_DEFAULT_DACL),
      "::",
      stringify!(DefaultDacl)
    )
  );
}
pub type TOKEN_DEFAULT_DACL = _TOKEN_DEFAULT_DACL;
pub type PTOKEN_DEFAULT_DACL = *mut _TOKEN_DEFAULT_DACL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_USER_CLAIMS {
  pub UserClaims: PCLAIMS_BLOB,
}
#[test]
fn bindgen_test_layout__TOKEN_USER_CLAIMS() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_USER_CLAIMS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_USER_CLAIMS>(),
    8usize,
    concat!("Size of: ", stringify!(_TOKEN_USER_CLAIMS))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_USER_CLAIMS>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_USER_CLAIMS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UserClaims) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_USER_CLAIMS),
      "::",
      stringify!(UserClaims)
    )
  );
}
pub type TOKEN_USER_CLAIMS = _TOKEN_USER_CLAIMS;
pub type PTOKEN_USER_CLAIMS = *mut _TOKEN_USER_CLAIMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_DEVICE_CLAIMS {
  pub DeviceClaims: PCLAIMS_BLOB,
}
#[test]
fn bindgen_test_layout__TOKEN_DEVICE_CLAIMS() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_DEVICE_CLAIMS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_DEVICE_CLAIMS>(),
    8usize,
    concat!("Size of: ", stringify!(_TOKEN_DEVICE_CLAIMS))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_DEVICE_CLAIMS>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_DEVICE_CLAIMS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DeviceClaims) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_DEVICE_CLAIMS),
      "::",
      stringify!(DeviceClaims)
    )
  );
}
pub type TOKEN_DEVICE_CLAIMS = _TOKEN_DEVICE_CLAIMS;
pub type PTOKEN_DEVICE_CLAIMS = *mut _TOKEN_DEVICE_CLAIMS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TOKEN_GROUPS_AND_PRIVILEGES {
  pub SidCount: DWORD,
  pub SidLength: DWORD,
  pub Sids: PSID_AND_ATTRIBUTES,
  pub RestrictedSidCount: DWORD,
  pub RestrictedSidLength: DWORD,
  pub RestrictedSids: PSID_AND_ATTRIBUTES,
  pub PrivilegeCount: DWORD,
  pub PrivilegeLength: DWORD,
  pub Privileges: PLUID_AND_ATTRIBUTES,
  pub AuthenticationId: LUID,
}
#[test]
fn bindgen_test_layout__TOKEN_GROUPS_AND_PRIVILEGES() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_GROUPS_AND_PRIVILEGES> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_GROUPS_AND_PRIVILEGES>(),
    56usize,
    concat!("Size of: ", stringify!(_TOKEN_GROUPS_AND_PRIVILEGES))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_GROUPS_AND_PRIVILEGES>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_GROUPS_AND_PRIVILEGES))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS_AND_PRIVILEGES),
      "::",
      stringify!(SidCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidLength) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS_AND_PRIVILEGES),
      "::",
      stringify!(SidLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sids) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS_AND_PRIVILEGES),
      "::",
      stringify!(Sids)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RestrictedSidCount) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS_AND_PRIVILEGES),
      "::",
      stringify!(RestrictedSidCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RestrictedSidLength) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS_AND_PRIVILEGES),
      "::",
      stringify!(RestrictedSidLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RestrictedSids) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS_AND_PRIVILEGES),
      "::",
      stringify!(RestrictedSids)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrivilegeCount) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS_AND_PRIVILEGES),
      "::",
      stringify!(PrivilegeCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrivilegeLength) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS_AND_PRIVILEGES),
      "::",
      stringify!(PrivilegeLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Privileges) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS_AND_PRIVILEGES),
      "::",
      stringify!(Privileges)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AuthenticationId) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_GROUPS_AND_PRIVILEGES),
      "::",
      stringify!(AuthenticationId)
    )
  );
}
pub type TOKEN_GROUPS_AND_PRIVILEGES = _TOKEN_GROUPS_AND_PRIVILEGES;
pub type PTOKEN_GROUPS_AND_PRIVILEGES = *mut _TOKEN_GROUPS_AND_PRIVILEGES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_LINKED_TOKEN {
  pub LinkedToken: HANDLE,
}
#[test]
fn bindgen_test_layout__TOKEN_LINKED_TOKEN() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_LINKED_TOKEN> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_LINKED_TOKEN>(),
    8usize,
    concat!("Size of: ", stringify!(_TOKEN_LINKED_TOKEN))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_LINKED_TOKEN>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_LINKED_TOKEN))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LinkedToken) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_LINKED_TOKEN),
      "::",
      stringify!(LinkedToken)
    )
  );
}
pub type TOKEN_LINKED_TOKEN = _TOKEN_LINKED_TOKEN;
pub type PTOKEN_LINKED_TOKEN = *mut _TOKEN_LINKED_TOKEN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_ELEVATION {
  pub TokenIsElevated: DWORD,
}
#[test]
fn bindgen_test_layout__TOKEN_ELEVATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_ELEVATION> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_ELEVATION>(),
    4usize,
    concat!("Size of: ", stringify!(_TOKEN_ELEVATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_ELEVATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_TOKEN_ELEVATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TokenIsElevated) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ELEVATION),
      "::",
      stringify!(TokenIsElevated)
    )
  );
}
pub type TOKEN_ELEVATION = _TOKEN_ELEVATION;
pub type PTOKEN_ELEVATION = *mut _TOKEN_ELEVATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_MANDATORY_LABEL {
  pub Label: SID_AND_ATTRIBUTES,
}
#[test]
fn bindgen_test_layout__TOKEN_MANDATORY_LABEL() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_MANDATORY_LABEL> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_MANDATORY_LABEL>(),
    16usize,
    concat!("Size of: ", stringify!(_TOKEN_MANDATORY_LABEL))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_MANDATORY_LABEL>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_MANDATORY_LABEL))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Label) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_MANDATORY_LABEL),
      "::",
      stringify!(Label)
    )
  );
}
pub type TOKEN_MANDATORY_LABEL = _TOKEN_MANDATORY_LABEL;
pub type PTOKEN_MANDATORY_LABEL = *mut _TOKEN_MANDATORY_LABEL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_MANDATORY_POLICY {
  pub Policy: DWORD,
}
#[test]
fn bindgen_test_layout__TOKEN_MANDATORY_POLICY() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_MANDATORY_POLICY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_MANDATORY_POLICY>(),
    4usize,
    concat!("Size of: ", stringify!(_TOKEN_MANDATORY_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_MANDATORY_POLICY>(),
    4usize,
    concat!("Alignment of ", stringify!(_TOKEN_MANDATORY_POLICY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Policy) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_MANDATORY_POLICY),
      "::",
      stringify!(Policy)
    )
  );
}
pub type TOKEN_MANDATORY_POLICY = _TOKEN_MANDATORY_POLICY;
pub type PTOKEN_MANDATORY_POLICY = *mut _TOKEN_MANDATORY_POLICY;
pub type PSECURITY_ATTRIBUTES_OPAQUE = PVOID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TOKEN_ACCESS_INFORMATION {
  pub SidHash: PSID_AND_ATTRIBUTES_HASH,
  pub RestrictedSidHash: PSID_AND_ATTRIBUTES_HASH,
  pub Privileges: PTOKEN_PRIVILEGES,
  pub AuthenticationId: LUID,
  pub TokenType: TOKEN_TYPE,
  pub ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
  pub MandatoryPolicy: TOKEN_MANDATORY_POLICY,
  pub Flags: DWORD,
  pub AppContainerNumber: DWORD,
  pub PackageSid: PSID,
  pub CapabilitiesHash: PSID_AND_ATTRIBUTES_HASH,
  pub TrustLevelSid: PSID,
  pub SecurityAttributes: PSECURITY_ATTRIBUTES_OPAQUE,
}
#[test]
fn bindgen_test_layout__TOKEN_ACCESS_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_ACCESS_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_ACCESS_INFORMATION>(),
    88usize,
    concat!("Size of: ", stringify!(_TOKEN_ACCESS_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_ACCESS_INFORMATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_ACCESS_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidHash) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(SidHash)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RestrictedSidHash) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(RestrictedSidHash)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Privileges) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(Privileges)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AuthenticationId) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(AuthenticationId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TokenType) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(TokenType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImpersonationLevel) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(ImpersonationLevel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MandatoryPolicy) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(MandatoryPolicy)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AppContainerNumber) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(AppContainerNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PackageSid) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(PackageSid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CapabilitiesHash) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(CapabilitiesHash)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TrustLevelSid) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(TrustLevelSid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SecurityAttributes) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ACCESS_INFORMATION),
      "::",
      stringify!(SecurityAttributes)
    )
  );
}
pub type TOKEN_ACCESS_INFORMATION = _TOKEN_ACCESS_INFORMATION;
pub type PTOKEN_ACCESS_INFORMATION = *mut _TOKEN_ACCESS_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_AUDIT_POLICY {
  pub PerUserPolicy: [BYTE; 30usize],
}
#[test]
fn bindgen_test_layout__TOKEN_AUDIT_POLICY() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_AUDIT_POLICY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_AUDIT_POLICY>(),
    30usize,
    concat!("Size of: ", stringify!(_TOKEN_AUDIT_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_AUDIT_POLICY>(),
    1usize,
    concat!("Alignment of ", stringify!(_TOKEN_AUDIT_POLICY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PerUserPolicy) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_AUDIT_POLICY),
      "::",
      stringify!(PerUserPolicy)
    )
  );
}
pub type TOKEN_AUDIT_POLICY = _TOKEN_AUDIT_POLICY;
pub type PTOKEN_AUDIT_POLICY = *mut _TOKEN_AUDIT_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TOKEN_SOURCE {
  pub SourceName: [CHAR; 8usize],
  pub SourceIdentifier: LUID,
}
#[test]
fn bindgen_test_layout__TOKEN_SOURCE() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_SOURCE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_SOURCE>(),
    16usize,
    concat!("Size of: ", stringify!(_TOKEN_SOURCE))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_SOURCE>(),
    4usize,
    concat!("Alignment of ", stringify!(_TOKEN_SOURCE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SourceName) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_SOURCE),
      "::",
      stringify!(SourceName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SourceIdentifier) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_SOURCE),
      "::",
      stringify!(SourceIdentifier)
    )
  );
}
pub type TOKEN_SOURCE = _TOKEN_SOURCE;
pub type PTOKEN_SOURCE = *mut _TOKEN_SOURCE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TOKEN_STATISTICS {
  pub TokenId: LUID,
  pub AuthenticationId: LUID,
  pub ExpirationTime: LARGE_INTEGER,
  pub TokenType: TOKEN_TYPE,
  pub ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
  pub DynamicCharged: DWORD,
  pub DynamicAvailable: DWORD,
  pub GroupCount: DWORD,
  pub PrivilegeCount: DWORD,
  pub ModifiedId: LUID,
}
#[test]
fn bindgen_test_layout__TOKEN_STATISTICS() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_STATISTICS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_STATISTICS>(),
    56usize,
    concat!("Size of: ", stringify!(_TOKEN_STATISTICS))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_STATISTICS>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_STATISTICS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TokenId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_STATISTICS),
      "::",
      stringify!(TokenId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AuthenticationId) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_STATISTICS),
      "::",
      stringify!(AuthenticationId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExpirationTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_STATISTICS),
      "::",
      stringify!(ExpirationTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TokenType) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_STATISTICS),
      "::",
      stringify!(TokenType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImpersonationLevel) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_STATISTICS),
      "::",
      stringify!(ImpersonationLevel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DynamicCharged) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_STATISTICS),
      "::",
      stringify!(DynamicCharged)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DynamicAvailable) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_STATISTICS),
      "::",
      stringify!(DynamicAvailable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupCount) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_STATISTICS),
      "::",
      stringify!(GroupCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrivilegeCount) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_STATISTICS),
      "::",
      stringify!(PrivilegeCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ModifiedId) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_STATISTICS),
      "::",
      stringify!(ModifiedId)
    )
  );
}
pub type TOKEN_STATISTICS = _TOKEN_STATISTICS;
pub type PTOKEN_STATISTICS = *mut _TOKEN_STATISTICS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TOKEN_CONTROL {
  pub TokenId: LUID,
  pub AuthenticationId: LUID,
  pub ModifiedId: LUID,
  pub TokenSource: TOKEN_SOURCE,
}
#[test]
fn bindgen_test_layout__TOKEN_CONTROL() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_CONTROL> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_CONTROL>(),
    40usize,
    concat!("Size of: ", stringify!(_TOKEN_CONTROL))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_CONTROL>(),
    4usize,
    concat!("Alignment of ", stringify!(_TOKEN_CONTROL))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TokenId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_CONTROL),
      "::",
      stringify!(TokenId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AuthenticationId) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_CONTROL),
      "::",
      stringify!(AuthenticationId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ModifiedId) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_CONTROL),
      "::",
      stringify!(ModifiedId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TokenSource) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_CONTROL),
      "::",
      stringify!(TokenSource)
    )
  );
}
pub type TOKEN_CONTROL = _TOKEN_CONTROL;
pub type PTOKEN_CONTROL = *mut _TOKEN_CONTROL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TOKEN_ORIGIN {
  pub OriginatingLogonSession: LUID,
}
#[test]
fn bindgen_test_layout__TOKEN_ORIGIN() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_ORIGIN> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_ORIGIN>(),
    8usize,
    concat!("Size of: ", stringify!(_TOKEN_ORIGIN))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_ORIGIN>(),
    4usize,
    concat!("Alignment of ", stringify!(_TOKEN_ORIGIN))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OriginatingLogonSession) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_ORIGIN),
      "::",
      stringify!(OriginatingLogonSession)
    )
  );
}
pub type TOKEN_ORIGIN = _TOKEN_ORIGIN;
pub type PTOKEN_ORIGIN = *mut _TOKEN_ORIGIN;
pub const _MANDATORY_LEVEL_MandatoryLevelUntrusted: _MANDATORY_LEVEL = 0;
pub const _MANDATORY_LEVEL_MandatoryLevelLow: _MANDATORY_LEVEL = 1;
pub const _MANDATORY_LEVEL_MandatoryLevelMedium: _MANDATORY_LEVEL = 2;
pub const _MANDATORY_LEVEL_MandatoryLevelHigh: _MANDATORY_LEVEL = 3;
pub const _MANDATORY_LEVEL_MandatoryLevelSystem: _MANDATORY_LEVEL = 4;
pub const _MANDATORY_LEVEL_MandatoryLevelSecureProcess: _MANDATORY_LEVEL = 5;
pub const _MANDATORY_LEVEL_MandatoryLevelCount: _MANDATORY_LEVEL = 6;
pub type _MANDATORY_LEVEL = ::std::os::raw::c_int;
pub use self::_MANDATORY_LEVEL as MANDATORY_LEVEL;
pub type PMANDATORY_LEVEL = *mut _MANDATORY_LEVEL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_APPCONTAINER_INFORMATION {
  pub TokenAppContainer: PSID,
}
#[test]
fn bindgen_test_layout__TOKEN_APPCONTAINER_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_APPCONTAINER_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_APPCONTAINER_INFORMATION>(),
    8usize,
    concat!("Size of: ", stringify!(_TOKEN_APPCONTAINER_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_APPCONTAINER_INFORMATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_APPCONTAINER_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TokenAppContainer) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_APPCONTAINER_INFORMATION),
      "::",
      stringify!(TokenAppContainer)
    )
  );
}
pub type TOKEN_APPCONTAINER_INFORMATION = _TOKEN_APPCONTAINER_INFORMATION;
pub type PTOKEN_APPCONTAINER_INFORMATION = *mut _TOKEN_APPCONTAINER_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_SID_INFORMATION {
  pub Sid: PSID,
}
#[test]
fn bindgen_test_layout__TOKEN_SID_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_SID_INFORMATION> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_SID_INFORMATION>(),
    8usize,
    concat!("Size of: ", stringify!(_TOKEN_SID_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_SID_INFORMATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_TOKEN_SID_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_SID_INFORMATION),
      "::",
      stringify!(Sid)
    )
  );
}
pub type TOKEN_SID_INFORMATION = _TOKEN_SID_INFORMATION;
pub type PTOKEN_SID_INFORMATION = *mut _TOKEN_SID_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_BNO_ISOLATION_INFORMATION {
  pub IsolationPrefix: PWSTR,
  pub IsolationEnabled: BOOLEAN,
}
#[test]
fn bindgen_test_layout__TOKEN_BNO_ISOLATION_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TOKEN_BNO_ISOLATION_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TOKEN_BNO_ISOLATION_INFORMATION>(),
    16usize,
    concat!("Size of: ", stringify!(_TOKEN_BNO_ISOLATION_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TOKEN_BNO_ISOLATION_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_TOKEN_BNO_ISOLATION_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IsolationPrefix) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_BNO_ISOLATION_INFORMATION),
      "::",
      stringify!(IsolationPrefix)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IsolationEnabled) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TOKEN_BNO_ISOLATION_INFORMATION),
      "::",
      stringify!(IsolationEnabled)
    )
  );
}
pub type TOKEN_BNO_ISOLATION_INFORMATION = _TOKEN_BNO_ISOLATION_INFORMATION;
pub type PTOKEN_BNO_ISOLATION_INFORMATION = *mut _TOKEN_BNO_ISOLATION_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
  pub Version: DWORD64,
  pub Name: PWSTR,
}
#[test]
fn bindgen_test_layout__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE() {
  const UNINIT: ::std::mem::MaybeUninit<_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE),
      "::",
      stringify!(Name)
    )
  );
}
pub type CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
pub type PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = *mut _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
  pub pValue: PVOID,
  pub ValueLength: DWORD,
}
#[test]
fn bindgen_test_layout__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE() {
  const UNINIT: ::std::mem::MaybeUninit<_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pValue) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE),
      "::",
      stringify!(pValue)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ValueLength) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE),
      "::",
      stringify!(ValueLength)
    )
  );
}
pub type CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
pub type PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE =
  *mut _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
  pub Name: PWSTR,
  pub ValueType: WORD,
  pub Reserved: WORD,
  pub Flags: DWORD,
  pub ValueCount: DWORD,
  pub Values: _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1 {
  pub pInt64: PLONG64,
  pub pUint64: PDWORD64,
  pub ppString: *mut PWSTR,
  pub pFqbn: PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE,
  pub pOctetString: PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
}
#[test]
fn bindgen_test_layout__CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pInt64) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1),
      "::",
      stringify!(pInt64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pUint64) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1),
      "::",
      stringify!(pUint64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ppString) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1),
      "::",
      stringify!(ppString)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pFqbn) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1),
      "::",
      stringify!(pFqbn)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pOctetString) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1),
      "::",
      stringify!(pOctetString)
    )
  );
}
#[test]
fn bindgen_test_layout__CLAIM_SECURITY_ATTRIBUTE_V1() {
  const UNINIT: ::std::mem::MaybeUninit<_CLAIM_SECURITY_ATTRIBUTE_V1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_V1>(),
    32usize,
    concat!("Size of: ", stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1))
  );
  assert_eq!(
    ::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_V1>(),
    8usize,
    concat!("Alignment of ", stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ValueType) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1),
      "::",
      stringify!(ValueType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ValueCount) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1),
      "::",
      stringify!(ValueCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Values) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_V1),
      "::",
      stringify!(Values)
    )
  );
}
pub type CLAIM_SECURITY_ATTRIBUTE_V1 = _CLAIM_SECURITY_ATTRIBUTE_V1;
pub type PCLAIM_SECURITY_ATTRIBUTE_V1 = *mut _CLAIM_SECURITY_ATTRIBUTE_V1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
  pub Name: DWORD,
  pub ValueType: WORD,
  pub Reserved: WORD,
  pub Flags: DWORD,
  pub ValueCount: DWORD,
  pub Values: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1 {
  pub pInt64: [DWORD; 1usize],
  pub pUint64: [DWORD; 1usize],
  pub ppString: [DWORD; 1usize],
  pub pFqbn: [DWORD; 1usize],
  pub pOctetString: [DWORD; 1usize],
}
#[test]
fn bindgen_test_layout__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pInt64) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1),
      "::",
      stringify!(pInt64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pUint64) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1),
      "::",
      stringify!(pUint64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ppString) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1),
      "::",
      stringify!(ppString)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pFqbn) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1),
      "::",
      stringify!(pFqbn)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pOctetString) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1),
      "::",
      stringify!(pOctetString)
    )
  );
}
#[test]
fn bindgen_test_layout__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1() {
  const UNINIT: ::std::mem::MaybeUninit<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1>(),
    20usize,
    concat!(
      "Size of: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ValueType) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1),
      "::",
      stringify!(ValueType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ValueCount) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1),
      "::",
      stringify!(ValueCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Values) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1),
      "::",
      stringify!(Values)
    )
  );
}
pub type CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
pub type PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = *mut _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
  pub Version: WORD,
  pub Reserved: WORD,
  pub AttributeCount: DWORD,
  pub Attribute: _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1 {
  pub pAttributeV1: PCLAIM_SECURITY_ATTRIBUTE_V1,
}
#[test]
fn bindgen_test_layout__CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pAttributeV1) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(pAttributeV1)
    )
  );
}
#[test]
fn bindgen_test_layout__CLAIM_SECURITY_ATTRIBUTES_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AttributeCount) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION),
      "::",
      stringify!(AttributeCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Attribute) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION),
      "::",
      stringify!(Attribute)
    )
  );
}
pub type CLAIM_SECURITY_ATTRIBUTES_INFORMATION = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
pub type PCLAIM_SECURITY_ATTRIBUTES_INFORMATION = *mut _CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
pub type SECURITY_CONTEXT_TRACKING_MODE = BOOLEAN;
pub type PSECURITY_CONTEXT_TRACKING_MODE = *mut BOOLEAN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_QUALITY_OF_SERVICE {
  pub Length: DWORD,
  pub ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
  pub ContextTrackingMode: SECURITY_CONTEXT_TRACKING_MODE,
  pub EffectiveOnly: BOOLEAN,
}
#[test]
fn bindgen_test_layout__SECURITY_QUALITY_OF_SERVICE() {
  const UNINIT: ::std::mem::MaybeUninit<_SECURITY_QUALITY_OF_SERVICE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SECURITY_QUALITY_OF_SERVICE>(),
    12usize,
    concat!("Size of: ", stringify!(_SECURITY_QUALITY_OF_SERVICE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SECURITY_QUALITY_OF_SERVICE>(),
    4usize,
    concat!("Alignment of ", stringify!(_SECURITY_QUALITY_OF_SERVICE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_QUALITY_OF_SERVICE),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImpersonationLevel) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_QUALITY_OF_SERVICE),
      "::",
      stringify!(ImpersonationLevel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ContextTrackingMode) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_QUALITY_OF_SERVICE),
      "::",
      stringify!(ContextTrackingMode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EffectiveOnly) as usize - ptr as usize },
    9usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_QUALITY_OF_SERVICE),
      "::",
      stringify!(EffectiveOnly)
    )
  );
}
pub type SECURITY_QUALITY_OF_SERVICE = _SECURITY_QUALITY_OF_SERVICE;
pub type PSECURITY_QUALITY_OF_SERVICE = *mut _SECURITY_QUALITY_OF_SERVICE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SE_IMPERSONATION_STATE {
  pub Token: PACCESS_TOKEN,
  pub CopyOnOpen: BOOLEAN,
  pub EffectiveOnly: BOOLEAN,
  pub Level: SECURITY_IMPERSONATION_LEVEL,
}
#[test]
fn bindgen_test_layout__SE_IMPERSONATION_STATE() {
  const UNINIT: ::std::mem::MaybeUninit<_SE_IMPERSONATION_STATE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SE_IMPERSONATION_STATE>(),
    16usize,
    concat!("Size of: ", stringify!(_SE_IMPERSONATION_STATE))
  );
  assert_eq!(
    ::std::mem::align_of::<_SE_IMPERSONATION_STATE>(),
    8usize,
    concat!("Alignment of ", stringify!(_SE_IMPERSONATION_STATE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Token) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_IMPERSONATION_STATE),
      "::",
      stringify!(Token)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CopyOnOpen) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_IMPERSONATION_STATE),
      "::",
      stringify!(CopyOnOpen)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EffectiveOnly) as usize - ptr as usize },
    9usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_IMPERSONATION_STATE),
      "::",
      stringify!(EffectiveOnly)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Level) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SE_IMPERSONATION_STATE),
      "::",
      stringify!(Level)
    )
  );
}
pub type SE_IMPERSONATION_STATE = _SE_IMPERSONATION_STATE;
pub type PSE_IMPERSONATION_STATE = *mut _SE_IMPERSONATION_STATE;
pub type SECURITY_INFORMATION = DWORD;
pub type PSECURITY_INFORMATION = *mut DWORD;
pub type SE_SIGNING_LEVEL = BYTE;
pub type PSE_SIGNING_LEVEL = *mut BYTE;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureNone: _SE_IMAGE_SIGNATURE_TYPE = 0;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureEmbedded: _SE_IMAGE_SIGNATURE_TYPE = 1;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCache: _SE_IMAGE_SIGNATURE_TYPE = 2;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCatalogCached: _SE_IMAGE_SIGNATURE_TYPE = 3;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCatalogNotCached: _SE_IMAGE_SIGNATURE_TYPE = 4;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCatalogHint: _SE_IMAGE_SIGNATURE_TYPE = 5;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignaturePackageCatalog: _SE_IMAGE_SIGNATURE_TYPE = 6;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignaturePplMitigated: _SE_IMAGE_SIGNATURE_TYPE = 7;
pub type _SE_IMAGE_SIGNATURE_TYPE = ::std::os::raw::c_int;
pub use self::_SE_IMAGE_SIGNATURE_TYPE as SE_IMAGE_SIGNATURE_TYPE;
pub type PSE_IMAGE_SIGNATURE_TYPE = *mut _SE_IMAGE_SIGNATURE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_CAPABILITIES {
  pub AppContainerSid: PSID,
  pub Capabilities: PSID_AND_ATTRIBUTES,
  pub CapabilityCount: DWORD,
  pub Reserved: DWORD,
}
#[test]
fn bindgen_test_layout__SECURITY_CAPABILITIES() {
  const UNINIT: ::std::mem::MaybeUninit<_SECURITY_CAPABILITIES> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SECURITY_CAPABILITIES>(),
    24usize,
    concat!("Size of: ", stringify!(_SECURITY_CAPABILITIES))
  );
  assert_eq!(
    ::std::mem::align_of::<_SECURITY_CAPABILITIES>(),
    8usize,
    concat!("Alignment of ", stringify!(_SECURITY_CAPABILITIES))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AppContainerSid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_CAPABILITIES),
      "::",
      stringify!(AppContainerSid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Capabilities) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_CAPABILITIES),
      "::",
      stringify!(Capabilities)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CapabilityCount) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_CAPABILITIES),
      "::",
      stringify!(CapabilityCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_SECURITY_CAPABILITIES),
      "::",
      stringify!(Reserved)
    )
  );
}
pub type SECURITY_CAPABILITIES = _SECURITY_CAPABILITIES;
pub type PSECURITY_CAPABILITIES = *mut _SECURITY_CAPABILITIES;
pub type LPSECURITY_CAPABILITIES = *mut _SECURITY_CAPABILITIES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOB_SET_ARRAY {
  pub JobHandle: HANDLE,
  pub MemberLevel: DWORD,
  pub Flags: DWORD,
}
#[test]
fn bindgen_test_layout__JOB_SET_ARRAY() {
  const UNINIT: ::std::mem::MaybeUninit<_JOB_SET_ARRAY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOB_SET_ARRAY>(),
    16usize,
    concat!("Size of: ", stringify!(_JOB_SET_ARRAY))
  );
  assert_eq!(
    ::std::mem::align_of::<_JOB_SET_ARRAY>(),
    8usize,
    concat!("Alignment of ", stringify!(_JOB_SET_ARRAY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobHandle) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOB_SET_ARRAY),
      "::",
      stringify!(JobHandle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MemberLevel) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOB_SET_ARRAY),
      "::",
      stringify!(MemberLevel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOB_SET_ARRAY),
      "::",
      stringify!(Flags)
    )
  );
}
pub type JOB_SET_ARRAY = _JOB_SET_ARRAY;
pub type PJOB_SET_ARRAY = *mut _JOB_SET_ARRAY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_REGISTRATION_RECORD {
  pub Next: *mut _EXCEPTION_REGISTRATION_RECORD,
  pub Handler: PEXCEPTION_ROUTINE,
}
#[test]
fn bindgen_test_layout__EXCEPTION_REGISTRATION_RECORD() {
  const UNINIT: ::std::mem::MaybeUninit<_EXCEPTION_REGISTRATION_RECORD> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_EXCEPTION_REGISTRATION_RECORD>(),
    16usize,
    concat!("Size of: ", stringify!(_EXCEPTION_REGISTRATION_RECORD))
  );
  assert_eq!(
    ::std::mem::align_of::<_EXCEPTION_REGISTRATION_RECORD>(),
    8usize,
    concat!("Alignment of ", stringify!(_EXCEPTION_REGISTRATION_RECORD))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Next) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_REGISTRATION_RECORD),
      "::",
      stringify!(Next)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Handler) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_EXCEPTION_REGISTRATION_RECORD),
      "::",
      stringify!(Handler)
    )
  );
}
pub type EXCEPTION_REGISTRATION_RECORD = _EXCEPTION_REGISTRATION_RECORD;
pub type PEXCEPTION_REGISTRATION_RECORD = *mut EXCEPTION_REGISTRATION_RECORD;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_TIB {
  pub ExceptionList: *mut _EXCEPTION_REGISTRATION_RECORD,
  pub StackBase: PVOID,
  pub StackLimit: PVOID,
  pub SubSystemTib: PVOID,
  pub __bindgen_anon_1: _NT_TIB__bindgen_ty_1,
  pub ArbitraryUserPointer: PVOID,
  pub Self_: *mut _NT_TIB,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_TIB__bindgen_ty_1 {
  pub FiberData: PVOID,
  pub Version: DWORD,
}
#[test]
fn bindgen_test_layout__NT_TIB__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_NT_TIB__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NT_TIB__bindgen_ty_1>(),
    8usize,
    concat!("Size of: ", stringify!(_NT_TIB__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_NT_TIB__bindgen_ty_1>(),
    8usize,
    concat!("Alignment of ", stringify!(_NT_TIB__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FiberData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB__bindgen_ty_1),
      "::",
      stringify!(FiberData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB__bindgen_ty_1),
      "::",
      stringify!(Version)
    )
  );
}
#[test]
fn bindgen_test_layout__NT_TIB() {
  const UNINIT: ::std::mem::MaybeUninit<_NT_TIB> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NT_TIB>(),
    56usize,
    concat!("Size of: ", stringify!(_NT_TIB))
  );
  assert_eq!(
    ::std::mem::align_of::<_NT_TIB>(),
    8usize,
    concat!("Alignment of ", stringify!(_NT_TIB))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionList) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB),
      "::",
      stringify!(ExceptionList)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StackBase) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB),
      "::",
      stringify!(StackBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StackLimit) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB),
      "::",
      stringify!(StackLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SubSystemTib) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB),
      "::",
      stringify!(SubSystemTib)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ArbitraryUserPointer) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB),
      "::",
      stringify!(ArbitraryUserPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Self_) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB),
      "::",
      stringify!(Self_)
    )
  );
}
pub type NT_TIB = _NT_TIB;
pub type PNT_TIB = *mut NT_TIB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_TIB32 {
  pub ExceptionList: DWORD,
  pub StackBase: DWORD,
  pub StackLimit: DWORD,
  pub SubSystemTib: DWORD,
  pub __bindgen_anon_1: _NT_TIB32__bindgen_ty_1,
  pub ArbitraryUserPointer: DWORD,
  pub Self_: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_TIB32__bindgen_ty_1 {
  pub FiberData: DWORD,
  pub Version: DWORD,
}
#[test]
fn bindgen_test_layout__NT_TIB32__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_NT_TIB32__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NT_TIB32__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(_NT_TIB32__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_NT_TIB32__bindgen_ty_1>(),
    4usize,
    concat!("Alignment of ", stringify!(_NT_TIB32__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FiberData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB32__bindgen_ty_1),
      "::",
      stringify!(FiberData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB32__bindgen_ty_1),
      "::",
      stringify!(Version)
    )
  );
}
#[test]
fn bindgen_test_layout__NT_TIB32() {
  const UNINIT: ::std::mem::MaybeUninit<_NT_TIB32> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NT_TIB32>(),
    28usize,
    concat!("Size of: ", stringify!(_NT_TIB32))
  );
  assert_eq!(
    ::std::mem::align_of::<_NT_TIB32>(),
    4usize,
    concat!("Alignment of ", stringify!(_NT_TIB32))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionList) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB32),
      "::",
      stringify!(ExceptionList)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StackBase) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB32),
      "::",
      stringify!(StackBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StackLimit) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB32),
      "::",
      stringify!(StackLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SubSystemTib) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB32),
      "::",
      stringify!(SubSystemTib)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ArbitraryUserPointer) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB32),
      "::",
      stringify!(ArbitraryUserPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Self_) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB32),
      "::",
      stringify!(Self_)
    )
  );
}
pub type NT_TIB32 = _NT_TIB32;
pub type PNT_TIB32 = *mut _NT_TIB32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_TIB64 {
  pub ExceptionList: DWORD64,
  pub StackBase: DWORD64,
  pub StackLimit: DWORD64,
  pub SubSystemTib: DWORD64,
  pub __bindgen_anon_1: _NT_TIB64__bindgen_ty_1,
  pub ArbitraryUserPointer: DWORD64,
  pub Self_: DWORD64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_TIB64__bindgen_ty_1 {
  pub FiberData: DWORD64,
  pub Version: DWORD,
}
#[test]
fn bindgen_test_layout__NT_TIB64__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_NT_TIB64__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NT_TIB64__bindgen_ty_1>(),
    8usize,
    concat!("Size of: ", stringify!(_NT_TIB64__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_NT_TIB64__bindgen_ty_1>(),
    8usize,
    concat!("Alignment of ", stringify!(_NT_TIB64__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FiberData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB64__bindgen_ty_1),
      "::",
      stringify!(FiberData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB64__bindgen_ty_1),
      "::",
      stringify!(Version)
    )
  );
}
#[test]
fn bindgen_test_layout__NT_TIB64() {
  const UNINIT: ::std::mem::MaybeUninit<_NT_TIB64> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NT_TIB64>(),
    56usize,
    concat!("Size of: ", stringify!(_NT_TIB64))
  );
  assert_eq!(
    ::std::mem::align_of::<_NT_TIB64>(),
    8usize,
    concat!("Alignment of ", stringify!(_NT_TIB64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionList) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB64),
      "::",
      stringify!(ExceptionList)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StackBase) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB64),
      "::",
      stringify!(StackBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StackLimit) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB64),
      "::",
      stringify!(StackLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SubSystemTib) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB64),
      "::",
      stringify!(SubSystemTib)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ArbitraryUserPointer) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB64),
      "::",
      stringify!(ArbitraryUserPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Self_) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_NT_TIB64),
      "::",
      stringify!(Self_)
    )
  );
}
pub type NT_TIB64 = _NT_TIB64;
pub type PNT_TIB64 = *mut _NT_TIB64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UMS_CREATE_THREAD_ATTRIBUTES {
  pub UmsVersion: DWORD,
  pub UmsContext: PVOID,
  pub UmsCompletionList: PVOID,
}
#[test]
fn bindgen_test_layout__UMS_CREATE_THREAD_ATTRIBUTES() {
  const UNINIT: ::std::mem::MaybeUninit<_UMS_CREATE_THREAD_ATTRIBUTES> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_UMS_CREATE_THREAD_ATTRIBUTES>(),
    24usize,
    concat!("Size of: ", stringify!(_UMS_CREATE_THREAD_ATTRIBUTES))
  );
  assert_eq!(
    ::std::mem::align_of::<_UMS_CREATE_THREAD_ATTRIBUTES>(),
    8usize,
    concat!("Alignment of ", stringify!(_UMS_CREATE_THREAD_ATTRIBUTES))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UmsVersion) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_UMS_CREATE_THREAD_ATTRIBUTES),
      "::",
      stringify!(UmsVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UmsContext) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_UMS_CREATE_THREAD_ATTRIBUTES),
      "::",
      stringify!(UmsContext)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UmsCompletionList) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_UMS_CREATE_THREAD_ATTRIBUTES),
      "::",
      stringify!(UmsCompletionList)
    )
  );
}
pub type UMS_CREATE_THREAD_ATTRIBUTES = _UMS_CREATE_THREAD_ATTRIBUTES;
pub type PUMS_CREATE_THREAD_ATTRIBUTES = *mut _UMS_CREATE_THREAD_ATTRIBUTES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COMPONENT_FILTER {
  pub ComponentFlags: DWORD,
}
#[test]
fn bindgen_test_layout__COMPONENT_FILTER() {
  const UNINIT: ::std::mem::MaybeUninit<_COMPONENT_FILTER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_COMPONENT_FILTER>(),
    4usize,
    concat!("Size of: ", stringify!(_COMPONENT_FILTER))
  );
  assert_eq!(
    ::std::mem::align_of::<_COMPONENT_FILTER>(),
    4usize,
    concat!("Alignment of ", stringify!(_COMPONENT_FILTER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ComponentFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_COMPONENT_FILTER),
      "::",
      stringify!(ComponentFlags)
    )
  );
}
pub type COMPONENT_FILTER = _COMPONENT_FILTER;
pub type PCOMPONENT_FILTER = *mut _COMPONENT_FILTER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {
  pub TargetAddress: ULONG_PTR,
  pub Flags: ULONG_PTR,
}
#[test]
fn bindgen_test_layout__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET),
      "::",
      stringify!(TargetAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET),
      "::",
      stringify!(Flags)
    )
  );
}
pub type PROCESS_DYNAMIC_EH_CONTINUATION_TARGET = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
pub type PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET = *mut _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {
  pub NumberOfTargets: WORD,
  pub Reserved: WORD,
  pub Reserved2: DWORD,
  pub Targets: PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET,
}
#[test]
fn bindgen_test_layout__PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfTargets) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION),
      "::",
      stringify!(NumberOfTargets)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION),
      "::",
      stringify!(Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Targets) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION),
      "::",
      stringify!(Targets)
    )
  );
}
pub type PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION =
  _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
pub type PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION =
  *mut _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE {
  pub BaseAddress: ULONG_PTR,
  pub Size: SIZE_T,
  pub Flags: DWORD,
}
#[test]
fn bindgen_test_layout__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE>(),
    24usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE),
      "::",
      stringify!(BaseAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE),
      "::",
      stringify!(Flags)
    )
  );
}
pub type PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
pub type PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = *mut _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION {
  pub NumberOfRanges: WORD,
  pub Reserved: WORD,
  pub Reserved2: DWORD,
  pub Ranges: PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE,
}
#[test]
fn bindgen_test_layout__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfRanges) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION),
      "::",
      stringify!(NumberOfRanges)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION),
      "::",
      stringify!(Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ranges) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION),
      "::",
      stringify!(Ranges)
    )
  );
}
pub type PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION =
  _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
pub type PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION =
  *mut _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _QUOTA_LIMITS {
  pub PagedPoolLimit: SIZE_T,
  pub NonPagedPoolLimit: SIZE_T,
  pub MinimumWorkingSetSize: SIZE_T,
  pub MaximumWorkingSetSize: SIZE_T,
  pub PagefileLimit: SIZE_T,
  pub TimeLimit: LARGE_INTEGER,
}
#[test]
fn bindgen_test_layout__QUOTA_LIMITS() {
  const UNINIT: ::std::mem::MaybeUninit<_QUOTA_LIMITS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_QUOTA_LIMITS>(),
    48usize,
    concat!("Size of: ", stringify!(_QUOTA_LIMITS))
  );
  assert_eq!(
    ::std::mem::align_of::<_QUOTA_LIMITS>(),
    8usize,
    concat!("Alignment of ", stringify!(_QUOTA_LIMITS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PagedPoolLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS),
      "::",
      stringify!(PagedPoolLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NonPagedPoolLimit) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS),
      "::",
      stringify!(NonPagedPoolLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinimumWorkingSetSize) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS),
      "::",
      stringify!(MinimumWorkingSetSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumWorkingSetSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS),
      "::",
      stringify!(MaximumWorkingSetSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PagefileLimit) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS),
      "::",
      stringify!(PagefileLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeLimit) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS),
      "::",
      stringify!(TimeLimit)
    )
  );
}
pub type QUOTA_LIMITS = _QUOTA_LIMITS;
pub type PQUOTA_LIMITS = *mut _QUOTA_LIMITS;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _RATE_QUOTA_LIMIT {
  pub RateData: DWORD,
  pub __bindgen_anon_1: _RATE_QUOTA_LIMIT__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _RATE_QUOTA_LIMIT__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__RATE_QUOTA_LIMIT__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_RATE_QUOTA_LIMIT__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(_RATE_QUOTA_LIMIT__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_RATE_QUOTA_LIMIT__bindgen_ty_1>(),
    4usize,
    concat!("Alignment of ", stringify!(_RATE_QUOTA_LIMIT__bindgen_ty_1))
  );
}
impl _RATE_QUOTA_LIMIT__bindgen_ty_1 {
  #[inline]
  pub fn RatePercent(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
  }
  #[inline]
  pub fn set_RatePercent(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 7u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved0(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
  }
  #[inline]
  pub fn set_Reserved0(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(7usize, 25u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    RatePercent: DWORD,
    Reserved0: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 7u8, {
      let RatePercent: u32 = unsafe { ::std::mem::transmute(RatePercent) };
      RatePercent as u64
    });
    __bindgen_bitfield_unit.set(7usize, 25u8, {
      let Reserved0: u32 = unsafe { ::std::mem::transmute(Reserved0) };
      Reserved0 as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__RATE_QUOTA_LIMIT() {
  const UNINIT: ::std::mem::MaybeUninit<_RATE_QUOTA_LIMIT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_RATE_QUOTA_LIMIT>(),
    4usize,
    concat!("Size of: ", stringify!(_RATE_QUOTA_LIMIT))
  );
  assert_eq!(
    ::std::mem::align_of::<_RATE_QUOTA_LIMIT>(),
    4usize,
    concat!("Alignment of ", stringify!(_RATE_QUOTA_LIMIT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RateData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_RATE_QUOTA_LIMIT),
      "::",
      stringify!(RateData)
    )
  );
}
pub type RATE_QUOTA_LIMIT = _RATE_QUOTA_LIMIT;
pub type PRATE_QUOTA_LIMIT = *mut _RATE_QUOTA_LIMIT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _QUOTA_LIMITS_EX {
  pub PagedPoolLimit: SIZE_T,
  pub NonPagedPoolLimit: SIZE_T,
  pub MinimumWorkingSetSize: SIZE_T,
  pub MaximumWorkingSetSize: SIZE_T,
  pub PagefileLimit: SIZE_T,
  pub TimeLimit: LARGE_INTEGER,
  pub WorkingSetLimit: SIZE_T,
  pub Reserved2: SIZE_T,
  pub Reserved3: SIZE_T,
  pub Reserved4: SIZE_T,
  pub Flags: DWORD,
  pub CpuRateLimit: RATE_QUOTA_LIMIT,
}
#[test]
fn bindgen_test_layout__QUOTA_LIMITS_EX() {
  const UNINIT: ::std::mem::MaybeUninit<_QUOTA_LIMITS_EX> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_QUOTA_LIMITS_EX>(),
    88usize,
    concat!("Size of: ", stringify!(_QUOTA_LIMITS_EX))
  );
  assert_eq!(
    ::std::mem::align_of::<_QUOTA_LIMITS_EX>(),
    8usize,
    concat!("Alignment of ", stringify!(_QUOTA_LIMITS_EX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PagedPoolLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(PagedPoolLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NonPagedPoolLimit) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(NonPagedPoolLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinimumWorkingSetSize) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(MinimumWorkingSetSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumWorkingSetSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(MaximumWorkingSetSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PagefileLimit) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(PagefileLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeLimit) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(TimeLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).WorkingSetLimit) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(WorkingSetLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(Reserved3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved4) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(Reserved4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CpuRateLimit) as usize - ptr as usize },
    84usize,
    concat!(
      "Offset of field: ",
      stringify!(_QUOTA_LIMITS_EX),
      "::",
      stringify!(CpuRateLimit)
    )
  );
}
pub type QUOTA_LIMITS_EX = _QUOTA_LIMITS_EX;
pub type PQUOTA_LIMITS_EX = *mut _QUOTA_LIMITS_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_COUNTERS {
  pub ReadOperationCount: ULONGLONG,
  pub WriteOperationCount: ULONGLONG,
  pub OtherOperationCount: ULONGLONG,
  pub ReadTransferCount: ULONGLONG,
  pub WriteTransferCount: ULONGLONG,
  pub OtherTransferCount: ULONGLONG,
}
#[test]
fn bindgen_test_layout__IO_COUNTERS() {
  const UNINIT: ::std::mem::MaybeUninit<_IO_COUNTERS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IO_COUNTERS>(),
    48usize,
    concat!("Size of: ", stringify!(_IO_COUNTERS))
  );
  assert_eq!(
    ::std::mem::align_of::<_IO_COUNTERS>(),
    8usize,
    concat!("Alignment of ", stringify!(_IO_COUNTERS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReadOperationCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_COUNTERS),
      "::",
      stringify!(ReadOperationCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).WriteOperationCount) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_COUNTERS),
      "::",
      stringify!(WriteOperationCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OtherOperationCount) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_COUNTERS),
      "::",
      stringify!(OtherOperationCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReadTransferCount) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_COUNTERS),
      "::",
      stringify!(ReadTransferCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).WriteTransferCount) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_COUNTERS),
      "::",
      stringify!(WriteTransferCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OtherTransferCount) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_COUNTERS),
      "::",
      stringify!(OtherTransferCount)
    )
  );
}
pub type IO_COUNTERS = _IO_COUNTERS;
pub type PIO_COUNTERS = *mut IO_COUNTERS;
pub const _HARDWARE_COUNTER_TYPE_PMCCounter: _HARDWARE_COUNTER_TYPE = 0;
pub const _HARDWARE_COUNTER_TYPE_MaxHardwareCounterType: _HARDWARE_COUNTER_TYPE = 1;
pub type _HARDWARE_COUNTER_TYPE = ::std::os::raw::c_int;
pub use self::_HARDWARE_COUNTER_TYPE as HARDWARE_COUNTER_TYPE;
pub type PHARDWARE_COUNTER_TYPE = *mut _HARDWARE_COUNTER_TYPE;
pub const _PROCESS_MITIGATION_POLICY_ProcessDEPPolicy: _PROCESS_MITIGATION_POLICY = 0;
pub const _PROCESS_MITIGATION_POLICY_ProcessASLRPolicy: _PROCESS_MITIGATION_POLICY = 1;
pub const _PROCESS_MITIGATION_POLICY_ProcessDynamicCodePolicy: _PROCESS_MITIGATION_POLICY = 2;
pub const _PROCESS_MITIGATION_POLICY_ProcessStrictHandleCheckPolicy: _PROCESS_MITIGATION_POLICY = 3;
pub const _PROCESS_MITIGATION_POLICY_ProcessSystemCallDisablePolicy: _PROCESS_MITIGATION_POLICY = 4;
pub const _PROCESS_MITIGATION_POLICY_ProcessMitigationOptionsMask: _PROCESS_MITIGATION_POLICY = 5;
pub const _PROCESS_MITIGATION_POLICY_ProcessExtensionPointDisablePolicy:
  _PROCESS_MITIGATION_POLICY = 6;
pub const _PROCESS_MITIGATION_POLICY_ProcessControlFlowGuardPolicy: _PROCESS_MITIGATION_POLICY = 7;
pub const _PROCESS_MITIGATION_POLICY_ProcessSignaturePolicy: _PROCESS_MITIGATION_POLICY = 8;
pub const _PROCESS_MITIGATION_POLICY_ProcessFontDisablePolicy: _PROCESS_MITIGATION_POLICY = 9;
pub const _PROCESS_MITIGATION_POLICY_ProcessImageLoadPolicy: _PROCESS_MITIGATION_POLICY = 10;
pub const _PROCESS_MITIGATION_POLICY_ProcessSystemCallFilterPolicy: _PROCESS_MITIGATION_POLICY = 11;
pub const _PROCESS_MITIGATION_POLICY_ProcessPayloadRestrictionPolicy: _PROCESS_MITIGATION_POLICY =
  12;
pub const _PROCESS_MITIGATION_POLICY_ProcessChildProcessPolicy: _PROCESS_MITIGATION_POLICY = 13;
pub const _PROCESS_MITIGATION_POLICY_ProcessSideChannelIsolationPolicy: _PROCESS_MITIGATION_POLICY =
  14;
pub const _PROCESS_MITIGATION_POLICY_ProcessUserShadowStackPolicy: _PROCESS_MITIGATION_POLICY = 15;
pub const _PROCESS_MITIGATION_POLICY_ProcessRedirectionTrustPolicy: _PROCESS_MITIGATION_POLICY = 16;
pub const _PROCESS_MITIGATION_POLICY_ProcessUserPointerAuthPolicy: _PROCESS_MITIGATION_POLICY = 17;
pub const _PROCESS_MITIGATION_POLICY_ProcessSEHOPPolicy: _PROCESS_MITIGATION_POLICY = 18;
pub const _PROCESS_MITIGATION_POLICY_ProcessActivationContextTrustPolicy:
  _PROCESS_MITIGATION_POLICY = 19;
pub const _PROCESS_MITIGATION_POLICY_MaxProcessMitigationPolicy: _PROCESS_MITIGATION_POLICY = 20;
pub type _PROCESS_MITIGATION_POLICY = ::std::os::raw::c_int;
pub use self::_PROCESS_MITIGATION_POLICY as PROCESS_MITIGATION_POLICY;
pub type PPROCESS_MITIGATION_POLICY = *mut _PROCESS_MITIGATION_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_ASLR_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn EnableBottomUpRandomization(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableBottomUpRandomization(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableForceRelocateImages(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableForceRelocateImages(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableHighEntropy(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableHighEntropy(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn DisallowStrippedImages(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_DisallowStrippedImages(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(4usize, 28u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    EnableBottomUpRandomization: DWORD,
    EnableForceRelocateImages: DWORD,
    EnableHighEntropy: DWORD,
    DisallowStrippedImages: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let EnableBottomUpRandomization: u32 =
        unsafe { ::std::mem::transmute(EnableBottomUpRandomization) };
      EnableBottomUpRandomization as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let EnableForceRelocateImages: u32 =
        unsafe { ::std::mem::transmute(EnableForceRelocateImages) };
      EnableForceRelocateImages as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let EnableHighEntropy: u32 = unsafe { ::std::mem::transmute(EnableHighEntropy) };
      EnableHighEntropy as u64
    });
    __bindgen_bitfield_unit.set(3usize, 1u8, {
      let DisallowStrippedImages: u32 = unsafe { ::std::mem::transmute(DisallowStrippedImages) };
      DisallowStrippedImages as u64
    });
    __bindgen_bitfield_unit.set(4usize, 28u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_ASLR_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_ASLR_POLICY>(),
    4usize,
    concat!("Size of: ", stringify!(_PROCESS_MITIGATION_ASLR_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_ASLR_POLICY>(),
    4usize,
    concat!("Alignment of ", stringify!(_PROCESS_MITIGATION_ASLR_POLICY))
  );
}
pub type PROCESS_MITIGATION_ASLR_POLICY = _PROCESS_MITIGATION_ASLR_POLICY;
pub type PPROCESS_MITIGATION_ASLR_POLICY = *mut _PROCESS_MITIGATION_ASLR_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_DEP_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1,
  pub Permanent: BOOLEAN,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn Enable(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Enable(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn DisableAtlThunkEmulation(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_DisableAtlThunkEmulation(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 30u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    Enable: DWORD,
    DisableAtlThunkEmulation: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let Enable: u32 = unsafe { ::std::mem::transmute(Enable) };
      Enable as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let DisableAtlThunkEmulation: u32 =
        unsafe { ::std::mem::transmute(DisableAtlThunkEmulation) };
      DisableAtlThunkEmulation as u64
    });
    __bindgen_bitfield_unit.set(2usize, 30u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_DEP_POLICY() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_MITIGATION_DEP_POLICY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_DEP_POLICY>(),
    8usize,
    concat!("Size of: ", stringify!(_PROCESS_MITIGATION_DEP_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_DEP_POLICY>(),
    4usize,
    concat!("Alignment of ", stringify!(_PROCESS_MITIGATION_DEP_POLICY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Permanent) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_DEP_POLICY),
      "::",
      stringify!(Permanent)
    )
  );
}
pub type PROCESS_MITIGATION_DEP_POLICY = _PROCESS_MITIGATION_DEP_POLICY;
pub type PPROCESS_MITIGATION_DEP_POLICY = *mut _PROCESS_MITIGATION_DEP_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_SEHOP_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn EnableSehop(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableSehop(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    EnableSehop: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let EnableSehop: u32 = unsafe { ::std::mem::transmute(EnableSehop) };
      EnableSehop as u64
    });
    __bindgen_bitfield_unit.set(1usize, 31u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SEHOP_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SEHOP_POLICY>(),
    4usize,
    concat!("Size of: ", stringify!(_PROCESS_MITIGATION_SEHOP_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_SEHOP_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SEHOP_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_SEHOP_POLICY = _PROCESS_MITIGATION_SEHOP_POLICY;
pub type PPROCESS_MITIGATION_SEHOP_POLICY = *mut _PROCESS_MITIGATION_SEHOP_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1()
{
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<
      _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1,
    >(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn RaiseExceptionOnInvalidHandleReference(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_RaiseExceptionOnInvalidHandleReference(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn HandleExceptionsPermanentlyEnabled(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_HandleExceptionsPermanentlyEnabled(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 30u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    RaiseExceptionOnInvalidHandleReference: DWORD,
    HandleExceptionsPermanentlyEnabled: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let RaiseExceptionOnInvalidHandleReference: u32 =
        unsafe { ::std::mem::transmute(RaiseExceptionOnInvalidHandleReference) };
      RaiseExceptionOnInvalidHandleReference as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let HandleExceptionsPermanentlyEnabled: u32 =
        unsafe { ::std::mem::transmute(HandleExceptionsPermanentlyEnabled) };
      HandleExceptionsPermanentlyEnabled as u64
    });
    __bindgen_bitfield_unit.set(2usize, 30u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY =
  _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
pub type PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY =
  *mut _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1()
{
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<
      _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
    >(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn DisallowWin32kSystemCalls(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_DisallowWin32kSystemCalls(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditDisallowWin32kSystemCalls(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditDisallowWin32kSystemCalls(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 30u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    DisallowWin32kSystemCalls: DWORD,
    AuditDisallowWin32kSystemCalls: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let DisallowWin32kSystemCalls: u32 =
        unsafe { ::std::mem::transmute(DisallowWin32kSystemCalls) };
      DisallowWin32kSystemCalls as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let AuditDisallowWin32kSystemCalls: u32 =
        unsafe { ::std::mem::transmute(AuditDisallowWin32kSystemCalls) };
      AuditDisallowWin32kSystemCalls as u64
    });
    __bindgen_bitfield_unit.set(2usize, 30u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY =
  _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
pub type PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY =
  *mut _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1:
    _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1(
) {
  assert_eq!(
    ::std::mem::size_of::<
      _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
    >(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<
      _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
    >(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn DisableExtensionPoints(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_DisableExtensionPoints(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    DisableExtensionPoints: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let DisableExtensionPoints: u32 = unsafe { ::std::mem::transmute(DisableExtensionPoints) };
      DisableExtensionPoints as u64
    });
    __bindgen_bitfield_unit.set(1usize, 31u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY =
  _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
pub type PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY =
  *mut _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn ProhibitDynamicCode(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_ProhibitDynamicCode(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AllowThreadOptOut(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AllowThreadOptOut(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AllowRemoteDowngrade(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AllowRemoteDowngrade(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditProhibitDynamicCode(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditProhibitDynamicCode(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(4usize, 28u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    ProhibitDynamicCode: DWORD,
    AllowThreadOptOut: DWORD,
    AllowRemoteDowngrade: DWORD,
    AuditProhibitDynamicCode: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let ProhibitDynamicCode: u32 = unsafe { ::std::mem::transmute(ProhibitDynamicCode) };
      ProhibitDynamicCode as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let AllowThreadOptOut: u32 = unsafe { ::std::mem::transmute(AllowThreadOptOut) };
      AllowThreadOptOut as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let AllowRemoteDowngrade: u32 = unsafe { ::std::mem::transmute(AllowRemoteDowngrade) };
      AllowRemoteDowngrade as u64
    });
    __bindgen_bitfield_unit.set(3usize, 1u8, {
      let AuditProhibitDynamicCode: u32 =
        unsafe { ::std::mem::transmute(AuditProhibitDynamicCode) };
      AuditProhibitDynamicCode as u64
    });
    __bindgen_bitfield_unit.set(4usize, 28u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
pub type PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY = *mut _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn EnableControlFlowGuard(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableControlFlowGuard(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableExportSuppression(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableExportSuppression(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn StrictMode(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_StrictMode(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableXfg(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableXfg(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableXfgAuditMode(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableXfgAuditMode(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(4usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(5usize, 27u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    EnableControlFlowGuard: DWORD,
    EnableExportSuppression: DWORD,
    StrictMode: DWORD,
    EnableXfg: DWORD,
    EnableXfgAuditMode: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let EnableControlFlowGuard: u32 = unsafe { ::std::mem::transmute(EnableControlFlowGuard) };
      EnableControlFlowGuard as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let EnableExportSuppression: u32 = unsafe { ::std::mem::transmute(EnableExportSuppression) };
      EnableExportSuppression as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let StrictMode: u32 = unsafe { ::std::mem::transmute(StrictMode) };
      StrictMode as u64
    });
    __bindgen_bitfield_unit.set(3usize, 1u8, {
      let EnableXfg: u32 = unsafe { ::std::mem::transmute(EnableXfg) };
      EnableXfg as u64
    });
    __bindgen_bitfield_unit.set(4usize, 1u8, {
      let EnableXfgAuditMode: u32 = unsafe { ::std::mem::transmute(EnableXfgAuditMode) };
      EnableXfgAuditMode as u64
    });
    __bindgen_bitfield_unit.set(5usize, 27u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY =
  _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
pub type PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY =
  *mut _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn MicrosoftSignedOnly(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_MicrosoftSignedOnly(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn StoreSignedOnly(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_StoreSignedOnly(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn MitigationOptIn(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_MitigationOptIn(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditMicrosoftSignedOnly(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditMicrosoftSignedOnly(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditStoreSignedOnly(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditStoreSignedOnly(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(4usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(5usize, 27u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    MicrosoftSignedOnly: DWORD,
    StoreSignedOnly: DWORD,
    MitigationOptIn: DWORD,
    AuditMicrosoftSignedOnly: DWORD,
    AuditStoreSignedOnly: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let MicrosoftSignedOnly: u32 = unsafe { ::std::mem::transmute(MicrosoftSignedOnly) };
      MicrosoftSignedOnly as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let StoreSignedOnly: u32 = unsafe { ::std::mem::transmute(StoreSignedOnly) };
      StoreSignedOnly as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let MitigationOptIn: u32 = unsafe { ::std::mem::transmute(MitigationOptIn) };
      MitigationOptIn as u64
    });
    __bindgen_bitfield_unit.set(3usize, 1u8, {
      let AuditMicrosoftSignedOnly: u32 =
        unsafe { ::std::mem::transmute(AuditMicrosoftSignedOnly) };
      AuditMicrosoftSignedOnly as u64
    });
    __bindgen_bitfield_unit.set(4usize, 1u8, {
      let AuditStoreSignedOnly: u32 = unsafe { ::std::mem::transmute(AuditStoreSignedOnly) };
      AuditStoreSignedOnly as u64
    });
    __bindgen_bitfield_unit.set(5usize, 27u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
pub type PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY =
  *mut _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn DisableNonSystemFonts(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_DisableNonSystemFonts(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditNonSystemFontLoading(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditNonSystemFontLoading(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 30u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    DisableNonSystemFonts: DWORD,
    AuditNonSystemFontLoading: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let DisableNonSystemFonts: u32 = unsafe { ::std::mem::transmute(DisableNonSystemFonts) };
      DisableNonSystemFonts as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let AuditNonSystemFontLoading: u32 =
        unsafe { ::std::mem::transmute(AuditNonSystemFontLoading) };
      AuditNonSystemFontLoading as u64
    });
    __bindgen_bitfield_unit.set(2usize, 30u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_FONT_DISABLE_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_FONT_DISABLE_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_FONT_DISABLE_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_FONT_DISABLE_POLICY = _PROCESS_MITIGATION_FONT_DISABLE_POLICY;
pub type PPROCESS_MITIGATION_FONT_DISABLE_POLICY = *mut _PROCESS_MITIGATION_FONT_DISABLE_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn NoRemoteImages(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_NoRemoteImages(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn NoLowMandatoryLabelImages(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_NoLowMandatoryLabelImages(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn PreferSystem32Images(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_PreferSystem32Images(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditNoRemoteImages(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditNoRemoteImages(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditNoLowMandatoryLabelImages(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditNoLowMandatoryLabelImages(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(4usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(5usize, 27u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    NoRemoteImages: DWORD,
    NoLowMandatoryLabelImages: DWORD,
    PreferSystem32Images: DWORD,
    AuditNoRemoteImages: DWORD,
    AuditNoLowMandatoryLabelImages: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let NoRemoteImages: u32 = unsafe { ::std::mem::transmute(NoRemoteImages) };
      NoRemoteImages as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let NoLowMandatoryLabelImages: u32 =
        unsafe { ::std::mem::transmute(NoLowMandatoryLabelImages) };
      NoLowMandatoryLabelImages as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let PreferSystem32Images: u32 = unsafe { ::std::mem::transmute(PreferSystem32Images) };
      PreferSystem32Images as u64
    });
    __bindgen_bitfield_unit.set(3usize, 1u8, {
      let AuditNoRemoteImages: u32 = unsafe { ::std::mem::transmute(AuditNoRemoteImages) };
      AuditNoRemoteImages as u64
    });
    __bindgen_bitfield_unit.set(4usize, 1u8, {
      let AuditNoLowMandatoryLabelImages: u32 =
        unsafe { ::std::mem::transmute(AuditNoLowMandatoryLabelImages) };
      AuditNoLowMandatoryLabelImages as u64
    });
    __bindgen_bitfield_unit.set(5usize, 27u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_IMAGE_LOAD_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_IMAGE_LOAD_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_IMAGE_LOAD_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_IMAGE_LOAD_POLICY = _PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
pub type PPROCESS_MITIGATION_IMAGE_LOAD_POLICY = *mut _PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn FilterId(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
  }
  #[inline]
  pub fn set_FilterId(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 4u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(4usize, 28u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    FilterId: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 4u8, {
      let FilterId: u32 = unsafe { ::std::mem::transmute(FilterId) };
      FilterId as u64
    });
    __bindgen_bitfield_unit.set(4usize, 28u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY =
  _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
pub type PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY =
  *mut _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1()
{
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<
      _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1,
    >(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn EnableExportAddressFilter(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableExportAddressFilter(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditExportAddressFilter(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditExportAddressFilter(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableExportAddressFilterPlus(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableExportAddressFilterPlus(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditExportAddressFilterPlus(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditExportAddressFilterPlus(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableImportAddressFilter(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableImportAddressFilter(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(4usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditImportAddressFilter(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditImportAddressFilter(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(5usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableRopStackPivot(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableRopStackPivot(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(6usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditRopStackPivot(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditRopStackPivot(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(7usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableRopCallerCheck(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableRopCallerCheck(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditRopCallerCheck(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditRopCallerCheck(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(9usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableRopSimExec(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableRopSimExec(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(10usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditRopSimExec(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditRopSimExec(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(11usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(12usize, 20u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    EnableExportAddressFilter: DWORD,
    AuditExportAddressFilter: DWORD,
    EnableExportAddressFilterPlus: DWORD,
    AuditExportAddressFilterPlus: DWORD,
    EnableImportAddressFilter: DWORD,
    AuditImportAddressFilter: DWORD,
    EnableRopStackPivot: DWORD,
    AuditRopStackPivot: DWORD,
    EnableRopCallerCheck: DWORD,
    AuditRopCallerCheck: DWORD,
    EnableRopSimExec: DWORD,
    AuditRopSimExec: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let EnableExportAddressFilter: u32 =
        unsafe { ::std::mem::transmute(EnableExportAddressFilter) };
      EnableExportAddressFilter as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let AuditExportAddressFilter: u32 =
        unsafe { ::std::mem::transmute(AuditExportAddressFilter) };
      AuditExportAddressFilter as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let EnableExportAddressFilterPlus: u32 =
        unsafe { ::std::mem::transmute(EnableExportAddressFilterPlus) };
      EnableExportAddressFilterPlus as u64
    });
    __bindgen_bitfield_unit.set(3usize, 1u8, {
      let AuditExportAddressFilterPlus: u32 =
        unsafe { ::std::mem::transmute(AuditExportAddressFilterPlus) };
      AuditExportAddressFilterPlus as u64
    });
    __bindgen_bitfield_unit.set(4usize, 1u8, {
      let EnableImportAddressFilter: u32 =
        unsafe { ::std::mem::transmute(EnableImportAddressFilter) };
      EnableImportAddressFilter as u64
    });
    __bindgen_bitfield_unit.set(5usize, 1u8, {
      let AuditImportAddressFilter: u32 =
        unsafe { ::std::mem::transmute(AuditImportAddressFilter) };
      AuditImportAddressFilter as u64
    });
    __bindgen_bitfield_unit.set(6usize, 1u8, {
      let EnableRopStackPivot: u32 = unsafe { ::std::mem::transmute(EnableRopStackPivot) };
      EnableRopStackPivot as u64
    });
    __bindgen_bitfield_unit.set(7usize, 1u8, {
      let AuditRopStackPivot: u32 = unsafe { ::std::mem::transmute(AuditRopStackPivot) };
      AuditRopStackPivot as u64
    });
    __bindgen_bitfield_unit.set(8usize, 1u8, {
      let EnableRopCallerCheck: u32 = unsafe { ::std::mem::transmute(EnableRopCallerCheck) };
      EnableRopCallerCheck as u64
    });
    __bindgen_bitfield_unit.set(9usize, 1u8, {
      let AuditRopCallerCheck: u32 = unsafe { ::std::mem::transmute(AuditRopCallerCheck) };
      AuditRopCallerCheck as u64
    });
    __bindgen_bitfield_unit.set(10usize, 1u8, {
      let EnableRopSimExec: u32 = unsafe { ::std::mem::transmute(EnableRopSimExec) };
      EnableRopSimExec as u64
    });
    __bindgen_bitfield_unit.set(11usize, 1u8, {
      let AuditRopSimExec: u32 = unsafe { ::std::mem::transmute(AuditRopSimExec) };
      AuditRopSimExec as u64
    });
    __bindgen_bitfield_unit.set(12usize, 20u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY =
  _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
pub type PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY =
  *mut _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn NoChildProcessCreation(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_NoChildProcessCreation(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditNoChildProcessCreation(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditNoChildProcessCreation(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AllowSecureProcessCreation(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AllowSecureProcessCreation(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 29u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    NoChildProcessCreation: DWORD,
    AuditNoChildProcessCreation: DWORD,
    AllowSecureProcessCreation: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let NoChildProcessCreation: u32 = unsafe { ::std::mem::transmute(NoChildProcessCreation) };
      NoChildProcessCreation as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let AuditNoChildProcessCreation: u32 =
        unsafe { ::std::mem::transmute(AuditNoChildProcessCreation) };
      AuditNoChildProcessCreation as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let AllowSecureProcessCreation: u32 =
        unsafe { ::std::mem::transmute(AllowSecureProcessCreation) };
      AllowSecureProcessCreation as u64
    });
    __bindgen_bitfield_unit.set(3usize, 29u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_CHILD_PROCESS_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_CHILD_PROCESS_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_CHILD_PROCESS_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_CHILD_PROCESS_POLICY = _PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
pub type PPROCESS_MITIGATION_CHILD_PROCESS_POLICY = *mut _PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1:
    _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1(
) {
  assert_eq!(
    ::std::mem::size_of::<
      _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1,
    >(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<
      _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1,
    >(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn SmtBranchTargetIsolation(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_SmtBranchTargetIsolation(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn IsolateSecurityDomain(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_IsolateSecurityDomain(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn DisablePageCombine(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_DisablePageCombine(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn SpeculativeStoreBypassDisable(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_SpeculativeStoreBypassDisable(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn RestrictCoreSharing(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_RestrictCoreSharing(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(4usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(5usize, 27u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    SmtBranchTargetIsolation: DWORD,
    IsolateSecurityDomain: DWORD,
    DisablePageCombine: DWORD,
    SpeculativeStoreBypassDisable: DWORD,
    RestrictCoreSharing: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let SmtBranchTargetIsolation: u32 =
        unsafe { ::std::mem::transmute(SmtBranchTargetIsolation) };
      SmtBranchTargetIsolation as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let IsolateSecurityDomain: u32 = unsafe { ::std::mem::transmute(IsolateSecurityDomain) };
      IsolateSecurityDomain as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let DisablePageCombine: u32 = unsafe { ::std::mem::transmute(DisablePageCombine) };
      DisablePageCombine as u64
    });
    __bindgen_bitfield_unit.set(3usize, 1u8, {
      let SpeculativeStoreBypassDisable: u32 =
        unsafe { ::std::mem::transmute(SpeculativeStoreBypassDisable) };
      SpeculativeStoreBypassDisable as u64
    });
    __bindgen_bitfield_unit.set(4usize, 1u8, {
      let RestrictCoreSharing: u32 = unsafe { ::std::mem::transmute(RestrictCoreSharing) };
      RestrictCoreSharing as u64
    });
    __bindgen_bitfield_unit.set(5usize, 27u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY =
  _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
pub type PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY =
  *mut _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn EnableUserShadowStack(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableUserShadowStack(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditUserShadowStack(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditUserShadowStack(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn SetContextIpValidation(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_SetContextIpValidation(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditSetContextIpValidation(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditSetContextIpValidation(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EnableUserShadowStackStrictMode(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnableUserShadowStackStrictMode(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(4usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn BlockNonCetBinaries(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_BlockNonCetBinaries(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(5usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn BlockNonCetBinariesNonEhcont(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_BlockNonCetBinariesNonEhcont(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(6usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditBlockNonCetBinaries(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditBlockNonCetBinaries(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(7usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn CetDynamicApisOutOfProcOnly(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_CetDynamicApisOutOfProcOnly(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn SetContextIpValidationRelaxedMode(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_SetContextIpValidationRelaxedMode(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(9usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 22u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(10usize, 22u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    EnableUserShadowStack: DWORD,
    AuditUserShadowStack: DWORD,
    SetContextIpValidation: DWORD,
    AuditSetContextIpValidation: DWORD,
    EnableUserShadowStackStrictMode: DWORD,
    BlockNonCetBinaries: DWORD,
    BlockNonCetBinariesNonEhcont: DWORD,
    AuditBlockNonCetBinaries: DWORD,
    CetDynamicApisOutOfProcOnly: DWORD,
    SetContextIpValidationRelaxedMode: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let EnableUserShadowStack: u32 = unsafe { ::std::mem::transmute(EnableUserShadowStack) };
      EnableUserShadowStack as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let AuditUserShadowStack: u32 = unsafe { ::std::mem::transmute(AuditUserShadowStack) };
      AuditUserShadowStack as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let SetContextIpValidation: u32 = unsafe { ::std::mem::transmute(SetContextIpValidation) };
      SetContextIpValidation as u64
    });
    __bindgen_bitfield_unit.set(3usize, 1u8, {
      let AuditSetContextIpValidation: u32 =
        unsafe { ::std::mem::transmute(AuditSetContextIpValidation) };
      AuditSetContextIpValidation as u64
    });
    __bindgen_bitfield_unit.set(4usize, 1u8, {
      let EnableUserShadowStackStrictMode: u32 =
        unsafe { ::std::mem::transmute(EnableUserShadowStackStrictMode) };
      EnableUserShadowStackStrictMode as u64
    });
    __bindgen_bitfield_unit.set(5usize, 1u8, {
      let BlockNonCetBinaries: u32 = unsafe { ::std::mem::transmute(BlockNonCetBinaries) };
      BlockNonCetBinaries as u64
    });
    __bindgen_bitfield_unit.set(6usize, 1u8, {
      let BlockNonCetBinariesNonEhcont: u32 =
        unsafe { ::std::mem::transmute(BlockNonCetBinariesNonEhcont) };
      BlockNonCetBinariesNonEhcont as u64
    });
    __bindgen_bitfield_unit.set(7usize, 1u8, {
      let AuditBlockNonCetBinaries: u32 =
        unsafe { ::std::mem::transmute(AuditBlockNonCetBinaries) };
      AuditBlockNonCetBinaries as u64
    });
    __bindgen_bitfield_unit.set(8usize, 1u8, {
      let CetDynamicApisOutOfProcOnly: u32 =
        unsafe { ::std::mem::transmute(CetDynamicApisOutOfProcOnly) };
      CetDynamicApisOutOfProcOnly as u64
    });
    __bindgen_bitfield_unit.set(9usize, 1u8, {
      let SetContextIpValidationRelaxedMode: u32 =
        unsafe { ::std::mem::transmute(SetContextIpValidationRelaxedMode) };
      SetContextIpValidationRelaxedMode as u64
    });
    __bindgen_bitfield_unit.set(10usize, 22u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
pub type PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY =
  *mut _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn EnablePointerAuthUserIp(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnablePointerAuthUserIp(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    EnablePointerAuthUserIp: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let EnablePointerAuthUserIp: u32 = unsafe { ::std::mem::transmute(EnablePointerAuthUserIp) };
      EnablePointerAuthUserIp as u64
    });
    __bindgen_bitfield_unit.set(1usize, 31u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY = _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY;
pub type PPROCESS_MITIGATION_USER_POINTER_AUTH_POLICY =
  *mut _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1: _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1>(
    ),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn EnforceRedirectionTrust(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EnforceRedirectionTrust(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AuditRedirectionTrust(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AuditRedirectionTrust(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 30u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    EnforceRedirectionTrust: DWORD,
    AuditRedirectionTrust: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let EnforceRedirectionTrust: u32 = unsafe { ::std::mem::transmute(EnforceRedirectionTrust) };
      EnforceRedirectionTrust as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let AuditRedirectionTrust: u32 = unsafe { ::std::mem::transmute(AuditRedirectionTrust) };
      AuditRedirectionTrust as u64
    });
    __bindgen_bitfield_unit.set(2usize, 30u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY = _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY;
pub type PPROCESS_MITIGATION_REDIRECTION_TRUST_POLICY =
  *mut _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY {
  pub __bindgen_anon_1: _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1 {
  pub Flags: DWORD,
  pub __bindgen_anon_1:
    _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1(
) {
  assert_eq!(
    ::std::mem::size_of::<
      _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1,
    >(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<
      _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1,
    >(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn AssemblyManifestRedirectionTrust(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AssemblyManifestRedirectionTrust(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    AssemblyManifestRedirectionTrust: DWORD,
    ReservedFlags: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let AssemblyManifestRedirectionTrust: u32 =
        unsafe { ::std::mem::transmute(AssemblyManifestRedirectionTrust) };
      AssemblyManifestRedirectionTrust as u64
    });
    __bindgen_bitfield_unit.set(1usize, 31u8, {
      let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout__PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY() {
  assert_eq!(
    ::std::mem::size_of::<_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY)
    )
  );
}
pub type PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY =
  _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY;
pub type PPROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY =
  *mut _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
  pub TotalUserTime: LARGE_INTEGER,
  pub TotalKernelTime: LARGE_INTEGER,
  pub ThisPeriodTotalUserTime: LARGE_INTEGER,
  pub ThisPeriodTotalKernelTime: LARGE_INTEGER,
  pub TotalPageFaultCount: DWORD,
  pub TotalProcesses: DWORD,
  pub ActiveProcesses: DWORD,
  pub TotalTerminatedProcesses: DWORD,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION>(),
    48usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalUserTime) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION),
      "::",
      stringify!(TotalUserTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalKernelTime) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION),
      "::",
      stringify!(TotalKernelTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ThisPeriodTotalUserTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION),
      "::",
      stringify!(ThisPeriodTotalUserTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ThisPeriodTotalKernelTime) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION),
      "::",
      stringify!(ThisPeriodTotalKernelTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalPageFaultCount) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION),
      "::",
      stringify!(TotalPageFaultCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalProcesses) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION),
      "::",
      stringify!(TotalProcesses)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ActiveProcesses) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION),
      "::",
      stringify!(ActiveProcesses)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalTerminatedProcesses) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION),
      "::",
      stringify!(TotalTerminatedProcesses)
    )
  );
}
pub type JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
pub type PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = *mut _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
  pub PerProcessUserTimeLimit: LARGE_INTEGER,
  pub PerJobUserTimeLimit: LARGE_INTEGER,
  pub LimitFlags: DWORD,
  pub MinimumWorkingSetSize: SIZE_T,
  pub MaximumWorkingSetSize: SIZE_T,
  pub ActiveProcessLimit: DWORD,
  pub Affinity: ULONG_PTR,
  pub PriorityClass: DWORD,
  pub SchedulingClass: DWORD,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_BASIC_LIMIT_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_BASIC_LIMIT_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_BASIC_LIMIT_INFORMATION>(),
    64usize,
    concat!("Size of: ", stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_BASIC_LIMIT_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PerProcessUserTimeLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION),
      "::",
      stringify!(PerProcessUserTimeLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PerJobUserTimeLimit) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION),
      "::",
      stringify!(PerJobUserTimeLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LimitFlags) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION),
      "::",
      stringify!(LimitFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinimumWorkingSetSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION),
      "::",
      stringify!(MinimumWorkingSetSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumWorkingSetSize) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION),
      "::",
      stringify!(MaximumWorkingSetSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ActiveProcessLimit) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION),
      "::",
      stringify!(ActiveProcessLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Affinity) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION),
      "::",
      stringify!(Affinity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PriorityClass) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION),
      "::",
      stringify!(PriorityClass)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SchedulingClass) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_LIMIT_INFORMATION),
      "::",
      stringify!(SchedulingClass)
    )
  );
}
pub type JOBOBJECT_BASIC_LIMIT_INFORMATION = _JOBOBJECT_BASIC_LIMIT_INFORMATION;
pub type PJOBOBJECT_BASIC_LIMIT_INFORMATION = *mut _JOBOBJECT_BASIC_LIMIT_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
  pub BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION,
  pub IoInfo: IO_COUNTERS,
  pub ProcessMemoryLimit: SIZE_T,
  pub JobMemoryLimit: SIZE_T,
  pub PeakProcessMemoryUsed: SIZE_T,
  pub PeakJobMemoryUsed: SIZE_T,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_EXTENDED_LIMIT_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_EXTENDED_LIMIT_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_EXTENDED_LIMIT_INFORMATION>(),
    144usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_EXTENDED_LIMIT_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_EXTENDED_LIMIT_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_EXTENDED_LIMIT_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BasicLimitInformation) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_EXTENDED_LIMIT_INFORMATION),
      "::",
      stringify!(BasicLimitInformation)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoInfo) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_EXTENDED_LIMIT_INFORMATION),
      "::",
      stringify!(IoInfo)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessMemoryLimit) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_EXTENDED_LIMIT_INFORMATION),
      "::",
      stringify!(ProcessMemoryLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobMemoryLimit) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_EXTENDED_LIMIT_INFORMATION),
      "::",
      stringify!(JobMemoryLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PeakProcessMemoryUsed) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_EXTENDED_LIMIT_INFORMATION),
      "::",
      stringify!(PeakProcessMemoryUsed)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PeakJobMemoryUsed) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_EXTENDED_LIMIT_INFORMATION),
      "::",
      stringify!(PeakJobMemoryUsed)
    )
  );
}
pub type JOBOBJECT_EXTENDED_LIMIT_INFORMATION = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
pub type PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = *mut _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
  pub NumberOfAssignedProcesses: DWORD,
  pub NumberOfProcessIdsInList: DWORD,
  pub ProcessIdList: [ULONG_PTR; 1usize],
}
#[test]
fn bindgen_test_layout__JOBOBJECT_BASIC_PROCESS_ID_LIST() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_BASIC_PROCESS_ID_LIST> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_BASIC_PROCESS_ID_LIST>(),
    16usize,
    concat!("Size of: ", stringify!(_JOBOBJECT_BASIC_PROCESS_ID_LIST))
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_BASIC_PROCESS_ID_LIST>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_BASIC_PROCESS_ID_LIST)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfAssignedProcesses) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_PROCESS_ID_LIST),
      "::",
      stringify!(NumberOfAssignedProcesses)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfProcessIdsInList) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_PROCESS_ID_LIST),
      "::",
      stringify!(NumberOfProcessIdsInList)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessIdList) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_PROCESS_ID_LIST),
      "::",
      stringify!(ProcessIdList)
    )
  );
}
pub type JOBOBJECT_BASIC_PROCESS_ID_LIST = _JOBOBJECT_BASIC_PROCESS_ID_LIST;
pub type PJOBOBJECT_BASIC_PROCESS_ID_LIST = *mut _JOBOBJECT_BASIC_PROCESS_ID_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
  pub UIRestrictionsClass: DWORD,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_BASIC_UI_RESTRICTIONS() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_BASIC_UI_RESTRICTIONS> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_BASIC_UI_RESTRICTIONS>(),
    4usize,
    concat!("Size of: ", stringify!(_JOBOBJECT_BASIC_UI_RESTRICTIONS))
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_BASIC_UI_RESTRICTIONS>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_BASIC_UI_RESTRICTIONS)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UIRestrictionsClass) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_UI_RESTRICTIONS),
      "::",
      stringify!(UIRestrictionsClass)
    )
  );
}
pub type JOBOBJECT_BASIC_UI_RESTRICTIONS = _JOBOBJECT_BASIC_UI_RESTRICTIONS;
pub type PJOBOBJECT_BASIC_UI_RESTRICTIONS = *mut _JOBOBJECT_BASIC_UI_RESTRICTIONS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
  pub SecurityLimitFlags: DWORD,
  pub JobToken: HANDLE,
  pub SidsToDisable: PTOKEN_GROUPS,
  pub PrivilegesToDelete: PTOKEN_PRIVILEGES,
  pub RestrictedSids: PTOKEN_GROUPS,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_SECURITY_LIMIT_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_SECURITY_LIMIT_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_SECURITY_LIMIT_INFORMATION>(),
    40usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_SECURITY_LIMIT_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_SECURITY_LIMIT_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_SECURITY_LIMIT_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SecurityLimitFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_SECURITY_LIMIT_INFORMATION),
      "::",
      stringify!(SecurityLimitFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobToken) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_SECURITY_LIMIT_INFORMATION),
      "::",
      stringify!(JobToken)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SidsToDisable) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_SECURITY_LIMIT_INFORMATION),
      "::",
      stringify!(SidsToDisable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrivilegesToDelete) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_SECURITY_LIMIT_INFORMATION),
      "::",
      stringify!(PrivilegesToDelete)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RestrictedSids) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_SECURITY_LIMIT_INFORMATION),
      "::",
      stringify!(RestrictedSids)
    )
  );
}
pub type JOBOBJECT_SECURITY_LIMIT_INFORMATION = _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
pub type PJOBOBJECT_SECURITY_LIMIT_INFORMATION = *mut _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
  pub EndOfJobTimeAction: DWORD,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_END_OF_JOB_TIME_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_END_OF_JOB_TIME_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_END_OF_JOB_TIME_INFORMATION>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_END_OF_JOB_TIME_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_END_OF_JOB_TIME_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_END_OF_JOB_TIME_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndOfJobTimeAction) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_END_OF_JOB_TIME_INFORMATION),
      "::",
      stringify!(EndOfJobTimeAction)
    )
  );
}
pub type JOBOBJECT_END_OF_JOB_TIME_INFORMATION = _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
pub type PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = *mut _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
  pub CompletionKey: PVOID,
  pub CompletionPort: HANDLE,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_ASSOCIATE_COMPLETION_PORT() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_ASSOCIATE_COMPLETION_PORT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_ASSOCIATE_COMPLETION_PORT>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_ASSOCIATE_COMPLETION_PORT)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_ASSOCIATE_COMPLETION_PORT>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_ASSOCIATE_COMPLETION_PORT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CompletionKey) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_ASSOCIATE_COMPLETION_PORT),
      "::",
      stringify!(CompletionKey)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CompletionPort) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_ASSOCIATE_COMPLETION_PORT),
      "::",
      stringify!(CompletionPort)
    )
  );
}
pub type JOBOBJECT_ASSOCIATE_COMPLETION_PORT = _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
pub type PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = *mut _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
  pub BasicInfo: JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
  pub IoInfo: IO_COUNTERS,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION>(),
    96usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BasicInfo) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION),
      "::",
      stringify!(BasicInfo)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoInfo) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION),
      "::",
      stringify!(IoInfo)
    )
  );
}
pub type JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION =
  _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
pub type PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION =
  *mut _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_JOBSET_INFORMATION {
  pub MemberLevel: DWORD,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_JOBSET_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_JOBSET_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_JOBSET_INFORMATION>(),
    4usize,
    concat!("Size of: ", stringify!(_JOBOBJECT_JOBSET_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_JOBSET_INFORMATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_JOBOBJECT_JOBSET_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MemberLevel) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_JOBSET_INFORMATION),
      "::",
      stringify!(MemberLevel)
    )
  );
}
pub type JOBOBJECT_JOBSET_INFORMATION = _JOBOBJECT_JOBSET_INFORMATION;
pub type PJOBOBJECT_JOBSET_INFORMATION = *mut _JOBOBJECT_JOBSET_INFORMATION;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_ToleranceLow: _JOBOBJECT_RATE_CONTROL_TOLERANCE = 1;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_ToleranceMedium: _JOBOBJECT_RATE_CONTROL_TOLERANCE = 2;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_ToleranceHigh: _JOBOBJECT_RATE_CONTROL_TOLERANCE = 3;
pub type _JOBOBJECT_RATE_CONTROL_TOLERANCE = ::std::os::raw::c_int;
pub use self::_JOBOBJECT_RATE_CONTROL_TOLERANCE as JOBOBJECT_RATE_CONTROL_TOLERANCE;
pub type PJOBOBJECT_RATE_CONTROL_TOLERANCE = *mut _JOBOBJECT_RATE_CONTROL_TOLERANCE;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_ToleranceIntervalShort:
  _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 1;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_ToleranceIntervalMedium:
  _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 2;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_ToleranceIntervalLong:
  _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 3;
pub type _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = ::std::os::raw::c_int;
pub use self::_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL as JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
pub type PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL =
  *mut _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
  pub IoReadBytesLimit: DWORD64,
  pub IoWriteBytesLimit: DWORD64,
  pub PerJobUserTimeLimit: LARGE_INTEGER,
  pub JobMemoryLimit: DWORD64,
  pub RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  pub RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
  pub LimitFlags: DWORD,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION>(),
    48usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoReadBytesLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION),
      "::",
      stringify!(IoReadBytesLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoWriteBytesLimit) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION),
      "::",
      stringify!(IoWriteBytesLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PerJobUserTimeLimit) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION),
      "::",
      stringify!(PerJobUserTimeLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobMemoryLimit) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION),
      "::",
      stringify!(JobMemoryLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RateControlTolerance) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION),
      "::",
      stringify!(RateControlTolerance)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RateControlToleranceInterval) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION),
      "::",
      stringify!(RateControlToleranceInterval)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LimitFlags) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION),
      "::",
      stringify!(LimitFlags)
    )
  );
}
pub type JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
pub type PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = *mut _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
  pub IoReadBytesLimit: DWORD64,
  pub IoWriteBytesLimit: DWORD64,
  pub PerJobUserTimeLimit: LARGE_INTEGER,
  pub __bindgen_anon_1: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1,
  pub __bindgen_anon_2: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2,
  pub __bindgen_anon_3: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3,
  pub LimitFlags: DWORD,
  pub IoRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  pub JobLowMemoryLimit: DWORD64,
  pub IoRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
  pub NetRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  pub NetRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1 {
  pub JobHighMemoryLimit: DWORD64,
  pub JobMemoryLimit: DWORD64,
}
#[test]
fn bindgen_test_layout_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobHighMemoryLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1),
      "::",
      stringify!(JobHighMemoryLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobMemoryLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1),
      "::",
      stringify!(JobMemoryLimit)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2 {
  pub RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  pub CpuRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
}
#[test]
fn bindgen_test_layout_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RateControlTolerance) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2),
      "::",
      stringify!(RateControlTolerance)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CpuRateControlTolerance) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2),
      "::",
      stringify!(CpuRateControlTolerance)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3 {
  pub RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
  pub CpuRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
}
#[test]
fn bindgen_test_layout_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RateControlToleranceInterval) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3),
      "::",
      stringify!(RateControlToleranceInterval)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CpuRateControlToleranceInterval) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3),
      "::",
      stringify!(CpuRateControlToleranceInterval)
    )
  );
}
#[test]
fn bindgen_test_layout_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2>(),
    72usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoReadBytesLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2),
      "::",
      stringify!(IoReadBytesLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoWriteBytesLimit) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2),
      "::",
      stringify!(IoWriteBytesLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PerJobUserTimeLimit) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2),
      "::",
      stringify!(PerJobUserTimeLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LimitFlags) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2),
      "::",
      stringify!(LimitFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoRateControlTolerance) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2),
      "::",
      stringify!(IoRateControlTolerance)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobLowMemoryLimit) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2),
      "::",
      stringify!(JobLowMemoryLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoRateControlToleranceInterval) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2),
      "::",
      stringify!(IoRateControlToleranceInterval)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NetRateControlTolerance) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2),
      "::",
      stringify!(NetRateControlTolerance)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NetRateControlToleranceInterval) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2),
      "::",
      stringify!(NetRateControlToleranceInterval)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
  pub LimitFlags: DWORD,
  pub ViolationLimitFlags: DWORD,
  pub IoReadBytes: DWORD64,
  pub IoReadBytesLimit: DWORD64,
  pub IoWriteBytes: DWORD64,
  pub IoWriteBytesLimit: DWORD64,
  pub PerJobUserTime: LARGE_INTEGER,
  pub PerJobUserTimeLimit: LARGE_INTEGER,
  pub JobMemory: DWORD64,
  pub JobMemoryLimit: DWORD64,
  pub RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  pub RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_LIMIT_VIOLATION_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_LIMIT_VIOLATION_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_LIMIT_VIOLATION_INFORMATION>(),
    80usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_LIMIT_VIOLATION_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LimitFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(LimitFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ViolationLimitFlags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(ViolationLimitFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoReadBytes) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(IoReadBytes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoReadBytesLimit) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(IoReadBytesLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoWriteBytes) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(IoWriteBytes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoWriteBytesLimit) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(IoWriteBytesLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PerJobUserTime) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(PerJobUserTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PerJobUserTimeLimit) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(PerJobUserTimeLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobMemory) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(JobMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobMemoryLimit) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(JobMemoryLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RateControlTolerance) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(RateControlTolerance)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RateControlToleranceLimit) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION),
      "::",
      stringify!(RateControlToleranceLimit)
    )
  );
}
pub type JOBOBJECT_LIMIT_VIOLATION_INFORMATION = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
pub type PJOBOBJECT_LIMIT_VIOLATION_INFORMATION = *mut _JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
  pub LimitFlags: DWORD,
  pub ViolationLimitFlags: DWORD,
  pub IoReadBytes: DWORD64,
  pub IoReadBytesLimit: DWORD64,
  pub IoWriteBytes: DWORD64,
  pub IoWriteBytesLimit: DWORD64,
  pub PerJobUserTime: LARGE_INTEGER,
  pub PerJobUserTimeLimit: LARGE_INTEGER,
  pub JobMemory: DWORD64,
  pub __bindgen_anon_1: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1,
  pub __bindgen_anon_2: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2,
  pub __bindgen_anon_3: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3,
  pub JobLowMemoryLimit: DWORD64,
  pub IoRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  pub IoRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  pub NetRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  pub NetRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1 {
  pub JobHighMemoryLimit: DWORD64,
  pub JobMemoryLimit: DWORD64,
}
#[test]
fn bindgen_test_layout_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobHighMemoryLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1),
      "::",
      stringify!(JobHighMemoryLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobMemoryLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1),
      "::",
      stringify!(JobMemoryLimit)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2 {
  pub RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  pub CpuRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
}
#[test]
fn bindgen_test_layout_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RateControlTolerance) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2),
      "::",
      stringify!(RateControlTolerance)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CpuRateControlTolerance) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2),
      "::",
      stringify!(CpuRateControlTolerance)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3 {
  pub RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  pub CpuRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
}
#[test]
fn bindgen_test_layout_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RateControlToleranceLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3),
      "::",
      stringify!(RateControlToleranceLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CpuRateControlToleranceLimit) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3),
      "::",
      stringify!(CpuRateControlToleranceLimit)
    )
  );
}
#[test]
fn bindgen_test_layout_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2>(),
    104usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LimitFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(LimitFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ViolationLimitFlags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(ViolationLimitFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoReadBytes) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(IoReadBytes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoReadBytesLimit) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(IoReadBytesLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoWriteBytes) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(IoWriteBytes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoWriteBytesLimit) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(IoWriteBytesLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PerJobUserTime) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(PerJobUserTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PerJobUserTimeLimit) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(PerJobUserTimeLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobMemory) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(JobMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).JobLowMemoryLimit) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(JobLowMemoryLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoRateControlTolerance) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(IoRateControlTolerance)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoRateControlToleranceLimit) as usize - ptr as usize },
    92usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(IoRateControlToleranceLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NetRateControlTolerance) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(NetRateControlTolerance)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NetRateControlToleranceLimit) as usize - ptr as usize },
    100usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2),
      "::",
      stringify!(NetRateControlToleranceLimit)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
  pub ControlFlags: DWORD,
  pub __bindgen_anon_1: _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1 {
  pub CpuRate: DWORD,
  pub Weight: DWORD,
  pub __bindgen_anon_1: _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
  pub MinRate: WORD,
  pub MaxRate: WORD,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinRate) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(MinRate)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxRate) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(MaxRate)
    )
  );
}
#[test]
fn bindgen_test_layout__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CpuRate) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(CpuRate)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Weight) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(Weight)
    )
  );
}
#[test]
fn bindgen_test_layout__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION),
      "::",
      stringify!(ControlFlags)
    )
  );
}
pub type JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
pub type PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = *mut _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_ENABLE:
  JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 1;
pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH:
  JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 2;
pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG:
  JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 4;
pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS:
  JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 7;
pub type JOB_OBJECT_NET_RATE_CONTROL_FLAGS = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
  pub MaxBandwidth: DWORD64,
  pub ControlFlags: JOB_OBJECT_NET_RATE_CONTROL_FLAGS,
  pub DscpTag: BYTE,
}
#[test]
fn bindgen_test_layout_JOBOBJECT_NET_RATE_CONTROL_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_NET_RATE_CONTROL_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_NET_RATE_CONTROL_INFORMATION>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_NET_RATE_CONTROL_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_NET_RATE_CONTROL_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_NET_RATE_CONTROL_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxBandwidth) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NET_RATE_CONTROL_INFORMATION),
      "::",
      stringify!(MaxBandwidth)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlFlags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NET_RATE_CONTROL_INFORMATION),
      "::",
      stringify!(ControlFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DscpTag) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_NET_RATE_CONTROL_INFORMATION),
      "::",
      stringify!(DscpTag)
    )
  );
}
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_ENABLE:
  JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 1;
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME:
  JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 2;
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL:
  JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 4;
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP : JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 8 ;
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS:
  JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 15;
pub type JOB_OBJECT_IO_RATE_CONTROL_FLAGS = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
  pub MaxIops: LONG64,
  pub MaxBandwidth: LONG64,
  pub ReservationIops: LONG64,
  pub VolumeName: PWSTR,
  pub BaseIoSize: DWORD,
  pub ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
  pub VolumeNameLength: WORD,
}
#[test]
fn bindgen_test_layout_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE>(),
    48usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxIops) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE),
      "::",
      stringify!(MaxIops)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxBandwidth) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE),
      "::",
      stringify!(MaxBandwidth)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReservationIops) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE),
      "::",
      stringify!(ReservationIops)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VolumeName) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE),
      "::",
      stringify!(VolumeName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseIoSize) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE),
      "::",
      stringify!(BaseIoSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlFlags) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE),
      "::",
      stringify!(ControlFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VolumeNameLength) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE),
      "::",
      stringify!(VolumeNameLength)
    )
  );
}
pub type JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1 =
  JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
  pub MaxIops: LONG64,
  pub MaxBandwidth: LONG64,
  pub ReservationIops: LONG64,
  pub VolumeName: PWSTR,
  pub BaseIoSize: DWORD,
  pub ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
  pub VolumeNameLength: WORD,
  pub CriticalReservationIops: LONG64,
  pub ReservationBandwidth: LONG64,
  pub CriticalReservationBandwidth: LONG64,
  pub MaxTimePercent: LONG64,
  pub ReservationTimePercent: LONG64,
  pub CriticalReservationTimePercent: LONG64,
}
#[test]
fn bindgen_test_layout_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2>(),
    96usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxIops) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(MaxIops)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxBandwidth) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(MaxBandwidth)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReservationIops) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(ReservationIops)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VolumeName) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(VolumeName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseIoSize) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(BaseIoSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlFlags) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(ControlFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VolumeNameLength) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(VolumeNameLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CriticalReservationIops) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(CriticalReservationIops)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReservationBandwidth) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(ReservationBandwidth)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CriticalReservationBandwidth) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(CriticalReservationBandwidth)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxTimePercent) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(MaxTimePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReservationTimePercent) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(ReservationTimePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CriticalReservationTimePercent) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2),
      "::",
      stringify!(CriticalReservationTimePercent)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
  pub MaxIops: LONG64,
  pub MaxBandwidth: LONG64,
  pub ReservationIops: LONG64,
  pub VolumeName: PWSTR,
  pub BaseIoSize: DWORD,
  pub ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
  pub VolumeNameLength: WORD,
  pub CriticalReservationIops: LONG64,
  pub ReservationBandwidth: LONG64,
  pub CriticalReservationBandwidth: LONG64,
  pub MaxTimePercent: LONG64,
  pub ReservationTimePercent: LONG64,
  pub CriticalReservationTimePercent: LONG64,
  pub SoftMaxIops: LONG64,
  pub SoftMaxBandwidth: LONG64,
  pub SoftMaxTimePercent: LONG64,
  pub LimitExcessNotifyIops: LONG64,
  pub LimitExcessNotifyBandwidth: LONG64,
  pub LimitExcessNotifyTimePercent: LONG64,
}
#[test]
fn bindgen_test_layout_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3() {
  const UNINIT: ::std::mem::MaybeUninit<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3>(),
    144usize,
    concat!(
      "Size of: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxIops) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(MaxIops)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxBandwidth) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(MaxBandwidth)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReservationIops) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(ReservationIops)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VolumeName) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(VolumeName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseIoSize) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(BaseIoSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlFlags) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(ControlFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VolumeNameLength) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(VolumeNameLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CriticalReservationIops) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(CriticalReservationIops)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReservationBandwidth) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(ReservationBandwidth)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CriticalReservationBandwidth) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(CriticalReservationBandwidth)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxTimePercent) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(MaxTimePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReservationTimePercent) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(ReservationTimePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CriticalReservationTimePercent) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(CriticalReservationTimePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SoftMaxIops) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(SoftMaxIops)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SoftMaxBandwidth) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(SoftMaxBandwidth)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SoftMaxTimePercent) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(SoftMaxTimePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LimitExcessNotifyIops) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(LimitExcessNotifyIops)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LimitExcessNotifyBandwidth) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(LimitExcessNotifyBandwidth)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LimitExcessNotifyTimePercent) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3),
      "::",
      stringify!(LimitExcessNotifyTimePercent)
    )
  );
}
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS_JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE:
  JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = 1;
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS_JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE:
  JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = 2;
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS_JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS:
  JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = 3;
pub type JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_IO_ATTRIBUTION_STATS {
  pub IoCount: ULONG_PTR,
  pub TotalNonOverlappedQueueTime: ULONGLONG,
  pub TotalNonOverlappedServiceTime: ULONGLONG,
  pub TotalSize: ULONGLONG,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_IO_ATTRIBUTION_STATS() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_IO_ATTRIBUTION_STATS> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_IO_ATTRIBUTION_STATS>(),
    32usize,
    concat!("Size of: ", stringify!(_JOBOBJECT_IO_ATTRIBUTION_STATS))
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_IO_ATTRIBUTION_STATS>(),
    8usize,
    concat!("Alignment of ", stringify!(_JOBOBJECT_IO_ATTRIBUTION_STATS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_IO_ATTRIBUTION_STATS),
      "::",
      stringify!(IoCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalNonOverlappedQueueTime) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_IO_ATTRIBUTION_STATS),
      "::",
      stringify!(TotalNonOverlappedQueueTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalNonOverlappedServiceTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_IO_ATTRIBUTION_STATS),
      "::",
      stringify!(TotalNonOverlappedServiceTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_IO_ATTRIBUTION_STATS),
      "::",
      stringify!(TotalSize)
    )
  );
}
pub type JOBOBJECT_IO_ATTRIBUTION_STATS = _JOBOBJECT_IO_ATTRIBUTION_STATS;
pub type PJOBOBJECT_IO_ATTRIBUTION_STATS = *mut _JOBOBJECT_IO_ATTRIBUTION_STATS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
  pub ControlFlags: DWORD,
  pub ReadStats: JOBOBJECT_IO_ATTRIBUTION_STATS,
  pub WriteStats: JOBOBJECT_IO_ATTRIBUTION_STATS,
}
#[test]
fn bindgen_test_layout__JOBOBJECT_IO_ATTRIBUTION_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_JOBOBJECT_IO_ATTRIBUTION_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_JOBOBJECT_IO_ATTRIBUTION_INFORMATION>(),
    72usize,
    concat!(
      "Size of: ",
      stringify!(_JOBOBJECT_IO_ATTRIBUTION_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_JOBOBJECT_IO_ATTRIBUTION_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_JOBOBJECT_IO_ATTRIBUTION_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_IO_ATTRIBUTION_INFORMATION),
      "::",
      stringify!(ControlFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReadStats) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_IO_ATTRIBUTION_INFORMATION),
      "::",
      stringify!(ReadStats)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).WriteStats) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_JOBOBJECT_IO_ATTRIBUTION_INFORMATION),
      "::",
      stringify!(WriteStats)
    )
  );
}
pub type JOBOBJECT_IO_ATTRIBUTION_INFORMATION = _JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
pub type PJOBOBJECT_IO_ATTRIBUTION_INFORMATION = *mut _JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
pub const _JOBOBJECTINFOCLASS_JobObjectBasicAccountingInformation: _JOBOBJECTINFOCLASS = 1;
pub const _JOBOBJECTINFOCLASS_JobObjectBasicLimitInformation: _JOBOBJECTINFOCLASS = 2;
pub const _JOBOBJECTINFOCLASS_JobObjectBasicProcessIdList: _JOBOBJECTINFOCLASS = 3;
pub const _JOBOBJECTINFOCLASS_JobObjectBasicUIRestrictions: _JOBOBJECTINFOCLASS = 4;
pub const _JOBOBJECTINFOCLASS_JobObjectSecurityLimitInformation: _JOBOBJECTINFOCLASS = 5;
pub const _JOBOBJECTINFOCLASS_JobObjectEndOfJobTimeInformation: _JOBOBJECTINFOCLASS = 6;
pub const _JOBOBJECTINFOCLASS_JobObjectAssociateCompletionPortInformation: _JOBOBJECTINFOCLASS = 7;
pub const _JOBOBJECTINFOCLASS_JobObjectBasicAndIoAccountingInformation: _JOBOBJECTINFOCLASS = 8;
pub const _JOBOBJECTINFOCLASS_JobObjectExtendedLimitInformation: _JOBOBJECTINFOCLASS = 9;
pub const _JOBOBJECTINFOCLASS_JobObjectJobSetInformation: _JOBOBJECTINFOCLASS = 10;
pub const _JOBOBJECTINFOCLASS_JobObjectGroupInformation: _JOBOBJECTINFOCLASS = 11;
pub const _JOBOBJECTINFOCLASS_JobObjectNotificationLimitInformation: _JOBOBJECTINFOCLASS = 12;
pub const _JOBOBJECTINFOCLASS_JobObjectLimitViolationInformation: _JOBOBJECTINFOCLASS = 13;
pub const _JOBOBJECTINFOCLASS_JobObjectGroupInformationEx: _JOBOBJECTINFOCLASS = 14;
pub const _JOBOBJECTINFOCLASS_JobObjectCpuRateControlInformation: _JOBOBJECTINFOCLASS = 15;
pub const _JOBOBJECTINFOCLASS_JobObjectCompletionFilter: _JOBOBJECTINFOCLASS = 16;
pub const _JOBOBJECTINFOCLASS_JobObjectCompletionCounter: _JOBOBJECTINFOCLASS = 17;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved1Information: _JOBOBJECTINFOCLASS = 18;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved2Information: _JOBOBJECTINFOCLASS = 19;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved3Information: _JOBOBJECTINFOCLASS = 20;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved4Information: _JOBOBJECTINFOCLASS = 21;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved5Information: _JOBOBJECTINFOCLASS = 22;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved6Information: _JOBOBJECTINFOCLASS = 23;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved7Information: _JOBOBJECTINFOCLASS = 24;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved8Information: _JOBOBJECTINFOCLASS = 25;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved9Information: _JOBOBJECTINFOCLASS = 26;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved10Information: _JOBOBJECTINFOCLASS = 27;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved11Information: _JOBOBJECTINFOCLASS = 28;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved12Information: _JOBOBJECTINFOCLASS = 29;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved13Information: _JOBOBJECTINFOCLASS = 30;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved14Information: _JOBOBJECTINFOCLASS = 31;
pub const _JOBOBJECTINFOCLASS_JobObjectNetRateControlInformation: _JOBOBJECTINFOCLASS = 32;
pub const _JOBOBJECTINFOCLASS_JobObjectNotificationLimitInformation2: _JOBOBJECTINFOCLASS = 33;
pub const _JOBOBJECTINFOCLASS_JobObjectLimitViolationInformation2: _JOBOBJECTINFOCLASS = 34;
pub const _JOBOBJECTINFOCLASS_JobObjectCreateSilo: _JOBOBJECTINFOCLASS = 35;
pub const _JOBOBJECTINFOCLASS_JobObjectSiloBasicInformation: _JOBOBJECTINFOCLASS = 36;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved15Information: _JOBOBJECTINFOCLASS = 37;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved16Information: _JOBOBJECTINFOCLASS = 38;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved17Information: _JOBOBJECTINFOCLASS = 39;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved18Information: _JOBOBJECTINFOCLASS = 40;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved19Information: _JOBOBJECTINFOCLASS = 41;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved20Information: _JOBOBJECTINFOCLASS = 42;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved21Information: _JOBOBJECTINFOCLASS = 43;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved22Information: _JOBOBJECTINFOCLASS = 44;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved23Information: _JOBOBJECTINFOCLASS = 45;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved24Information: _JOBOBJECTINFOCLASS = 46;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved25Information: _JOBOBJECTINFOCLASS = 47;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved26Information: _JOBOBJECTINFOCLASS = 48;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved27Information: _JOBOBJECTINFOCLASS = 49;
pub const _JOBOBJECTINFOCLASS_MaxJobObjectInfoClass: _JOBOBJECTINFOCLASS = 50;
pub type _JOBOBJECTINFOCLASS = ::std::os::raw::c_int;
pub use self::_JOBOBJECTINFOCLASS as JOBOBJECTINFOCLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SILOOBJECT_BASIC_INFORMATION {
  pub SiloId: DWORD,
  pub SiloParentId: DWORD,
  pub NumberOfProcesses: DWORD,
  pub IsInServerSilo: BOOLEAN,
  pub Reserved: [BYTE; 3usize],
}
#[test]
fn bindgen_test_layout__SILOOBJECT_BASIC_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_SILOOBJECT_BASIC_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SILOOBJECT_BASIC_INFORMATION>(),
    16usize,
    concat!("Size of: ", stringify!(_SILOOBJECT_BASIC_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_SILOOBJECT_BASIC_INFORMATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_SILOOBJECT_BASIC_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SiloId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SILOOBJECT_BASIC_INFORMATION),
      "::",
      stringify!(SiloId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SiloParentId) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SILOOBJECT_BASIC_INFORMATION),
      "::",
      stringify!(SiloParentId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfProcesses) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SILOOBJECT_BASIC_INFORMATION),
      "::",
      stringify!(NumberOfProcesses)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IsInServerSilo) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SILOOBJECT_BASIC_INFORMATION),
      "::",
      stringify!(IsInServerSilo)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    13usize,
    concat!(
      "Offset of field: ",
      stringify!(_SILOOBJECT_BASIC_INFORMATION),
      "::",
      stringify!(Reserved)
    )
  );
}
pub type SILOOBJECT_BASIC_INFORMATION = _SILOOBJECT_BASIC_INFORMATION;
pub type PSILOOBJECT_BASIC_INFORMATION = *mut _SILOOBJECT_BASIC_INFORMATION;
pub const _SERVERSILO_STATE_SERVERSILO_INITING: _SERVERSILO_STATE = 0;
pub const _SERVERSILO_STATE_SERVERSILO_STARTED: _SERVERSILO_STATE = 1;
pub const _SERVERSILO_STATE_SERVERSILO_SHUTTING_DOWN: _SERVERSILO_STATE = 2;
pub const _SERVERSILO_STATE_SERVERSILO_TERMINATING: _SERVERSILO_STATE = 3;
pub const _SERVERSILO_STATE_SERVERSILO_TERMINATED: _SERVERSILO_STATE = 4;
pub type _SERVERSILO_STATE = ::std::os::raw::c_int;
pub use self::_SERVERSILO_STATE as SERVERSILO_STATE;
pub type PSERVERSILO_STATE = *mut _SERVERSILO_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVERSILO_BASIC_INFORMATION {
  pub ServiceSessionId: DWORD,
  pub State: SERVERSILO_STATE,
  pub ExitStatus: DWORD,
  pub IsDownlevelContainer: BOOLEAN,
  pub ApiSetSchema: PVOID,
  pub HostApiSetSchema: PVOID,
}
#[test]
fn bindgen_test_layout__SERVERSILO_BASIC_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_SERVERSILO_BASIC_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SERVERSILO_BASIC_INFORMATION>(),
    32usize,
    concat!("Size of: ", stringify!(_SERVERSILO_BASIC_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_SERVERSILO_BASIC_INFORMATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_SERVERSILO_BASIC_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ServiceSessionId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SERVERSILO_BASIC_INFORMATION),
      "::",
      stringify!(ServiceSessionId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SERVERSILO_BASIC_INFORMATION),
      "::",
      stringify!(State)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExitStatus) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SERVERSILO_BASIC_INFORMATION),
      "::",
      stringify!(ExitStatus)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IsDownlevelContainer) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SERVERSILO_BASIC_INFORMATION),
      "::",
      stringify!(IsDownlevelContainer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ApiSetSchema) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SERVERSILO_BASIC_INFORMATION),
      "::",
      stringify!(ApiSetSchema)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HostApiSetSchema) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_SERVERSILO_BASIC_INFORMATION),
      "::",
      stringify!(HostApiSetSchema)
    )
  );
}
pub type SERVERSILO_BASIC_INFORMATION = _SERVERSILO_BASIC_INFORMATION;
pub type PSERVERSILO_BASIC_INFORMATION = *mut _SERVERSILO_BASIC_INFORMATION;
pub const _FIRMWARE_TYPE_FirmwareTypeUnknown: _FIRMWARE_TYPE = 0;
pub const _FIRMWARE_TYPE_FirmwareTypeBios: _FIRMWARE_TYPE = 1;
pub const _FIRMWARE_TYPE_FirmwareTypeUefi: _FIRMWARE_TYPE = 2;
pub const _FIRMWARE_TYPE_FirmwareTypeMax: _FIRMWARE_TYPE = 3;
pub type _FIRMWARE_TYPE = ::std::os::raw::c_int;
pub use self::_FIRMWARE_TYPE as FIRMWARE_TYPE;
pub type PFIRMWARE_TYPE = *mut _FIRMWARE_TYPE;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationProcessorCore: _LOGICAL_PROCESSOR_RELATIONSHIP =
  0;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationNumaNode: _LOGICAL_PROCESSOR_RELATIONSHIP = 1;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationCache: _LOGICAL_PROCESSOR_RELATIONSHIP = 2;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationProcessorPackage:
  _LOGICAL_PROCESSOR_RELATIONSHIP = 3;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationGroup: _LOGICAL_PROCESSOR_RELATIONSHIP = 4;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationProcessorDie: _LOGICAL_PROCESSOR_RELATIONSHIP = 5;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationNumaNodeEx: _LOGICAL_PROCESSOR_RELATIONSHIP = 6;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationProcessorModule: _LOGICAL_PROCESSOR_RELATIONSHIP =
  7;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationAll: _LOGICAL_PROCESSOR_RELATIONSHIP = 65535;
pub type _LOGICAL_PROCESSOR_RELATIONSHIP = ::std::os::raw::c_int;
pub use self::_LOGICAL_PROCESSOR_RELATIONSHIP as LOGICAL_PROCESSOR_RELATIONSHIP;
pub const _PROCESSOR_CACHE_TYPE_CacheUnified: _PROCESSOR_CACHE_TYPE = 0;
pub const _PROCESSOR_CACHE_TYPE_CacheInstruction: _PROCESSOR_CACHE_TYPE = 1;
pub const _PROCESSOR_CACHE_TYPE_CacheData: _PROCESSOR_CACHE_TYPE = 2;
pub const _PROCESSOR_CACHE_TYPE_CacheTrace: _PROCESSOR_CACHE_TYPE = 3;
pub type _PROCESSOR_CACHE_TYPE = ::std::os::raw::c_int;
pub use self::_PROCESSOR_CACHE_TYPE as PROCESSOR_CACHE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CACHE_DESCRIPTOR {
  pub Level: BYTE,
  pub Associativity: BYTE,
  pub LineSize: WORD,
  pub Size: DWORD,
  pub Type: PROCESSOR_CACHE_TYPE,
}
#[test]
fn bindgen_test_layout__CACHE_DESCRIPTOR() {
  const UNINIT: ::std::mem::MaybeUninit<_CACHE_DESCRIPTOR> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CACHE_DESCRIPTOR>(),
    12usize,
    concat!("Size of: ", stringify!(_CACHE_DESCRIPTOR))
  );
  assert_eq!(
    ::std::mem::align_of::<_CACHE_DESCRIPTOR>(),
    4usize,
    concat!("Alignment of ", stringify!(_CACHE_DESCRIPTOR))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Level) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_DESCRIPTOR),
      "::",
      stringify!(Level)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Associativity) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_DESCRIPTOR),
      "::",
      stringify!(Associativity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LineSize) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_DESCRIPTOR),
      "::",
      stringify!(LineSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_DESCRIPTOR),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_DESCRIPTOR),
      "::",
      stringify!(Type)
    )
  );
}
pub type CACHE_DESCRIPTOR = _CACHE_DESCRIPTOR;
pub type PCACHE_DESCRIPTOR = *mut _CACHE_DESCRIPTOR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
  pub ProcessorMask: ULONG_PTR,
  pub Relationship: LOGICAL_PROCESSOR_RELATIONSHIP,
  pub __bindgen_anon_1: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1 {
  pub ProcessorCore: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1,
  pub NumaNode: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2,
  pub Cache: CACHE_DESCRIPTOR,
  pub Reserved: [ULONGLONG; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
  pub Flags: BYTE,
}
#[test]
fn bindgen_test_layout__SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1>(),
    1usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2 {
  pub NodeNumber: DWORD,
}
#[test]
fn bindgen_test_layout__SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<
    _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NodeNumber) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2),
      "::",
      stringify!(NodeNumber)
    )
  );
}
#[test]
fn bindgen_test_layout__SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessorCore) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(ProcessorCore)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumaNode) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(NumaNode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Cache) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(Cache)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(Reserved)
    )
  );
}
#[test]
fn bindgen_test_layout__SYSTEM_LOGICAL_PROCESSOR_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION>(),
    32usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessorMask) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION),
      "::",
      stringify!(ProcessorMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Relationship) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION),
      "::",
      stringify!(Relationship)
    )
  );
}
pub type SYSTEM_LOGICAL_PROCESSOR_INFORMATION = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
pub type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = *mut _SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESSOR_RELATIONSHIP {
  pub Flags: BYTE,
  pub EfficiencyClass: BYTE,
  pub Reserved: [BYTE; 20usize],
  pub GroupCount: WORD,
  pub GroupMask: [GROUP_AFFINITY; 1usize],
}
#[test]
fn bindgen_test_layout__PROCESSOR_RELATIONSHIP() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESSOR_RELATIONSHIP> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESSOR_RELATIONSHIP>(),
    40usize,
    concat!("Size of: ", stringify!(_PROCESSOR_RELATIONSHIP))
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESSOR_RELATIONSHIP>(),
    8usize,
    concat!("Alignment of ", stringify!(_PROCESSOR_RELATIONSHIP))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_RELATIONSHIP),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EfficiencyClass) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_RELATIONSHIP),
      "::",
      stringify!(EfficiencyClass)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_RELATIONSHIP),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupCount) as usize - ptr as usize },
    22usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_RELATIONSHIP),
      "::",
      stringify!(GroupCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupMask) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_RELATIONSHIP),
      "::",
      stringify!(GroupMask)
    )
  );
}
pub type PROCESSOR_RELATIONSHIP = _PROCESSOR_RELATIONSHIP;
pub type PPROCESSOR_RELATIONSHIP = *mut _PROCESSOR_RELATIONSHIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NUMA_NODE_RELATIONSHIP {
  pub NodeNumber: DWORD,
  pub Reserved: [BYTE; 18usize],
  pub GroupCount: WORD,
  pub __bindgen_anon_1: _NUMA_NODE_RELATIONSHIP__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NUMA_NODE_RELATIONSHIP__bindgen_ty_1 {
  pub GroupMask: GROUP_AFFINITY,
  pub GroupMasks: [GROUP_AFFINITY; 1usize],
}
#[test]
fn bindgen_test_layout__NUMA_NODE_RELATIONSHIP__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_NUMA_NODE_RELATIONSHIP__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NUMA_NODE_RELATIONSHIP__bindgen_ty_1>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_NUMA_NODE_RELATIONSHIP__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_NUMA_NODE_RELATIONSHIP__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_NUMA_NODE_RELATIONSHIP__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupMask) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NUMA_NODE_RELATIONSHIP__bindgen_ty_1),
      "::",
      stringify!(GroupMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupMasks) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NUMA_NODE_RELATIONSHIP__bindgen_ty_1),
      "::",
      stringify!(GroupMasks)
    )
  );
}
#[test]
fn bindgen_test_layout__NUMA_NODE_RELATIONSHIP() {
  const UNINIT: ::std::mem::MaybeUninit<_NUMA_NODE_RELATIONSHIP> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NUMA_NODE_RELATIONSHIP>(),
    40usize,
    concat!("Size of: ", stringify!(_NUMA_NODE_RELATIONSHIP))
  );
  assert_eq!(
    ::std::mem::align_of::<_NUMA_NODE_RELATIONSHIP>(),
    8usize,
    concat!("Alignment of ", stringify!(_NUMA_NODE_RELATIONSHIP))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NodeNumber) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NUMA_NODE_RELATIONSHIP),
      "::",
      stringify!(NodeNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_NUMA_NODE_RELATIONSHIP),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupCount) as usize - ptr as usize },
    22usize,
    concat!(
      "Offset of field: ",
      stringify!(_NUMA_NODE_RELATIONSHIP),
      "::",
      stringify!(GroupCount)
    )
  );
}
pub type NUMA_NODE_RELATIONSHIP = _NUMA_NODE_RELATIONSHIP;
pub type PNUMA_NODE_RELATIONSHIP = *mut _NUMA_NODE_RELATIONSHIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CACHE_RELATIONSHIP {
  pub Level: BYTE,
  pub Associativity: BYTE,
  pub LineSize: WORD,
  pub CacheSize: DWORD,
  pub Type: PROCESSOR_CACHE_TYPE,
  pub Reserved: [BYTE; 18usize],
  pub GroupCount: WORD,
  pub __bindgen_anon_1: _CACHE_RELATIONSHIP__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CACHE_RELATIONSHIP__bindgen_ty_1 {
  pub GroupMask: GROUP_AFFINITY,
  pub GroupMasks: [GROUP_AFFINITY; 1usize],
}
#[test]
fn bindgen_test_layout__CACHE_RELATIONSHIP__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_CACHE_RELATIONSHIP__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CACHE_RELATIONSHIP__bindgen_ty_1>(),
    16usize,
    concat!("Size of: ", stringify!(_CACHE_RELATIONSHIP__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_CACHE_RELATIONSHIP__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_CACHE_RELATIONSHIP__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupMask) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_RELATIONSHIP__bindgen_ty_1),
      "::",
      stringify!(GroupMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupMasks) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_RELATIONSHIP__bindgen_ty_1),
      "::",
      stringify!(GroupMasks)
    )
  );
}
#[test]
fn bindgen_test_layout__CACHE_RELATIONSHIP() {
  const UNINIT: ::std::mem::MaybeUninit<_CACHE_RELATIONSHIP> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CACHE_RELATIONSHIP>(),
    48usize,
    concat!("Size of: ", stringify!(_CACHE_RELATIONSHIP))
  );
  assert_eq!(
    ::std::mem::align_of::<_CACHE_RELATIONSHIP>(),
    8usize,
    concat!("Alignment of ", stringify!(_CACHE_RELATIONSHIP))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Level) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_RELATIONSHIP),
      "::",
      stringify!(Level)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Associativity) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_RELATIONSHIP),
      "::",
      stringify!(Associativity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LineSize) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_RELATIONSHIP),
      "::",
      stringify!(LineSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CacheSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_RELATIONSHIP),
      "::",
      stringify!(CacheSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_RELATIONSHIP),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_RELATIONSHIP),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupCount) as usize - ptr as usize },
    30usize,
    concat!(
      "Offset of field: ",
      stringify!(_CACHE_RELATIONSHIP),
      "::",
      stringify!(GroupCount)
    )
  );
}
pub type CACHE_RELATIONSHIP = _CACHE_RELATIONSHIP;
pub type PCACHE_RELATIONSHIP = *mut _CACHE_RELATIONSHIP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESSOR_GROUP_INFO {
  pub MaximumProcessorCount: BYTE,
  pub ActiveProcessorCount: BYTE,
  pub Reserved: [BYTE; 38usize],
  pub ActiveProcessorMask: KAFFINITY,
}
#[test]
fn bindgen_test_layout__PROCESSOR_GROUP_INFO() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESSOR_GROUP_INFO> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESSOR_GROUP_INFO>(),
    48usize,
    concat!("Size of: ", stringify!(_PROCESSOR_GROUP_INFO))
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESSOR_GROUP_INFO>(),
    8usize,
    concat!("Alignment of ", stringify!(_PROCESSOR_GROUP_INFO))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumProcessorCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_GROUP_INFO),
      "::",
      stringify!(MaximumProcessorCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ActiveProcessorCount) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_GROUP_INFO),
      "::",
      stringify!(ActiveProcessorCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_GROUP_INFO),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ActiveProcessorMask) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_GROUP_INFO),
      "::",
      stringify!(ActiveProcessorMask)
    )
  );
}
pub type PROCESSOR_GROUP_INFO = _PROCESSOR_GROUP_INFO;
pub type PPROCESSOR_GROUP_INFO = *mut _PROCESSOR_GROUP_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GROUP_RELATIONSHIP {
  pub MaximumGroupCount: WORD,
  pub ActiveGroupCount: WORD,
  pub Reserved: [BYTE; 20usize],
  pub GroupInfo: [PROCESSOR_GROUP_INFO; 1usize],
}
#[test]
fn bindgen_test_layout__GROUP_RELATIONSHIP() {
  const UNINIT: ::std::mem::MaybeUninit<_GROUP_RELATIONSHIP> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_GROUP_RELATIONSHIP>(),
    72usize,
    concat!("Size of: ", stringify!(_GROUP_RELATIONSHIP))
  );
  assert_eq!(
    ::std::mem::align_of::<_GROUP_RELATIONSHIP>(),
    8usize,
    concat!("Alignment of ", stringify!(_GROUP_RELATIONSHIP))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumGroupCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_GROUP_RELATIONSHIP),
      "::",
      stringify!(MaximumGroupCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ActiveGroupCount) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_GROUP_RELATIONSHIP),
      "::",
      stringify!(ActiveGroupCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_GROUP_RELATIONSHIP),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupInfo) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_GROUP_RELATIONSHIP),
      "::",
      stringify!(GroupInfo)
    )
  );
}
pub type GROUP_RELATIONSHIP = _GROUP_RELATIONSHIP;
pub type PGROUP_RELATIONSHIP = *mut _GROUP_RELATIONSHIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
  pub Relationship: LOGICAL_PROCESSOR_RELATIONSHIP,
  pub Size: DWORD,
  pub __bindgen_anon_1: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1 {
  pub Processor: PROCESSOR_RELATIONSHIP,
  pub NumaNode: NUMA_NODE_RELATIONSHIP,
  pub Cache: CACHE_RELATIONSHIP,
  pub Group: GROUP_RELATIONSHIP,
}
#[test]
fn bindgen_test_layout__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1>(),
    72usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Processor) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1),
      "::",
      stringify!(Processor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumaNode) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1),
      "::",
      stringify!(NumaNode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Cache) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1),
      "::",
      stringify!(Cache)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Group) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1),
      "::",
      stringify!(Group)
    )
  );
}
#[test]
fn bindgen_test_layout__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX>(),
    80usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Relationship) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX),
      "::",
      stringify!(Relationship)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX),
      "::",
      stringify!(Size)
    )
  );
}
pub type SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
pub type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = *mut _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
pub const _CPU_SET_INFORMATION_TYPE_CpuSetInformation: _CPU_SET_INFORMATION_TYPE = 0;
pub type _CPU_SET_INFORMATION_TYPE = ::std::os::raw::c_int;
pub use self::_CPU_SET_INFORMATION_TYPE as CPU_SET_INFORMATION_TYPE;
pub type PCPU_SET_INFORMATION_TYPE = *mut _CPU_SET_INFORMATION_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_CPU_SET_INFORMATION {
  pub Size: DWORD,
  pub Type: CPU_SET_INFORMATION_TYPE,
  pub __bindgen_anon_1: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1 {
  pub CpuSet: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
  pub Id: DWORD,
  pub Group: WORD,
  pub LogicalProcessorIndex: BYTE,
  pub CoreIndex: BYTE,
  pub LastLevelCacheIndex: BYTE,
  pub NumaNodeIndex: BYTE,
  pub EfficiencyClass: BYTE,
  pub __bindgen_anon_1: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
  pub __bindgen_anon_2: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
  pub AllocationTag: DWORD64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
  pub AllFlags: BYTE,
  pub __bindgen_anon_1:
    _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout__SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1(
) {
  assert_eq!(
    ::std::mem::size_of::<
      _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >(),
    1usize,
    concat!(
      "Size of: ",
      stringify!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
      )
    )
  );
  assert_eq!(
    ::std::mem::align_of::<
      _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
      )
    )
  );
}
impl _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn Parked(&self) -> BYTE {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
  }
  #[inline]
  pub fn set_Parked(&mut self, val: BYTE) {
    unsafe {
      let val: u8 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Allocated(&self) -> BYTE {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
  }
  #[inline]
  pub fn set_Allocated(&mut self, val: BYTE) {
    unsafe {
      let val: u8 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AllocatedToTargetProcess(&self) -> BYTE {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
  }
  #[inline]
  pub fn set_AllocatedToTargetProcess(&mut self, val: BYTE) {
    unsafe {
      let val: u8 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn RealTime(&self) -> BYTE {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
  }
  #[inline]
  pub fn set_RealTime(&mut self, val: BYTE) {
    unsafe {
      let val: u8 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedFlags(&self) -> BYTE {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
  }
  #[inline]
  pub fn set_ReservedFlags(&mut self, val: BYTE) {
    unsafe {
      let val: u8 = ::std::mem::transmute(val);
      self._bitfield_1.set(4usize, 4u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    Parked: BYTE,
    Allocated: BYTE,
    AllocatedToTargetProcess: BYTE,
    RealTime: BYTE,
    ReservedFlags: BYTE,
  ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let Parked: u8 = unsafe { ::std::mem::transmute(Parked) };
      Parked as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let Allocated: u8 = unsafe { ::std::mem::transmute(Allocated) };
      Allocated as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let AllocatedToTargetProcess: u8 = unsafe { ::std::mem::transmute(AllocatedToTargetProcess) };
      AllocatedToTargetProcess as u64
    });
    __bindgen_bitfield_unit.set(3usize, 1u8, {
      let RealTime: u8 = unsafe { ::std::mem::transmute(RealTime) };
      RealTime as u64
    });
    __bindgen_bitfield_unit.set(4usize, 4u8, {
      let ReservedFlags: u8 = unsafe { ::std::mem::transmute(ReservedFlags) };
      ReservedFlags as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
    1usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AllFlags)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
  pub Reserved: DWORD,
  pub SchedulingClass: BYTE,
}
#[test]
fn bindgen_test_layout__SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<
    _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SchedulingClass) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2),
      "::",
      stringify!(SchedulingClass)
    )
  );
}
#[test]
fn bindgen_test_layout__SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1>(),
    24usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Id) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Id)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Group) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Group)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LogicalProcessorIndex) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(LogicalProcessorIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CoreIndex) as usize - ptr as usize },
    7usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(CoreIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastLevelCacheIndex) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(LastLevelCacheIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumaNodeIndex) as usize - ptr as usize },
    9usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(NumaNodeIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EfficiencyClass) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(EfficiencyClass)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllocationTag) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AllocationTag)
    )
  );
}
#[test]
fn bindgen_test_layout__SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1>(),
    24usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CpuSet) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(CpuSet)
    )
  );
}
#[test]
fn bindgen_test_layout__SYSTEM_CPU_SET_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_CPU_SET_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_CPU_SET_INFORMATION>(),
    32usize,
    concat!("Size of: ", stringify!(_SYSTEM_CPU_SET_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_CPU_SET_INFORMATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_SYSTEM_CPU_SET_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_CPU_SET_INFORMATION),
      "::",
      stringify!(Type)
    )
  );
}
pub type SYSTEM_CPU_SET_INFORMATION = _SYSTEM_CPU_SET_INFORMATION;
pub type PSYSTEM_CPU_SET_INFORMATION = *mut _SYSTEM_CPU_SET_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_POOL_ZEROING_INFORMATION {
  pub PoolZeroingSupportPresent: BOOLEAN,
}
#[test]
fn bindgen_test_layout__SYSTEM_POOL_ZEROING_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_POOL_ZEROING_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_POOL_ZEROING_INFORMATION>(),
    1usize,
    concat!("Size of: ", stringify!(_SYSTEM_POOL_ZEROING_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_POOL_ZEROING_INFORMATION>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_POOL_ZEROING_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PoolZeroingSupportPresent) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POOL_ZEROING_INFORMATION),
      "::",
      stringify!(PoolZeroingSupportPresent)
    )
  );
}
pub type SYSTEM_POOL_ZEROING_INFORMATION = _SYSTEM_POOL_ZEROING_INFORMATION;
pub type PSYSTEM_POOL_ZEROING_INFORMATION = *mut _SYSTEM_POOL_ZEROING_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
  pub CycleTime: DWORD64,
}
#[test]
fn bindgen_test_layout__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CycleTime) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION),
      "::",
      stringify!(CycleTime)
    )
  );
}
pub type SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
pub type PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = *mut _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION {
  pub _bitfield_align_1: [u16; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION() {
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION)
    )
  );
}
impl _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION {
  #[inline]
  pub fn Machine(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
  }
  #[inline]
  pub fn set_Machine(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 16u8, val as u64)
    }
  }
  #[inline]
  pub fn KernelMode(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_KernelMode(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(16usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn UserMode(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_UserMode(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(17usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Native(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Native(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(18usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Process(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Process(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(19usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn WoW64Container(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_WoW64Container(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(20usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedZero0(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedZero0(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(21usize, 11u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    Machine: DWORD,
    KernelMode: DWORD,
    UserMode: DWORD,
    Native: DWORD,
    Process: DWORD,
    WoW64Container: DWORD,
    ReservedZero0: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 16u8, {
      let Machine: u32 = unsafe { ::std::mem::transmute(Machine) };
      Machine as u64
    });
    __bindgen_bitfield_unit.set(16usize, 1u8, {
      let KernelMode: u32 = unsafe { ::std::mem::transmute(KernelMode) };
      KernelMode as u64
    });
    __bindgen_bitfield_unit.set(17usize, 1u8, {
      let UserMode: u32 = unsafe { ::std::mem::transmute(UserMode) };
      UserMode as u64
    });
    __bindgen_bitfield_unit.set(18usize, 1u8, {
      let Native: u32 = unsafe { ::std::mem::transmute(Native) };
      Native as u64
    });
    __bindgen_bitfield_unit.set(19usize, 1u8, {
      let Process: u32 = unsafe { ::std::mem::transmute(Process) };
      Process as u64
    });
    __bindgen_bitfield_unit.set(20usize, 1u8, {
      let WoW64Container: u32 = unsafe { ::std::mem::transmute(WoW64Container) };
      WoW64Container as u64
    });
    __bindgen_bitfield_unit.set(21usize, 11u8, {
      let ReservedZero0: u32 = unsafe { ::std::mem::transmute(ReservedZero0) };
      ReservedZero0 as u64
    });
    __bindgen_bitfield_unit
  }
}
pub type SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION =
  _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XSTATE_FEATURE {
  pub Offset: DWORD,
  pub Size: DWORD,
}
#[test]
fn bindgen_test_layout__XSTATE_FEATURE() {
  const UNINIT: ::std::mem::MaybeUninit<_XSTATE_FEATURE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_XSTATE_FEATURE>(),
    8usize,
    concat!("Size of: ", stringify!(_XSTATE_FEATURE))
  );
  assert_eq!(
    ::std::mem::align_of::<_XSTATE_FEATURE>(),
    4usize,
    concat!("Alignment of ", stringify!(_XSTATE_FEATURE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_FEATURE),
      "::",
      stringify!(Offset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_FEATURE),
      "::",
      stringify!(Size)
    )
  );
}
pub type XSTATE_FEATURE = _XSTATE_FEATURE;
pub type PXSTATE_FEATURE = *mut _XSTATE_FEATURE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XSTATE_CONFIGURATION {
  pub EnabledFeatures: DWORD64,
  pub EnabledVolatileFeatures: DWORD64,
  pub Size: DWORD,
  pub __bindgen_anon_1: _XSTATE_CONFIGURATION__bindgen_ty_1,
  pub Features: [XSTATE_FEATURE; 64usize],
  pub EnabledSupervisorFeatures: DWORD64,
  pub AlignedFeatures: DWORD64,
  pub AllFeatureSize: DWORD,
  pub AllFeatures: [DWORD; 64usize],
  pub EnabledUserVisibleSupervisorFeatures: DWORD64,
  pub ExtendedFeatureDisableFeatures: DWORD64,
  pub AllNonLargeFeatureSize: DWORD,
  pub Spare: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XSTATE_CONFIGURATION__bindgen_ty_1 {
  pub ControlFlags: DWORD,
  pub __bindgen_anon_1: _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
  pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout__XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn OptimizedSave(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_OptimizedSave(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn CompactionEnabled(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_CompactionEnabled(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ExtendedFeatureDisable(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_ExtendedFeatureDisable(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    OptimizedSave: DWORD,
    CompactionEnabled: DWORD,
    ExtendedFeatureDisable: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let OptimizedSave: u32 = unsafe { ::std::mem::transmute(OptimizedSave) };
      OptimizedSave as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let CompactionEnabled: u32 = unsafe { ::std::mem::transmute(CompactionEnabled) };
      CompactionEnabled as u64
    });
    __bindgen_bitfield_unit.set(2usize, 1u8, {
      let ExtendedFeatureDisable: u32 = unsafe { ::std::mem::transmute(ExtendedFeatureDisable) };
      ExtendedFeatureDisable as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__XSTATE_CONFIGURATION__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_XSTATE_CONFIGURATION__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_XSTATE_CONFIGURATION__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(_XSTATE_CONFIGURATION__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_XSTATE_CONFIGURATION__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_XSTATE_CONFIGURATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ControlFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION__bindgen_ty_1),
      "::",
      stringify!(ControlFlags)
    )
  );
}
#[test]
fn bindgen_test_layout__XSTATE_CONFIGURATION() {
  const UNINIT: ::std::mem::MaybeUninit<_XSTATE_CONFIGURATION> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_XSTATE_CONFIGURATION>(),
    840usize,
    concat!("Size of: ", stringify!(_XSTATE_CONFIGURATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_XSTATE_CONFIGURATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_XSTATE_CONFIGURATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnabledFeatures) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(EnabledFeatures)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnabledVolatileFeatures) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(EnabledVolatileFeatures)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Features) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(Features)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnabledSupervisorFeatures) as usize - ptr as usize },
    536usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(EnabledSupervisorFeatures)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AlignedFeatures) as usize - ptr as usize },
    544usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(AlignedFeatures)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllFeatureSize) as usize - ptr as usize },
    552usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(AllFeatureSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllFeatures) as usize - ptr as usize },
    556usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(AllFeatures)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).EnabledUserVisibleSupervisorFeatures) as usize - ptr as usize
    },
    816usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(EnabledUserVisibleSupervisorFeatures)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExtendedFeatureDisableFeatures) as usize - ptr as usize },
    824usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(ExtendedFeatureDisableFeatures)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllNonLargeFeatureSize) as usize - ptr as usize },
    832usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(AllNonLargeFeatureSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Spare) as usize - ptr as usize },
    836usize,
    concat!(
      "Offset of field: ",
      stringify!(_XSTATE_CONFIGURATION),
      "::",
      stringify!(Spare)
    )
  );
}
pub type XSTATE_CONFIGURATION = _XSTATE_CONFIGURATION;
pub type PXSTATE_CONFIGURATION = *mut _XSTATE_CONFIGURATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_BASIC_INFORMATION {
  pub BaseAddress: PVOID,
  pub AllocationBase: PVOID,
  pub AllocationProtect: DWORD,
  pub PartitionId: WORD,
  pub RegionSize: SIZE_T,
  pub State: DWORD,
  pub Protect: DWORD,
  pub Type: DWORD,
}
#[test]
fn bindgen_test_layout__MEMORY_BASIC_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_MEMORY_BASIC_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_MEMORY_BASIC_INFORMATION>(),
    48usize,
    concat!("Size of: ", stringify!(_MEMORY_BASIC_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_MEMORY_BASIC_INFORMATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_MEMORY_BASIC_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION),
      "::",
      stringify!(BaseAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllocationBase) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION),
      "::",
      stringify!(AllocationBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllocationProtect) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION),
      "::",
      stringify!(AllocationProtect)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PartitionId) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION),
      "::",
      stringify!(PartitionId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RegionSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION),
      "::",
      stringify!(RegionSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION),
      "::",
      stringify!(State)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Protect) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION),
      "::",
      stringify!(Protect)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION),
      "::",
      stringify!(Type)
    )
  );
}
pub type MEMORY_BASIC_INFORMATION = _MEMORY_BASIC_INFORMATION;
pub type PMEMORY_BASIC_INFORMATION = *mut _MEMORY_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_BASIC_INFORMATION32 {
  pub BaseAddress: DWORD,
  pub AllocationBase: DWORD,
  pub AllocationProtect: DWORD,
  pub RegionSize: DWORD,
  pub State: DWORD,
  pub Protect: DWORD,
  pub Type: DWORD,
}
#[test]
fn bindgen_test_layout__MEMORY_BASIC_INFORMATION32() {
  const UNINIT: ::std::mem::MaybeUninit<_MEMORY_BASIC_INFORMATION32> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_MEMORY_BASIC_INFORMATION32>(),
    28usize,
    concat!("Size of: ", stringify!(_MEMORY_BASIC_INFORMATION32))
  );
  assert_eq!(
    ::std::mem::align_of::<_MEMORY_BASIC_INFORMATION32>(),
    4usize,
    concat!("Alignment of ", stringify!(_MEMORY_BASIC_INFORMATION32))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION32),
      "::",
      stringify!(BaseAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllocationBase) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION32),
      "::",
      stringify!(AllocationBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllocationProtect) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION32),
      "::",
      stringify!(AllocationProtect)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RegionSize) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION32),
      "::",
      stringify!(RegionSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION32),
      "::",
      stringify!(State)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Protect) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION32),
      "::",
      stringify!(Protect)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION32),
      "::",
      stringify!(Type)
    )
  );
}
pub type MEMORY_BASIC_INFORMATION32 = _MEMORY_BASIC_INFORMATION32;
pub type PMEMORY_BASIC_INFORMATION32 = *mut _MEMORY_BASIC_INFORMATION32;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_BASIC_INFORMATION64 {
  pub BaseAddress: ULONGLONG,
  pub AllocationBase: ULONGLONG,
  pub AllocationProtect: DWORD,
  pub __alignment1: DWORD,
  pub RegionSize: ULONGLONG,
  pub State: DWORD,
  pub Protect: DWORD,
  pub Type: DWORD,
  pub __alignment2: DWORD,
}
#[test]
fn bindgen_test_layout__MEMORY_BASIC_INFORMATION64() {
  const UNINIT: ::std::mem::MaybeUninit<_MEMORY_BASIC_INFORMATION64> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_MEMORY_BASIC_INFORMATION64>(),
    48usize,
    concat!("Size of: ", stringify!(_MEMORY_BASIC_INFORMATION64))
  );
  assert_eq!(
    ::std::mem::align_of::<_MEMORY_BASIC_INFORMATION64>(),
    16usize,
    concat!("Alignment of ", stringify!(_MEMORY_BASIC_INFORMATION64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION64),
      "::",
      stringify!(BaseAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllocationBase) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION64),
      "::",
      stringify!(AllocationBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllocationProtect) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION64),
      "::",
      stringify!(AllocationProtect)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).__alignment1) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION64),
      "::",
      stringify!(__alignment1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RegionSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION64),
      "::",
      stringify!(RegionSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION64),
      "::",
      stringify!(State)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Protect) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION64),
      "::",
      stringify!(Protect)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION64),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).__alignment2) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_BASIC_INFORMATION64),
      "::",
      stringify!(__alignment2)
    )
  );
}
pub type MEMORY_BASIC_INFORMATION64 = _MEMORY_BASIC_INFORMATION64;
pub type PMEMORY_BASIC_INFORMATION64 = *mut _MEMORY_BASIC_INFORMATION64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CFG_CALL_TARGET_INFO {
  pub Offset: ULONG_PTR,
  pub Flags: ULONG_PTR,
}
#[test]
fn bindgen_test_layout__CFG_CALL_TARGET_INFO() {
  const UNINIT: ::std::mem::MaybeUninit<_CFG_CALL_TARGET_INFO> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CFG_CALL_TARGET_INFO>(),
    16usize,
    concat!("Size of: ", stringify!(_CFG_CALL_TARGET_INFO))
  );
  assert_eq!(
    ::std::mem::align_of::<_CFG_CALL_TARGET_INFO>(),
    8usize,
    concat!("Alignment of ", stringify!(_CFG_CALL_TARGET_INFO))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CFG_CALL_TARGET_INFO),
      "::",
      stringify!(Offset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_CFG_CALL_TARGET_INFO),
      "::",
      stringify!(Flags)
    )
  );
}
pub type CFG_CALL_TARGET_INFO = _CFG_CALL_TARGET_INFO;
pub type PCFG_CALL_TARGET_INFO = *mut _CFG_CALL_TARGET_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEM_ADDRESS_REQUIREMENTS {
  pub LowestStartingAddress: PVOID,
  pub HighestEndingAddress: PVOID,
  pub Alignment: SIZE_T,
}
#[test]
fn bindgen_test_layout__MEM_ADDRESS_REQUIREMENTS() {
  const UNINIT: ::std::mem::MaybeUninit<_MEM_ADDRESS_REQUIREMENTS> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_MEM_ADDRESS_REQUIREMENTS>(),
    24usize,
    concat!("Size of: ", stringify!(_MEM_ADDRESS_REQUIREMENTS))
  );
  assert_eq!(
    ::std::mem::align_of::<_MEM_ADDRESS_REQUIREMENTS>(),
    8usize,
    concat!("Alignment of ", stringify!(_MEM_ADDRESS_REQUIREMENTS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LowestStartingAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEM_ADDRESS_REQUIREMENTS),
      "::",
      stringify!(LowestStartingAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HighestEndingAddress) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEM_ADDRESS_REQUIREMENTS),
      "::",
      stringify!(HighestEndingAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Alignment) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEM_ADDRESS_REQUIREMENTS),
      "::",
      stringify!(Alignment)
    )
  );
}
pub type MEM_ADDRESS_REQUIREMENTS = _MEM_ADDRESS_REQUIREMENTS;
pub type PMEM_ADDRESS_REQUIREMENTS = *mut _MEM_ADDRESS_REQUIREMENTS;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterInvalidType: MEM_EXTENDED_PARAMETER_TYPE =
  0;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterAddressRequirements:
  MEM_EXTENDED_PARAMETER_TYPE = 1;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterNumaNode: MEM_EXTENDED_PARAMETER_TYPE = 2;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterPartitionHandle:
  MEM_EXTENDED_PARAMETER_TYPE = 3;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterUserPhysicalHandle:
  MEM_EXTENDED_PARAMETER_TYPE = 4;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterAttributeFlags:
  MEM_EXTENDED_PARAMETER_TYPE = 5;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterImageMachine:
  MEM_EXTENDED_PARAMETER_TYPE = 6;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterMax: MEM_EXTENDED_PARAMETER_TYPE = 7;
pub type MEM_EXTENDED_PARAMETER_TYPE = ::std::os::raw::c_int;
pub type PMEM_EXTENDED_PARAMETER_TYPE = *mut MEM_EXTENDED_PARAMETER_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MEM_EXTENDED_PARAMETER {
  pub __bindgen_anon_1: MEM_EXTENDED_PARAMETER__bindgen_ty_1,
  pub __bindgen_anon_2: MEM_EXTENDED_PARAMETER__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct MEM_EXTENDED_PARAMETER__bindgen_ty_1 {
  pub _bitfield_align_1: [u64; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_MEM_EXTENDED_PARAMETER__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<MEM_EXTENDED_PARAMETER__bindgen_ty_1>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(MEM_EXTENDED_PARAMETER__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<MEM_EXTENDED_PARAMETER__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(MEM_EXTENDED_PARAMETER__bindgen_ty_1)
    )
  );
}
impl MEM_EXTENDED_PARAMETER__bindgen_ty_1 {
  #[inline]
  pub fn Type(&self) -> DWORD64 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u64) }
  }
  #[inline]
  pub fn set_Type(&mut self, val: DWORD64) {
    unsafe {
      let val: u64 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved(&self) -> DWORD64 {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 56u8) as u64) }
  }
  #[inline]
  pub fn set_Reserved(&mut self, val: DWORD64) {
    unsafe {
      let val: u64 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 56u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(Type: DWORD64, Reserved: DWORD64) -> __BindgenBitfieldUnit<[u8; 8usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 8u8, {
      let Type: u64 = unsafe { ::std::mem::transmute(Type) };
      Type as u64
    });
    __bindgen_bitfield_unit.set(8usize, 56u8, {
      let Reserved: u64 = unsafe { ::std::mem::transmute(Reserved) };
      Reserved as u64
    });
    __bindgen_bitfield_unit
  }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MEM_EXTENDED_PARAMETER__bindgen_ty_2 {
  pub ULong64: DWORD64,
  pub Pointer: PVOID,
  pub Size: SIZE_T,
  pub Handle: HANDLE,
  pub ULong: DWORD,
}
#[test]
fn bindgen_test_layout_MEM_EXTENDED_PARAMETER__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<MEM_EXTENDED_PARAMETER__bindgen_ty_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<MEM_EXTENDED_PARAMETER__bindgen_ty_2>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(MEM_EXTENDED_PARAMETER__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<MEM_EXTENDED_PARAMETER__bindgen_ty_2>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(MEM_EXTENDED_PARAMETER__bindgen_ty_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ULong64) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(MEM_EXTENDED_PARAMETER__bindgen_ty_2),
      "::",
      stringify!(ULong64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Pointer) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(MEM_EXTENDED_PARAMETER__bindgen_ty_2),
      "::",
      stringify!(Pointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(MEM_EXTENDED_PARAMETER__bindgen_ty_2),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Handle) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(MEM_EXTENDED_PARAMETER__bindgen_ty_2),
      "::",
      stringify!(Handle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ULong) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(MEM_EXTENDED_PARAMETER__bindgen_ty_2),
      "::",
      stringify!(ULong)
    )
  );
}
#[test]
fn bindgen_test_layout_MEM_EXTENDED_PARAMETER() {
  assert_eq!(
    ::std::mem::size_of::<MEM_EXTENDED_PARAMETER>(),
    16usize,
    concat!("Size of: ", stringify!(MEM_EXTENDED_PARAMETER))
  );
  assert_eq!(
    ::std::mem::align_of::<MEM_EXTENDED_PARAMETER>(),
    8usize,
    concat!("Alignment of ", stringify!(MEM_EXTENDED_PARAMETER))
  );
}
pub type PMEM_EXTENDED_PARAMETER = *mut MEM_EXTENDED_PARAMETER;
pub const _MEM_DEDICATED_ATTRIBUTE_TYPE_MemDedicatedAttributeReadBandwidth:
  _MEM_DEDICATED_ATTRIBUTE_TYPE = 0;
pub const _MEM_DEDICATED_ATTRIBUTE_TYPE_MemDedicatedAttributeReadLatency:
  _MEM_DEDICATED_ATTRIBUTE_TYPE = 1;
pub const _MEM_DEDICATED_ATTRIBUTE_TYPE_MemDedicatedAttributeWriteBandwidth:
  _MEM_DEDICATED_ATTRIBUTE_TYPE = 2;
pub const _MEM_DEDICATED_ATTRIBUTE_TYPE_MemDedicatedAttributeWriteLatency:
  _MEM_DEDICATED_ATTRIBUTE_TYPE = 3;
pub const _MEM_DEDICATED_ATTRIBUTE_TYPE_MemDedicatedAttributeMax: _MEM_DEDICATED_ATTRIBUTE_TYPE = 4;
pub type _MEM_DEDICATED_ATTRIBUTE_TYPE = ::std::os::raw::c_int;
pub use self::_MEM_DEDICATED_ATTRIBUTE_TYPE as MEM_DEDICATED_ATTRIBUTE_TYPE;
pub type PMEM_DEDICATED_ATTRIBUTE_TYPE = *mut _MEM_DEDICATED_ATTRIBUTE_TYPE;
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterInvalidType:
  MEM_SECTION_EXTENDED_PARAMETER_TYPE = 0;
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterUserPhysicalFlags:
  MEM_SECTION_EXTENDED_PARAMETER_TYPE = 1;
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterNumaNode:
  MEM_SECTION_EXTENDED_PARAMETER_TYPE = 2;
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterSigningLevel:
  MEM_SECTION_EXTENDED_PARAMETER_TYPE = 3;
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterMax:
  MEM_SECTION_EXTENDED_PARAMETER_TYPE = 4;
pub type MEM_SECTION_EXTENDED_PARAMETER_TYPE = ::std::os::raw::c_int;
pub type PMEM_SECTION_EXTENDED_PARAMETER_TYPE = *mut MEM_SECTION_EXTENDED_PARAMETER_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_CREATE_INFO_SGX {
  pub Secs: [BYTE; 4096usize],
}
#[test]
fn bindgen_test_layout__ENCLAVE_CREATE_INFO_SGX() {
  const UNINIT: ::std::mem::MaybeUninit<_ENCLAVE_CREATE_INFO_SGX> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ENCLAVE_CREATE_INFO_SGX>(),
    4096usize,
    concat!("Size of: ", stringify!(_ENCLAVE_CREATE_INFO_SGX))
  );
  assert_eq!(
    ::std::mem::align_of::<_ENCLAVE_CREATE_INFO_SGX>(),
    1usize,
    concat!("Alignment of ", stringify!(_ENCLAVE_CREATE_INFO_SGX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Secs) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_CREATE_INFO_SGX),
      "::",
      stringify!(Secs)
    )
  );
}
pub type ENCLAVE_CREATE_INFO_SGX = _ENCLAVE_CREATE_INFO_SGX;
pub type PENCLAVE_CREATE_INFO_SGX = *mut _ENCLAVE_CREATE_INFO_SGX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_INIT_INFO_SGX {
  pub SigStruct: [BYTE; 1808usize],
  pub Reserved1: [BYTE; 240usize],
  pub EInitToken: [BYTE; 304usize],
  pub Reserved2: [BYTE; 1744usize],
}
#[test]
fn bindgen_test_layout__ENCLAVE_INIT_INFO_SGX() {
  const UNINIT: ::std::mem::MaybeUninit<_ENCLAVE_INIT_INFO_SGX> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ENCLAVE_INIT_INFO_SGX>(),
    4096usize,
    concat!("Size of: ", stringify!(_ENCLAVE_INIT_INFO_SGX))
  );
  assert_eq!(
    ::std::mem::align_of::<_ENCLAVE_INIT_INFO_SGX>(),
    1usize,
    concat!("Alignment of ", stringify!(_ENCLAVE_INIT_INFO_SGX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SigStruct) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_SGX),
      "::",
      stringify!(SigStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
    1808usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_SGX),
      "::",
      stringify!(Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EInitToken) as usize - ptr as usize },
    2048usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_SGX),
      "::",
      stringify!(EInitToken)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    2352usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_SGX),
      "::",
      stringify!(Reserved2)
    )
  );
}
pub type ENCLAVE_INIT_INFO_SGX = _ENCLAVE_INIT_INFO_SGX;
pub type PENCLAVE_INIT_INFO_SGX = *mut _ENCLAVE_INIT_INFO_SGX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_CREATE_INFO_VBS {
  pub Flags: DWORD,
  pub OwnerID: [BYTE; 32usize],
}
#[test]
fn bindgen_test_layout__ENCLAVE_CREATE_INFO_VBS() {
  const UNINIT: ::std::mem::MaybeUninit<_ENCLAVE_CREATE_INFO_VBS> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ENCLAVE_CREATE_INFO_VBS>(),
    36usize,
    concat!("Size of: ", stringify!(_ENCLAVE_CREATE_INFO_VBS))
  );
  assert_eq!(
    ::std::mem::align_of::<_ENCLAVE_CREATE_INFO_VBS>(),
    4usize,
    concat!("Alignment of ", stringify!(_ENCLAVE_CREATE_INFO_VBS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_CREATE_INFO_VBS),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OwnerID) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_CREATE_INFO_VBS),
      "::",
      stringify!(OwnerID)
    )
  );
}
pub type ENCLAVE_CREATE_INFO_VBS = _ENCLAVE_CREATE_INFO_VBS;
pub type PENCLAVE_CREATE_INFO_VBS = *mut _ENCLAVE_CREATE_INFO_VBS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_CREATE_INFO_VBS_BASIC {
  pub Flags: DWORD,
  pub OwnerID: [BYTE; 32usize],
}
#[test]
fn bindgen_test_layout__ENCLAVE_CREATE_INFO_VBS_BASIC() {
  const UNINIT: ::std::mem::MaybeUninit<_ENCLAVE_CREATE_INFO_VBS_BASIC> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ENCLAVE_CREATE_INFO_VBS_BASIC>(),
    36usize,
    concat!("Size of: ", stringify!(_ENCLAVE_CREATE_INFO_VBS_BASIC))
  );
  assert_eq!(
    ::std::mem::align_of::<_ENCLAVE_CREATE_INFO_VBS_BASIC>(),
    4usize,
    concat!("Alignment of ", stringify!(_ENCLAVE_CREATE_INFO_VBS_BASIC))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_CREATE_INFO_VBS_BASIC),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OwnerID) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_CREATE_INFO_VBS_BASIC),
      "::",
      stringify!(OwnerID)
    )
  );
}
pub type ENCLAVE_CREATE_INFO_VBS_BASIC = _ENCLAVE_CREATE_INFO_VBS_BASIC;
pub type PENCLAVE_CREATE_INFO_VBS_BASIC = *mut _ENCLAVE_CREATE_INFO_VBS_BASIC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_LOAD_DATA_VBS_BASIC {
  pub PageType: DWORD,
}
#[test]
fn bindgen_test_layout__ENCLAVE_LOAD_DATA_VBS_BASIC() {
  const UNINIT: ::std::mem::MaybeUninit<_ENCLAVE_LOAD_DATA_VBS_BASIC> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ENCLAVE_LOAD_DATA_VBS_BASIC>(),
    4usize,
    concat!("Size of: ", stringify!(_ENCLAVE_LOAD_DATA_VBS_BASIC))
  );
  assert_eq!(
    ::std::mem::align_of::<_ENCLAVE_LOAD_DATA_VBS_BASIC>(),
    4usize,
    concat!("Alignment of ", stringify!(_ENCLAVE_LOAD_DATA_VBS_BASIC))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PageType) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_LOAD_DATA_VBS_BASIC),
      "::",
      stringify!(PageType)
    )
  );
}
pub type ENCLAVE_LOAD_DATA_VBS_BASIC = _ENCLAVE_LOAD_DATA_VBS_BASIC;
pub type PENCLAVE_LOAD_DATA_VBS_BASIC = *mut _ENCLAVE_LOAD_DATA_VBS_BASIC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENCLAVE_INIT_INFO_VBS_BASIC {
  pub FamilyId: [BYTE; 16usize],
  pub ImageId: [BYTE; 16usize],
  pub EnclaveSize: ULONGLONG,
  pub EnclaveSvn: DWORD,
  pub Reserved: DWORD,
  pub __bindgen_anon_1: _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1 {
  pub SignatureInfoHandle: HANDLE,
  pub Unused: ULONGLONG,
}
#[test]
fn bindgen_test_layout__ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SignatureInfoHandle) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1),
      "::",
      stringify!(SignatureInfoHandle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1),
      "::",
      stringify!(Unused)
    )
  );
}
#[test]
fn bindgen_test_layout__ENCLAVE_INIT_INFO_VBS_BASIC() {
  const UNINIT: ::std::mem::MaybeUninit<_ENCLAVE_INIT_INFO_VBS_BASIC> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ENCLAVE_INIT_INFO_VBS_BASIC>(),
    56usize,
    concat!("Size of: ", stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC))
  );
  assert_eq!(
    ::std::mem::align_of::<_ENCLAVE_INIT_INFO_VBS_BASIC>(),
    8usize,
    concat!("Alignment of ", stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FamilyId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC),
      "::",
      stringify!(FamilyId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageId) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC),
      "::",
      stringify!(ImageId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnclaveSize) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC),
      "::",
      stringify!(EnclaveSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnclaveSvn) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC),
      "::",
      stringify!(EnclaveSvn)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_VBS_BASIC),
      "::",
      stringify!(Reserved)
    )
  );
}
pub type ENCLAVE_INIT_INFO_VBS_BASIC = _ENCLAVE_INIT_INFO_VBS_BASIC;
pub type PENCLAVE_INIT_INFO_VBS_BASIC = *mut _ENCLAVE_INIT_INFO_VBS_BASIC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_INIT_INFO_VBS {
  pub Length: DWORD,
  pub ThreadCount: DWORD,
}
#[test]
fn bindgen_test_layout__ENCLAVE_INIT_INFO_VBS() {
  const UNINIT: ::std::mem::MaybeUninit<_ENCLAVE_INIT_INFO_VBS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ENCLAVE_INIT_INFO_VBS>(),
    8usize,
    concat!("Size of: ", stringify!(_ENCLAVE_INIT_INFO_VBS))
  );
  assert_eq!(
    ::std::mem::align_of::<_ENCLAVE_INIT_INFO_VBS>(),
    4usize,
    concat!("Alignment of ", stringify!(_ENCLAVE_INIT_INFO_VBS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_VBS),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ThreadCount) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENCLAVE_INIT_INFO_VBS),
      "::",
      stringify!(ThreadCount)
    )
  );
}
pub type ENCLAVE_INIT_INFO_VBS = _ENCLAVE_INIT_INFO_VBS;
pub type PENCLAVE_INIT_INFO_VBS = *mut _ENCLAVE_INIT_INFO_VBS;
pub type ENCLAVE_TARGET_FUNCTION =
  ::std::option::Option<unsafe extern "C" fn(arg1: PVOID) -> PVOID>;
pub type PENCLAVE_TARGET_FUNCTION = ENCLAVE_TARGET_FUNCTION;
pub type LPENCLAVE_TARGET_FUNCTION = PENCLAVE_TARGET_FUNCTION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE {
  pub Type: MEM_DEDICATED_ATTRIBUTE_TYPE,
  pub Reserved: DWORD,
  pub Value: DWORD64,
}
#[test]
fn bindgen_test_layout__MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE() {
  const UNINIT: ::std::mem::MaybeUninit<_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE),
      "::",
      stringify!(Value)
    )
  );
}
pub type MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE = _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE;
pub type PMEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE =
  *mut _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION {
  pub NextEntryOffset: DWORD,
  pub SizeOfInformation: DWORD,
  pub Flags: DWORD,
  pub AttributesOffset: DWORD,
  pub AttributeCount: DWORD,
  pub Reserved: DWORD,
  pub TypeId: DWORD64,
}
#[test]
fn bindgen_test_layout__MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION>(),
    32usize,
    concat!(
      "Size of: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NextEntryOffset) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION),
      "::",
      stringify!(NextEntryOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfInformation) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION),
      "::",
      stringify!(SizeOfInformation)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AttributesOffset) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION),
      "::",
      stringify!(AttributesOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AttributeCount) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION),
      "::",
      stringify!(AttributeCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TypeId) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION),
      "::",
      stringify!(TypeId)
    )
  );
}
pub type MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION =
  _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION;
pub type PMEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION =
  *mut _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_ID_128 {
  pub Identifier: [BYTE; 16usize],
}
#[test]
fn bindgen_test_layout__FILE_ID_128() {
  const UNINIT: ::std::mem::MaybeUninit<_FILE_ID_128> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_FILE_ID_128>(),
    16usize,
    concat!("Size of: ", stringify!(_FILE_ID_128))
  );
  assert_eq!(
    ::std::mem::align_of::<_FILE_ID_128>(),
    1usize,
    concat!("Alignment of ", stringify!(_FILE_ID_128))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Identifier) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_ID_128),
      "::",
      stringify!(Identifier)
    )
  );
}
pub type FILE_ID_128 = _FILE_ID_128;
pub type PFILE_ID_128 = *mut _FILE_ID_128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_NOTIFY_INFORMATION {
  pub NextEntryOffset: DWORD,
  pub Action: DWORD,
  pub FileNameLength: DWORD,
  pub FileName: [WCHAR; 1usize],
}
#[test]
fn bindgen_test_layout__FILE_NOTIFY_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_FILE_NOTIFY_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_FILE_NOTIFY_INFORMATION>(),
    16usize,
    concat!("Size of: ", stringify!(_FILE_NOTIFY_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_FILE_NOTIFY_INFORMATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_FILE_NOTIFY_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NextEntryOffset) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_INFORMATION),
      "::",
      stringify!(NextEntryOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Action) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_INFORMATION),
      "::",
      stringify!(Action)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileNameLength) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_INFORMATION),
      "::",
      stringify!(FileNameLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileName) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_INFORMATION),
      "::",
      stringify!(FileName)
    )
  );
}
pub type FILE_NOTIFY_INFORMATION = _FILE_NOTIFY_INFORMATION;
pub type PFILE_NOTIFY_INFORMATION = *mut _FILE_NOTIFY_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_NOTIFY_EXTENDED_INFORMATION {
  pub NextEntryOffset: DWORD,
  pub Action: DWORD,
  pub CreationTime: LARGE_INTEGER,
  pub LastModificationTime: LARGE_INTEGER,
  pub LastChangeTime: LARGE_INTEGER,
  pub LastAccessTime: LARGE_INTEGER,
  pub AllocatedLength: LARGE_INTEGER,
  pub FileSize: LARGE_INTEGER,
  pub FileAttributes: DWORD,
  pub __bindgen_anon_1: _FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1,
  pub FileId: LARGE_INTEGER,
  pub ParentFileId: LARGE_INTEGER,
  pub FileNameLength: DWORD,
  pub FileName: [WCHAR; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1 {
  pub ReparsePointTag: DWORD,
  pub EaSize: DWORD,
}
#[test]
fn bindgen_test_layout__FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReparsePointTag) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(ReparsePointTag)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EaSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(EaSize)
    )
  );
}
#[test]
fn bindgen_test_layout__FILE_NOTIFY_EXTENDED_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_FILE_NOTIFY_EXTENDED_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_FILE_NOTIFY_EXTENDED_INFORMATION>(),
    88usize,
    concat!("Size of: ", stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_FILE_NOTIFY_EXTENDED_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NextEntryOffset) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(NextEntryOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Action) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(Action)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CreationTime) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(CreationTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastModificationTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(LastModificationTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastChangeTime) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(LastChangeTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastAccessTime) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(LastAccessTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllocatedLength) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(AllocatedLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileSize) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(FileSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileAttributes) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(FileAttributes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileId) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(FileId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ParentFileId) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(ParentFileId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileNameLength) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(FileNameLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileName) as usize - ptr as usize },
    84usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_EXTENDED_INFORMATION),
      "::",
      stringify!(FileName)
    )
  );
}
pub type FILE_NOTIFY_EXTENDED_INFORMATION = _FILE_NOTIFY_EXTENDED_INFORMATION;
pub type PFILE_NOTIFY_EXTENDED_INFORMATION = *mut _FILE_NOTIFY_EXTENDED_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_NOTIFY_FULL_INFORMATION {
  pub NextEntryOffset: DWORD,
  pub Action: DWORD,
  pub CreationTime: LARGE_INTEGER,
  pub LastModificationTime: LARGE_INTEGER,
  pub LastChangeTime: LARGE_INTEGER,
  pub LastAccessTime: LARGE_INTEGER,
  pub AllocatedLength: LARGE_INTEGER,
  pub FileSize: LARGE_INTEGER,
  pub FileAttributes: DWORD,
  pub __bindgen_anon_1: _FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1,
  pub FileId: LARGE_INTEGER,
  pub ParentFileId: LARGE_INTEGER,
  pub FileNameLength: WORD,
  pub FileNameFlags: BYTE,
  pub Reserved: BYTE,
  pub FileName: [WCHAR; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1 {
  pub ReparsePointTag: DWORD,
  pub EaSize: DWORD,
}
#[test]
fn bindgen_test_layout__FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReparsePointTag) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(ReparsePointTag)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EaSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1),
      "::",
      stringify!(EaSize)
    )
  );
}
#[test]
fn bindgen_test_layout__FILE_NOTIFY_FULL_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_FILE_NOTIFY_FULL_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_FILE_NOTIFY_FULL_INFORMATION>(),
    88usize,
    concat!("Size of: ", stringify!(_FILE_NOTIFY_FULL_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_FILE_NOTIFY_FULL_INFORMATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_FILE_NOTIFY_FULL_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NextEntryOffset) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(NextEntryOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Action) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(Action)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CreationTime) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(CreationTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastModificationTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(LastModificationTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastChangeTime) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(LastChangeTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastAccessTime) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(LastAccessTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllocatedLength) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(AllocatedLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileSize) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(FileSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileAttributes) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(FileAttributes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileId) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(FileId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ParentFileId) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(ParentFileId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileNameLength) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(FileNameLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileNameFlags) as usize - ptr as usize },
    82usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(FileNameFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    83usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileName) as usize - ptr as usize },
    84usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_NOTIFY_FULL_INFORMATION),
      "::",
      stringify!(FileName)
    )
  );
}
pub type FILE_NOTIFY_FULL_INFORMATION = _FILE_NOTIFY_FULL_INFORMATION;
pub type PFILE_NOTIFY_FULL_INFORMATION = *mut _FILE_NOTIFY_FULL_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _FILE_SEGMENT_ELEMENT {
  pub Buffer: *mut ::std::os::raw::c_void,
  pub Alignment: ULONGLONG,
}
#[test]
fn bindgen_test_layout__FILE_SEGMENT_ELEMENT() {
  const UNINIT: ::std::mem::MaybeUninit<_FILE_SEGMENT_ELEMENT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_FILE_SEGMENT_ELEMENT>(),
    8usize,
    concat!("Size of: ", stringify!(_FILE_SEGMENT_ELEMENT))
  );
  assert_eq!(
    ::std::mem::align_of::<_FILE_SEGMENT_ELEMENT>(),
    8usize,
    concat!("Alignment of ", stringify!(_FILE_SEGMENT_ELEMENT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_SEGMENT_ELEMENT),
      "::",
      stringify!(Buffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Alignment) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILE_SEGMENT_ELEMENT),
      "::",
      stringify!(Alignment)
    )
  );
}
pub type FILE_SEGMENT_ELEMENT = _FILE_SEGMENT_ELEMENT;
pub type PFILE_SEGMENT_ELEMENT = *mut _FILE_SEGMENT_ELEMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REPARSE_GUID_DATA_BUFFER {
  pub ReparseTag: DWORD,
  pub ReparseDataLength: WORD,
  pub Reserved: WORD,
  pub ReparseGuid: GUID,
  pub GenericReparseBuffer: _REPARSE_GUID_DATA_BUFFER__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REPARSE_GUID_DATA_BUFFER__bindgen_ty_1 {
  pub DataBuffer: [BYTE; 1usize],
}
#[test]
fn bindgen_test_layout__REPARSE_GUID_DATA_BUFFER__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_REPARSE_GUID_DATA_BUFFER__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_REPARSE_GUID_DATA_BUFFER__bindgen_ty_1>(),
    1usize,
    concat!(
      "Size of: ",
      stringify!(_REPARSE_GUID_DATA_BUFFER__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_REPARSE_GUID_DATA_BUFFER__bindgen_ty_1>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_REPARSE_GUID_DATA_BUFFER__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataBuffer) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_REPARSE_GUID_DATA_BUFFER__bindgen_ty_1),
      "::",
      stringify!(DataBuffer)
    )
  );
}
#[test]
fn bindgen_test_layout__REPARSE_GUID_DATA_BUFFER() {
  const UNINIT: ::std::mem::MaybeUninit<_REPARSE_GUID_DATA_BUFFER> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_REPARSE_GUID_DATA_BUFFER>(),
    28usize,
    concat!("Size of: ", stringify!(_REPARSE_GUID_DATA_BUFFER))
  );
  assert_eq!(
    ::std::mem::align_of::<_REPARSE_GUID_DATA_BUFFER>(),
    4usize,
    concat!("Alignment of ", stringify!(_REPARSE_GUID_DATA_BUFFER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReparseTag) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_REPARSE_GUID_DATA_BUFFER),
      "::",
      stringify!(ReparseTag)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReparseDataLength) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_REPARSE_GUID_DATA_BUFFER),
      "::",
      stringify!(ReparseDataLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_REPARSE_GUID_DATA_BUFFER),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReparseGuid) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_REPARSE_GUID_DATA_BUFFER),
      "::",
      stringify!(ReparseGuid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GenericReparseBuffer) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_REPARSE_GUID_DATA_BUFFER),
      "::",
      stringify!(GenericReparseBuffer)
    )
  );
}
pub type REPARSE_GUID_DATA_BUFFER = _REPARSE_GUID_DATA_BUFFER;
pub type PREPARSE_GUID_DATA_BUFFER = *mut _REPARSE_GUID_DATA_BUFFER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCRUB_DATA_INPUT {
  pub Size: DWORD,
  pub Flags: DWORD,
  pub MaximumIos: DWORD,
  pub ObjectId: [DWORD; 4usize],
  pub Reserved: [DWORD; 41usize],
  pub ResumeContext: [BYTE; 1040usize],
}
#[test]
fn bindgen_test_layout__SCRUB_DATA_INPUT() {
  const UNINIT: ::std::mem::MaybeUninit<_SCRUB_DATA_INPUT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SCRUB_DATA_INPUT>(),
    1232usize,
    concat!("Size of: ", stringify!(_SCRUB_DATA_INPUT))
  );
  assert_eq!(
    ::std::mem::align_of::<_SCRUB_DATA_INPUT>(),
    4usize,
    concat!("Alignment of ", stringify!(_SCRUB_DATA_INPUT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_INPUT),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_INPUT),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumIos) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_INPUT),
      "::",
      stringify!(MaximumIos)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectId) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_INPUT),
      "::",
      stringify!(ObjectId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_INPUT),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ResumeContext) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_INPUT),
      "::",
      stringify!(ResumeContext)
    )
  );
}
pub type SCRUB_DATA_INPUT = _SCRUB_DATA_INPUT;
pub type PSCRUB_DATA_INPUT = *mut _SCRUB_DATA_INPUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCRUB_PARITY_EXTENT {
  pub Offset: LONGLONG,
  pub Length: ULONGLONG,
}
#[test]
fn bindgen_test_layout__SCRUB_PARITY_EXTENT() {
  const UNINIT: ::std::mem::MaybeUninit<_SCRUB_PARITY_EXTENT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SCRUB_PARITY_EXTENT>(),
    16usize,
    concat!("Size of: ", stringify!(_SCRUB_PARITY_EXTENT))
  );
  assert_eq!(
    ::std::mem::align_of::<_SCRUB_PARITY_EXTENT>(),
    8usize,
    concat!("Alignment of ", stringify!(_SCRUB_PARITY_EXTENT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_PARITY_EXTENT),
      "::",
      stringify!(Offset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_PARITY_EXTENT),
      "::",
      stringify!(Length)
    )
  );
}
pub type SCRUB_PARITY_EXTENT = _SCRUB_PARITY_EXTENT;
pub type PSCRUB_PARITY_EXTENT = *mut _SCRUB_PARITY_EXTENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCRUB_PARITY_EXTENT_DATA {
  pub Size: WORD,
  pub Flags: WORD,
  pub NumberOfParityExtents: WORD,
  pub MaximumNumberOfParityExtents: WORD,
  pub ParityExtents: [SCRUB_PARITY_EXTENT; 1usize],
}
#[test]
fn bindgen_test_layout__SCRUB_PARITY_EXTENT_DATA() {
  const UNINIT: ::std::mem::MaybeUninit<_SCRUB_PARITY_EXTENT_DATA> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SCRUB_PARITY_EXTENT_DATA>(),
    24usize,
    concat!("Size of: ", stringify!(_SCRUB_PARITY_EXTENT_DATA))
  );
  assert_eq!(
    ::std::mem::align_of::<_SCRUB_PARITY_EXTENT_DATA>(),
    8usize,
    concat!("Alignment of ", stringify!(_SCRUB_PARITY_EXTENT_DATA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_PARITY_EXTENT_DATA),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_PARITY_EXTENT_DATA),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfParityExtents) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_PARITY_EXTENT_DATA),
      "::",
      stringify!(NumberOfParityExtents)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumNumberOfParityExtents) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_PARITY_EXTENT_DATA),
      "::",
      stringify!(MaximumNumberOfParityExtents)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ParityExtents) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_PARITY_EXTENT_DATA),
      "::",
      stringify!(ParityExtents)
    )
  );
}
pub type SCRUB_PARITY_EXTENT_DATA = _SCRUB_PARITY_EXTENT_DATA;
pub type PSCRUB_PARITY_EXTENT_DATA = *mut _SCRUB_PARITY_EXTENT_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCRUB_DATA_OUTPUT {
  pub Size: DWORD,
  pub Flags: DWORD,
  pub Status: DWORD,
  pub ErrorFileOffset: ULONGLONG,
  pub ErrorLength: ULONGLONG,
  pub NumberOfBytesRepaired: ULONGLONG,
  pub NumberOfBytesFailed: ULONGLONG,
  pub InternalFileReference: ULONGLONG,
  pub ResumeContextLength: WORD,
  pub ParityExtentDataOffset: WORD,
  pub Reserved: [DWORD; 9usize],
  pub NumberOfMetadataBytesProcessed: ULONGLONG,
  pub NumberOfDataBytesProcessed: ULONGLONG,
  pub TotalNumberOfMetadataBytesInUse: ULONGLONG,
  pub TotalNumberOfDataBytesInUse: ULONGLONG,
  pub DataBytesSkippedDueToNoAllocation: ULONGLONG,
  pub DataBytesSkippedDueToInvalidRun: ULONGLONG,
  pub DataBytesSkippedDueToIntegrityStream: ULONGLONG,
  pub DataBytesSkippedDueToRegionBeingClean: ULONGLONG,
  pub DataBytesSkippedDueToLockConflict: ULONGLONG,
  pub DataBytesSkippedDueToNoScrubDataFlag: ULONGLONG,
  pub DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag: ULONGLONG,
  pub DataBytesScrubbed: ULONGLONG,
  pub ResumeContext: [BYTE; 1040usize],
}
#[test]
fn bindgen_test_layout__SCRUB_DATA_OUTPUT() {
  const UNINIT: ::std::mem::MaybeUninit<_SCRUB_DATA_OUTPUT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SCRUB_DATA_OUTPUT>(),
    1232usize,
    concat!("Size of: ", stringify!(_SCRUB_DATA_OUTPUT))
  );
  assert_eq!(
    ::std::mem::align_of::<_SCRUB_DATA_OUTPUT>(),
    8usize,
    concat!("Alignment of ", stringify!(_SCRUB_DATA_OUTPUT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(Status)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ErrorFileOffset) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(ErrorFileOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ErrorLength) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(ErrorLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfBytesRepaired) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(NumberOfBytesRepaired)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfBytesFailed) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(NumberOfBytesFailed)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InternalFileReference) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(InternalFileReference)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ResumeContextLength) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(ResumeContextLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ParityExtentDataOffset) as usize - ptr as usize },
    58usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(ParityExtentDataOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfMetadataBytesProcessed) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(NumberOfMetadataBytesProcessed)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfDataBytesProcessed) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(NumberOfDataBytesProcessed)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalNumberOfMetadataBytesInUse) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(TotalNumberOfMetadataBytesInUse)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalNumberOfDataBytesInUse) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(TotalNumberOfDataBytesInUse)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).DataBytesSkippedDueToNoAllocation) as usize - ptr as usize
    },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(DataBytesSkippedDueToNoAllocation)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataBytesSkippedDueToInvalidRun) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(DataBytesSkippedDueToInvalidRun)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).DataBytesSkippedDueToIntegrityStream) as usize - ptr as usize
    },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(DataBytesSkippedDueToIntegrityStream)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).DataBytesSkippedDueToRegionBeingClean) as usize - ptr as usize
    },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(DataBytesSkippedDueToRegionBeingClean)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).DataBytesSkippedDueToLockConflict) as usize - ptr as usize
    },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(DataBytesSkippedDueToLockConflict)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).DataBytesSkippedDueToNoScrubDataFlag) as usize - ptr as usize
    },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(DataBytesSkippedDueToNoScrubDataFlag)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag) as usize
        - ptr as usize
    },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataBytesScrubbed) as usize - ptr as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(DataBytesScrubbed)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ResumeContext) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_SCRUB_DATA_OUTPUT),
      "::",
      stringify!(ResumeContext)
    )
  );
}
pub type SCRUB_DATA_OUTPUT = _SCRUB_DATA_OUTPUT;
pub type PSCRUB_DATA_OUTPUT = *mut _SCRUB_DATA_OUTPUT;
pub const _SharedVirtualDiskSupportType_SharedVirtualDisksUnsupported:
  _SharedVirtualDiskSupportType = 0;
pub const _SharedVirtualDiskSupportType_SharedVirtualDisksSupported: _SharedVirtualDiskSupportType =
  1;
pub const _SharedVirtualDiskSupportType_SharedVirtualDiskSnapshotsSupported:
  _SharedVirtualDiskSupportType = 3;
pub const _SharedVirtualDiskSupportType_SharedVirtualDiskCDPSnapshotsSupported:
  _SharedVirtualDiskSupportType = 7;
pub type _SharedVirtualDiskSupportType = ::std::os::raw::c_int;
pub use self::_SharedVirtualDiskSupportType as SharedVirtualDiskSupportType;
pub const _SharedVirtualDiskHandleState_SharedVirtualDiskHandleStateNone:
  _SharedVirtualDiskHandleState = 0;
pub const _SharedVirtualDiskHandleState_SharedVirtualDiskHandleStateFileShared:
  _SharedVirtualDiskHandleState = 1;
pub const _SharedVirtualDiskHandleState_SharedVirtualDiskHandleStateHandleShared:
  _SharedVirtualDiskHandleState = 3;
pub type _SharedVirtualDiskHandleState = ::std::os::raw::c_int;
pub use self::_SharedVirtualDiskHandleState as SharedVirtualDiskHandleState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SHARED_VIRTUAL_DISK_SUPPORT {
  pub SharedVirtualDiskSupport: SharedVirtualDiskSupportType,
  pub HandleState: SharedVirtualDiskHandleState,
}
#[test]
fn bindgen_test_layout__SHARED_VIRTUAL_DISK_SUPPORT() {
  const UNINIT: ::std::mem::MaybeUninit<_SHARED_VIRTUAL_DISK_SUPPORT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SHARED_VIRTUAL_DISK_SUPPORT>(),
    8usize,
    concat!("Size of: ", stringify!(_SHARED_VIRTUAL_DISK_SUPPORT))
  );
  assert_eq!(
    ::std::mem::align_of::<_SHARED_VIRTUAL_DISK_SUPPORT>(),
    4usize,
    concat!("Alignment of ", stringify!(_SHARED_VIRTUAL_DISK_SUPPORT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SharedVirtualDiskSupport) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SHARED_VIRTUAL_DISK_SUPPORT),
      "::",
      stringify!(SharedVirtualDiskSupport)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HandleState) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SHARED_VIRTUAL_DISK_SUPPORT),
      "::",
      stringify!(HandleState)
    )
  );
}
pub type SHARED_VIRTUAL_DISK_SUPPORT = _SHARED_VIRTUAL_DISK_SUPPORT;
pub type PSHARED_VIRTUAL_DISK_SUPPORT = *mut _SHARED_VIRTUAL_DISK_SUPPORT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REARRANGE_FILE_DATA {
  pub SourceStartingOffset: ULONGLONG,
  pub TargetOffset: ULONGLONG,
  pub SourceFileHandle: HANDLE,
  pub Length: DWORD,
  pub Flags: DWORD,
}
#[test]
fn bindgen_test_layout__REARRANGE_FILE_DATA() {
  const UNINIT: ::std::mem::MaybeUninit<_REARRANGE_FILE_DATA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_REARRANGE_FILE_DATA>(),
    32usize,
    concat!("Size of: ", stringify!(_REARRANGE_FILE_DATA))
  );
  assert_eq!(
    ::std::mem::align_of::<_REARRANGE_FILE_DATA>(),
    8usize,
    concat!("Alignment of ", stringify!(_REARRANGE_FILE_DATA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SourceStartingOffset) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_REARRANGE_FILE_DATA),
      "::",
      stringify!(SourceStartingOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetOffset) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_REARRANGE_FILE_DATA),
      "::",
      stringify!(TargetOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SourceFileHandle) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_REARRANGE_FILE_DATA),
      "::",
      stringify!(SourceFileHandle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_REARRANGE_FILE_DATA),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_REARRANGE_FILE_DATA),
      "::",
      stringify!(Flags)
    )
  );
}
pub type REARRANGE_FILE_DATA = _REARRANGE_FILE_DATA;
pub type PREARRANGE_FILE_DATA = *mut _REARRANGE_FILE_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REARRANGE_FILE_DATA32 {
  pub SourceStartingOffset: ULONGLONG,
  pub TargetOffset: ULONGLONG,
  pub SourceFileHandle: UINT32,
  pub Length: DWORD,
  pub Flags: DWORD,
}
#[test]
fn bindgen_test_layout__REARRANGE_FILE_DATA32() {
  const UNINIT: ::std::mem::MaybeUninit<_REARRANGE_FILE_DATA32> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_REARRANGE_FILE_DATA32>(),
    32usize,
    concat!("Size of: ", stringify!(_REARRANGE_FILE_DATA32))
  );
  assert_eq!(
    ::std::mem::align_of::<_REARRANGE_FILE_DATA32>(),
    8usize,
    concat!("Alignment of ", stringify!(_REARRANGE_FILE_DATA32))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SourceStartingOffset) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_REARRANGE_FILE_DATA32),
      "::",
      stringify!(SourceStartingOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetOffset) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_REARRANGE_FILE_DATA32),
      "::",
      stringify!(TargetOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SourceFileHandle) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_REARRANGE_FILE_DATA32),
      "::",
      stringify!(SourceFileHandle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_REARRANGE_FILE_DATA32),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_REARRANGE_FILE_DATA32),
      "::",
      stringify!(Flags)
    )
  );
}
pub type REARRANGE_FILE_DATA32 = _REARRANGE_FILE_DATA32;
pub type PREARRANGE_FILE_DATA32 = *mut _REARRANGE_FILE_DATA32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SHUFFLE_FILE_DATA {
  pub StartingOffset: LONGLONG,
  pub Length: LONGLONG,
  pub Flags: DWORD,
}
#[test]
fn bindgen_test_layout__SHUFFLE_FILE_DATA() {
  const UNINIT: ::std::mem::MaybeUninit<_SHUFFLE_FILE_DATA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SHUFFLE_FILE_DATA>(),
    24usize,
    concat!("Size of: ", stringify!(_SHUFFLE_FILE_DATA))
  );
  assert_eq!(
    ::std::mem::align_of::<_SHUFFLE_FILE_DATA>(),
    8usize,
    concat!("Alignment of ", stringify!(_SHUFFLE_FILE_DATA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StartingOffset) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SHUFFLE_FILE_DATA),
      "::",
      stringify!(StartingOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SHUFFLE_FILE_DATA),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SHUFFLE_FILE_DATA),
      "::",
      stringify!(Flags)
    )
  );
}
pub type SHUFFLE_FILE_DATA = _SHUFFLE_FILE_DATA;
pub type PSHUFFLE_FILE_DATA = *mut _SHUFFLE_FILE_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NETWORK_APP_INSTANCE_EA {
  pub AppInstanceID: GUID,
  pub CsvFlags: DWORD,
}
#[test]
fn bindgen_test_layout__NETWORK_APP_INSTANCE_EA() {
  const UNINIT: ::std::mem::MaybeUninit<_NETWORK_APP_INSTANCE_EA> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NETWORK_APP_INSTANCE_EA>(),
    20usize,
    concat!("Size of: ", stringify!(_NETWORK_APP_INSTANCE_EA))
  );
  assert_eq!(
    ::std::mem::align_of::<_NETWORK_APP_INSTANCE_EA>(),
    4usize,
    concat!("Alignment of ", stringify!(_NETWORK_APP_INSTANCE_EA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AppInstanceID) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NETWORK_APP_INSTANCE_EA),
      "::",
      stringify!(AppInstanceID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CsvFlags) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_NETWORK_APP_INSTANCE_EA),
      "::",
      stringify!(CsvFlags)
    )
  );
}
pub type NETWORK_APP_INSTANCE_EA = _NETWORK_APP_INSTANCE_EA;
pub type PNETWORK_APP_INSTANCE_EA = *mut _NETWORK_APP_INSTANCE_EA;
extern "C" {
  pub static GUID_MAX_POWER_SAVINGS: GUID;
}
extern "C" {
  pub static GUID_MIN_POWER_SAVINGS: GUID;
}
extern "C" {
  pub static GUID_TYPICAL_POWER_SAVINGS: GUID;
}
extern "C" {
  pub static NO_SUBGROUP_GUID: GUID;
}
extern "C" {
  pub static ALL_POWERSCHEMES_GUID: GUID;
}
extern "C" {
  pub static GUID_POWERSCHEME_PERSONALITY: GUID;
}
extern "C" {
  pub static GUID_ACTIVE_POWERSCHEME: GUID;
}
extern "C" {
  pub static GUID_IDLE_RESILIENCY_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_IDLE_RESILIENCY_PERIOD: GUID;
}
extern "C" {
  pub static GUID_DEEP_SLEEP_ENABLED: GUID;
}
extern "C" {
  pub static GUID_DEEP_SLEEP_PLATFORM_STATE: GUID;
}
extern "C" {
  pub static GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_VIDEO_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_VIDEO_POWERDOWN_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_VIDEO_ANNOYANCE_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: GUID;
}
extern "C" {
  pub static GUID_VIDEO_DIM_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_VIDEO_ADAPTIVE_POWERDOWN: GUID;
}
extern "C" {
  pub static GUID_MONITOR_POWER_ON: GUID;
}
extern "C" {
  pub static GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: GUID;
}
extern "C" {
  pub static GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: GUID;
}
extern "C" {
  pub static GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: GUID;
}
extern "C" {
  pub static GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: GUID;
}
extern "C" {
  pub static GUID_CONSOLE_DISPLAY_STATE: GUID;
}
extern "C" {
  pub static GUID_ALLOW_DISPLAY_REQUIRED: GUID;
}
extern "C" {
  pub static GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_ADVANCED_COLOR_QUALITY_BIAS: GUID;
}
extern "C" {
  pub static GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_NON_ADAPTIVE_INPUT_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_ADAPTIVE_INPUT_CONTROLLER_STATE: GUID;
}
extern "C" {
  pub static GUID_DISK_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_DISK_MAX_POWER: GUID;
}
extern "C" {
  pub static GUID_DISK_POWERDOWN_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_DISK_IDLE_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_DISK_BURST_IGNORE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_DISK_ADAPTIVE_POWERDOWN: GUID;
}
extern "C" {
  pub static GUID_DISK_NVME_NOPPME: GUID;
}
extern "C" {
  pub static GUID_SLEEP_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_SLEEP_IDLE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_STANDBY_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_UNATTEND_SLEEP_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_HIBERNATE_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_HIBERNATE_FASTS4_POLICY: GUID;
}
extern "C" {
  pub static GUID_CRITICAL_POWER_TRANSITION: GUID;
}
extern "C" {
  pub static GUID_SYSTEM_AWAYMODE: GUID;
}
extern "C" {
  pub static GUID_ALLOW_AWAYMODE: GUID;
}
extern "C" {
  pub static GUID_USER_PRESENCE_PREDICTION: GUID;
}
extern "C" {
  pub static GUID_STANDBY_BUDGET_GRACE_PERIOD: GUID;
}
extern "C" {
  pub static GUID_STANDBY_BUDGET_PERCENT: GUID;
}
extern "C" {
  pub static GUID_STANDBY_RESERVE_GRACE_PERIOD: GUID;
}
extern "C" {
  pub static GUID_STANDBY_RESERVE_TIME: GUID;
}
extern "C" {
  pub static GUID_STANDBY_RESET_PERCENT: GUID;
}
extern "C" {
  pub static GUID_HUPR_ADAPTIVE_DISPLAY_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_HUPR_ADAPTIVE_DIM_TIMEOUT: GUID;
}
extern "C" {
  pub static GUID_ALLOW_STANDBY_STATES: GUID;
}
extern "C" {
  pub static GUID_ALLOW_RTC_WAKE: GUID;
}
extern "C" {
  pub static GUID_LEGACY_RTC_MITIGATION: GUID;
}
extern "C" {
  pub static GUID_ALLOW_SYSTEM_REQUIRED: GUID;
}
extern "C" {
  pub static GUID_POWER_SAVING_STATUS: GUID;
}
extern "C" {
  pub static GUID_ENERGY_SAVER_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_ENERGY_SAVER_BATTERY_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_ENERGY_SAVER_BRIGHTNESS: GUID;
}
extern "C" {
  pub static GUID_ENERGY_SAVER_POLICY: GUID;
}
extern "C" {
  pub static GUID_SYSTEM_BUTTON_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_POWERBUTTON_ACTION: GUID;
}
extern "C" {
  pub static GUID_SLEEPBUTTON_ACTION: GUID;
}
extern "C" {
  pub static GUID_USERINTERFACEBUTTON_ACTION: GUID;
}
extern "C" {
  pub static GUID_LIDCLOSE_ACTION: GUID;
}
extern "C" {
  pub static GUID_LIDOPEN_POWERSTATE: GUID;
}
extern "C" {
  pub static GUID_BATTERY_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_ACTION_0: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_LEVEL_0: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_FLAGS_0: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_ACTION_1: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_LEVEL_1: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_FLAGS_1: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_ACTION_2: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_LEVEL_2: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_FLAGS_2: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_ACTION_3: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_LEVEL_3: GUID;
}
extern "C" {
  pub static GUID_BATTERY_DISCHARGE_FLAGS_3: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_SETTINGS_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_THROTTLE_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_THROTTLE_MAXIMUM: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_THROTTLE_MAXIMUM_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_THROTTLE_MINIMUM: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_THROTTLE_MINIMUM_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_FREQUENCY_LIMIT: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_FREQUENCY_LIMIT_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_ALLOW_THROTTLING: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_IDLESTATE_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERFSTATE_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_INCREASE_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_INCREASE_POLICY_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_DECREASE_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_DECREASE_POLICY_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_INCREASE_TIME: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_INCREASE_TIME_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_DECREASE_TIME: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_DECREASE_TIME_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_TIME_CHECK: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_BOOST_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_BOOST_MODE: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_AUTONOMOUS_MODE: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_DUTY_CYCLING: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_IDLE_ALLOW_SCALING: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_IDLE_DISABLE: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_IDLE_STATE_MAXIMUM: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_IDLE_TIME_CHECK: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_MAX_CORES: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_MIN_CORES: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PARKING_CORE_OVERRIDE: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PARKING_PERF_STATE: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PARKING_PERF_STATE_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_SOFT_PARKING_LATENCY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_HISTORY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_HISTORY_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_INCREASE_HISTORY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_DECREASE_HISTORY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_LATENCY_HINT: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_MODULE_PARKING_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_COMPLEX_PARKING_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_SMT_UNPARKING_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_DISTRIBUTE_UTILITY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_HETEROGENEOUS_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_HETERO_DECREASE_TIME: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_HETERO_INCREASE_TIME: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CLASS0_FLOOR_PERF: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_CLASS1_INITIAL_PERF: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_THREAD_SCHEDULING_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_UPPER_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_LOWER_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_UPPER_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_LOWER_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_SYSTEM_COOLING_POLICY: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR: GUID;
}
extern "C" {
  pub static GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1: GUID;
}
extern "C" {
  pub static GUID_LOCK_CONSOLE_ON_WAKE: GUID;
}
extern "C" {
  pub static GUID_DEVICE_IDLE_POLICY: GUID;
}
extern "C" {
  pub static GUID_CONNECTIVITY_IN_STANDBY: GUID;
}
extern "C" {
  pub static GUID_DISCONNECTED_STANDBY_MODE: GUID;
}
extern "C" {
  pub static GUID_ACDC_POWER_SOURCE: GUID;
}
extern "C" {
  pub static GUID_LIDSWITCH_STATE_CHANGE: GUID;
}
extern "C" {
  pub static GUID_LIDSWITCH_STATE_RELIABILITY: GUID;
}
extern "C" {
  pub static GUID_BATTERY_PERCENTAGE_REMAINING: GUID;
}
extern "C" {
  pub static GUID_BATTERY_COUNT: GUID;
}
extern "C" {
  pub static GUID_GLOBAL_USER_PRESENCE: GUID;
}
extern "C" {
  pub static GUID_SESSION_DISPLAY_STATUS: GUID;
}
extern "C" {
  pub static GUID_SESSION_USER_PRESENCE: GUID;
}
extern "C" {
  pub static GUID_IDLE_BACKGROUND_TASK: GUID;
}
extern "C" {
  pub static GUID_BACKGROUND_TASK_NOTIFICATION: GUID;
}
extern "C" {
  pub static GUID_APPLAUNCH_BUTTON: GUID;
}
extern "C" {
  pub static GUID_PCIEXPRESS_SETTINGS_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_PCIEXPRESS_ASPM_POLICY: GUID;
}
extern "C" {
  pub static GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: GUID;
}
extern "C" {
  pub static GUID_INTSTEER_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_INTSTEER_MODE: GUID;
}
extern "C" {
  pub static GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: GUID;
}
extern "C" {
  pub static GUID_INTSTEER_TIME_UNPARK_TRIGGER: GUID;
}
extern "C" {
  pub static GUID_GRAPHICS_SUBGROUP: GUID;
}
extern "C" {
  pub static GUID_GPU_PREFERENCE_POLICY: GUID;
}
extern "C" {
  pub static GUID_MIXED_REALITY_MODE: GUID;
}
extern "C" {
  pub static GUID_SPR_ACTIVE_SESSION_CHANGE: GUID;
}
pub const _SYSTEM_POWER_STATE_PowerSystemUnspecified: _SYSTEM_POWER_STATE = 0;
pub const _SYSTEM_POWER_STATE_PowerSystemWorking: _SYSTEM_POWER_STATE = 1;
pub const _SYSTEM_POWER_STATE_PowerSystemSleeping1: _SYSTEM_POWER_STATE = 2;
pub const _SYSTEM_POWER_STATE_PowerSystemSleeping2: _SYSTEM_POWER_STATE = 3;
pub const _SYSTEM_POWER_STATE_PowerSystemSleeping3: _SYSTEM_POWER_STATE = 4;
pub const _SYSTEM_POWER_STATE_PowerSystemHibernate: _SYSTEM_POWER_STATE = 5;
pub const _SYSTEM_POWER_STATE_PowerSystemShutdown: _SYSTEM_POWER_STATE = 6;
pub const _SYSTEM_POWER_STATE_PowerSystemMaximum: _SYSTEM_POWER_STATE = 7;
pub type _SYSTEM_POWER_STATE = ::std::os::raw::c_int;
pub use self::_SYSTEM_POWER_STATE as SYSTEM_POWER_STATE;
pub type PSYSTEM_POWER_STATE = *mut _SYSTEM_POWER_STATE;
pub const POWER_ACTION_PowerActionNone: POWER_ACTION = 0;
pub const POWER_ACTION_PowerActionReserved: POWER_ACTION = 1;
pub const POWER_ACTION_PowerActionSleep: POWER_ACTION = 2;
pub const POWER_ACTION_PowerActionHibernate: POWER_ACTION = 3;
pub const POWER_ACTION_PowerActionShutdown: POWER_ACTION = 4;
pub const POWER_ACTION_PowerActionShutdownReset: POWER_ACTION = 5;
pub const POWER_ACTION_PowerActionShutdownOff: POWER_ACTION = 6;
pub const POWER_ACTION_PowerActionWarmEject: POWER_ACTION = 7;
pub const POWER_ACTION_PowerActionDisplayOff: POWER_ACTION = 8;
pub type POWER_ACTION = ::std::os::raw::c_int;
pub type PPOWER_ACTION = *mut POWER_ACTION;
pub const _DEVICE_POWER_STATE_PowerDeviceUnspecified: _DEVICE_POWER_STATE = 0;
pub const _DEVICE_POWER_STATE_PowerDeviceD0: _DEVICE_POWER_STATE = 1;
pub const _DEVICE_POWER_STATE_PowerDeviceD1: _DEVICE_POWER_STATE = 2;
pub const _DEVICE_POWER_STATE_PowerDeviceD2: _DEVICE_POWER_STATE = 3;
pub const _DEVICE_POWER_STATE_PowerDeviceD3: _DEVICE_POWER_STATE = 4;
pub const _DEVICE_POWER_STATE_PowerDeviceMaximum: _DEVICE_POWER_STATE = 5;
pub type _DEVICE_POWER_STATE = ::std::os::raw::c_int;
pub use self::_DEVICE_POWER_STATE as DEVICE_POWER_STATE;
pub type PDEVICE_POWER_STATE = *mut _DEVICE_POWER_STATE;
pub const _MONITOR_DISPLAY_STATE_PowerMonitorOff: _MONITOR_DISPLAY_STATE = 0;
pub const _MONITOR_DISPLAY_STATE_PowerMonitorOn: _MONITOR_DISPLAY_STATE = 1;
pub const _MONITOR_DISPLAY_STATE_PowerMonitorDim: _MONITOR_DISPLAY_STATE = 2;
pub type _MONITOR_DISPLAY_STATE = ::std::os::raw::c_int;
pub use self::_MONITOR_DISPLAY_STATE as MONITOR_DISPLAY_STATE;
pub type PMONITOR_DISPLAY_STATE = *mut _MONITOR_DISPLAY_STATE;
pub const _USER_ACTIVITY_PRESENCE_PowerUserPresent: _USER_ACTIVITY_PRESENCE = 0;
pub const _USER_ACTIVITY_PRESENCE_PowerUserNotPresent: _USER_ACTIVITY_PRESENCE = 1;
pub const _USER_ACTIVITY_PRESENCE_PowerUserInactive: _USER_ACTIVITY_PRESENCE = 2;
pub const _USER_ACTIVITY_PRESENCE_PowerUserMaximum: _USER_ACTIVITY_PRESENCE = 3;
pub const _USER_ACTIVITY_PRESENCE_PowerUserInvalid: _USER_ACTIVITY_PRESENCE = 3;
pub type _USER_ACTIVITY_PRESENCE = ::std::os::raw::c_int;
pub use self::_USER_ACTIVITY_PRESENCE as USER_ACTIVITY_PRESENCE;
pub type PUSER_ACTIVITY_PRESENCE = *mut _USER_ACTIVITY_PRESENCE;
pub type EXECUTION_STATE = DWORD;
pub type PEXECUTION_STATE = *mut DWORD;
pub const LATENCY_TIME_LT_DONT_CARE: LATENCY_TIME = 0;
pub const LATENCY_TIME_LT_LOWEST_LATENCY: LATENCY_TIME = 1;
pub type LATENCY_TIME = ::std::os::raw::c_int;
pub const _POWER_REQUEST_TYPE_PowerRequestDisplayRequired: _POWER_REQUEST_TYPE = 0;
pub const _POWER_REQUEST_TYPE_PowerRequestSystemRequired: _POWER_REQUEST_TYPE = 1;
pub const _POWER_REQUEST_TYPE_PowerRequestAwayModeRequired: _POWER_REQUEST_TYPE = 2;
pub const _POWER_REQUEST_TYPE_PowerRequestExecutionRequired: _POWER_REQUEST_TYPE = 3;
pub type _POWER_REQUEST_TYPE = ::std::os::raw::c_int;
pub use self::_POWER_REQUEST_TYPE as POWER_REQUEST_TYPE;
pub type PPOWER_REQUEST_TYPE = *mut _POWER_REQUEST_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CM_Power_Data_s {
  pub PD_Size: DWORD,
  pub PD_MostRecentPowerState: DEVICE_POWER_STATE,
  pub PD_Capabilities: DWORD,
  pub PD_D1Latency: DWORD,
  pub PD_D2Latency: DWORD,
  pub PD_D3Latency: DWORD,
  pub PD_PowerStateMapping: [DEVICE_POWER_STATE; 7usize],
  pub PD_DeepestSystemWake: SYSTEM_POWER_STATE,
}
#[test]
fn bindgen_test_layout_CM_Power_Data_s() {
  const UNINIT: ::std::mem::MaybeUninit<CM_Power_Data_s> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<CM_Power_Data_s>(),
    56usize,
    concat!("Size of: ", stringify!(CM_Power_Data_s))
  );
  assert_eq!(
    ::std::mem::align_of::<CM_Power_Data_s>(),
    4usize,
    concat!("Alignment of ", stringify!(CM_Power_Data_s))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PD_Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(CM_Power_Data_s),
      "::",
      stringify!(PD_Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PD_MostRecentPowerState) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(CM_Power_Data_s),
      "::",
      stringify!(PD_MostRecentPowerState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PD_Capabilities) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(CM_Power_Data_s),
      "::",
      stringify!(PD_Capabilities)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PD_D1Latency) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(CM_Power_Data_s),
      "::",
      stringify!(PD_D1Latency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PD_D2Latency) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(CM_Power_Data_s),
      "::",
      stringify!(PD_D2Latency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PD_D3Latency) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(CM_Power_Data_s),
      "::",
      stringify!(PD_D3Latency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PD_PowerStateMapping) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(CM_Power_Data_s),
      "::",
      stringify!(PD_PowerStateMapping)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PD_DeepestSystemWake) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(CM_Power_Data_s),
      "::",
      stringify!(PD_DeepestSystemWake)
    )
  );
}
pub type CM_POWER_DATA = CM_Power_Data_s;
pub type PCM_POWER_DATA = *mut CM_Power_Data_s;
pub const POWER_INFORMATION_LEVEL_SystemPowerPolicyAc: POWER_INFORMATION_LEVEL = 0;
pub const POWER_INFORMATION_LEVEL_SystemPowerPolicyDc: POWER_INFORMATION_LEVEL = 1;
pub const POWER_INFORMATION_LEVEL_VerifySystemPolicyAc: POWER_INFORMATION_LEVEL = 2;
pub const POWER_INFORMATION_LEVEL_VerifySystemPolicyDc: POWER_INFORMATION_LEVEL = 3;
pub const POWER_INFORMATION_LEVEL_SystemPowerCapabilities: POWER_INFORMATION_LEVEL = 4;
pub const POWER_INFORMATION_LEVEL_SystemBatteryState: POWER_INFORMATION_LEVEL = 5;
pub const POWER_INFORMATION_LEVEL_SystemPowerStateHandler: POWER_INFORMATION_LEVEL = 6;
pub const POWER_INFORMATION_LEVEL_ProcessorStateHandler: POWER_INFORMATION_LEVEL = 7;
pub const POWER_INFORMATION_LEVEL_SystemPowerPolicyCurrent: POWER_INFORMATION_LEVEL = 8;
pub const POWER_INFORMATION_LEVEL_AdministratorPowerPolicy: POWER_INFORMATION_LEVEL = 9;
pub const POWER_INFORMATION_LEVEL_SystemReserveHiberFile: POWER_INFORMATION_LEVEL = 10;
pub const POWER_INFORMATION_LEVEL_ProcessorInformation: POWER_INFORMATION_LEVEL = 11;
pub const POWER_INFORMATION_LEVEL_SystemPowerInformation: POWER_INFORMATION_LEVEL = 12;
pub const POWER_INFORMATION_LEVEL_ProcessorStateHandler2: POWER_INFORMATION_LEVEL = 13;
pub const POWER_INFORMATION_LEVEL_LastWakeTime: POWER_INFORMATION_LEVEL = 14;
pub const POWER_INFORMATION_LEVEL_LastSleepTime: POWER_INFORMATION_LEVEL = 15;
pub const POWER_INFORMATION_LEVEL_SystemExecutionState: POWER_INFORMATION_LEVEL = 16;
pub const POWER_INFORMATION_LEVEL_SystemPowerStateNotifyHandler: POWER_INFORMATION_LEVEL = 17;
pub const POWER_INFORMATION_LEVEL_ProcessorPowerPolicyAc: POWER_INFORMATION_LEVEL = 18;
pub const POWER_INFORMATION_LEVEL_ProcessorPowerPolicyDc: POWER_INFORMATION_LEVEL = 19;
pub const POWER_INFORMATION_LEVEL_VerifyProcessorPowerPolicyAc: POWER_INFORMATION_LEVEL = 20;
pub const POWER_INFORMATION_LEVEL_VerifyProcessorPowerPolicyDc: POWER_INFORMATION_LEVEL = 21;
pub const POWER_INFORMATION_LEVEL_ProcessorPowerPolicyCurrent: POWER_INFORMATION_LEVEL = 22;
pub const POWER_INFORMATION_LEVEL_SystemPowerStateLogging: POWER_INFORMATION_LEVEL = 23;
pub const POWER_INFORMATION_LEVEL_SystemPowerLoggingEntry: POWER_INFORMATION_LEVEL = 24;
pub const POWER_INFORMATION_LEVEL_SetPowerSettingValue: POWER_INFORMATION_LEVEL = 25;
pub const POWER_INFORMATION_LEVEL_NotifyUserPowerSetting: POWER_INFORMATION_LEVEL = 26;
pub const POWER_INFORMATION_LEVEL_PowerInformationLevelUnused0: POWER_INFORMATION_LEVEL = 27;
pub const POWER_INFORMATION_LEVEL_SystemMonitorHiberBootPowerOff: POWER_INFORMATION_LEVEL = 28;
pub const POWER_INFORMATION_LEVEL_SystemVideoState: POWER_INFORMATION_LEVEL = 29;
pub const POWER_INFORMATION_LEVEL_TraceApplicationPowerMessage: POWER_INFORMATION_LEVEL = 30;
pub const POWER_INFORMATION_LEVEL_TraceApplicationPowerMessageEnd: POWER_INFORMATION_LEVEL = 31;
pub const POWER_INFORMATION_LEVEL_ProcessorPerfStates: POWER_INFORMATION_LEVEL = 32;
pub const POWER_INFORMATION_LEVEL_ProcessorIdleStates: POWER_INFORMATION_LEVEL = 33;
pub const POWER_INFORMATION_LEVEL_ProcessorCap: POWER_INFORMATION_LEVEL = 34;
pub const POWER_INFORMATION_LEVEL_SystemWakeSource: POWER_INFORMATION_LEVEL = 35;
pub const POWER_INFORMATION_LEVEL_SystemHiberFileInformation: POWER_INFORMATION_LEVEL = 36;
pub const POWER_INFORMATION_LEVEL_TraceServicePowerMessage: POWER_INFORMATION_LEVEL = 37;
pub const POWER_INFORMATION_LEVEL_ProcessorLoad: POWER_INFORMATION_LEVEL = 38;
pub const POWER_INFORMATION_LEVEL_PowerShutdownNotification: POWER_INFORMATION_LEVEL = 39;
pub const POWER_INFORMATION_LEVEL_MonitorCapabilities: POWER_INFORMATION_LEVEL = 40;
pub const POWER_INFORMATION_LEVEL_SessionPowerInit: POWER_INFORMATION_LEVEL = 41;
pub const POWER_INFORMATION_LEVEL_SessionDisplayState: POWER_INFORMATION_LEVEL = 42;
pub const POWER_INFORMATION_LEVEL_PowerRequestCreate: POWER_INFORMATION_LEVEL = 43;
pub const POWER_INFORMATION_LEVEL_PowerRequestAction: POWER_INFORMATION_LEVEL = 44;
pub const POWER_INFORMATION_LEVEL_GetPowerRequestList: POWER_INFORMATION_LEVEL = 45;
pub const POWER_INFORMATION_LEVEL_ProcessorInformationEx: POWER_INFORMATION_LEVEL = 46;
pub const POWER_INFORMATION_LEVEL_NotifyUserModeLegacyPowerEvent: POWER_INFORMATION_LEVEL = 47;
pub const POWER_INFORMATION_LEVEL_GroupPark: POWER_INFORMATION_LEVEL = 48;
pub const POWER_INFORMATION_LEVEL_ProcessorIdleDomains: POWER_INFORMATION_LEVEL = 49;
pub const POWER_INFORMATION_LEVEL_WakeTimerList: POWER_INFORMATION_LEVEL = 50;
pub const POWER_INFORMATION_LEVEL_SystemHiberFileSize: POWER_INFORMATION_LEVEL = 51;
pub const POWER_INFORMATION_LEVEL_ProcessorIdleStatesHv: POWER_INFORMATION_LEVEL = 52;
pub const POWER_INFORMATION_LEVEL_ProcessorPerfStatesHv: POWER_INFORMATION_LEVEL = 53;
pub const POWER_INFORMATION_LEVEL_ProcessorPerfCapHv: POWER_INFORMATION_LEVEL = 54;
pub const POWER_INFORMATION_LEVEL_ProcessorSetIdle: POWER_INFORMATION_LEVEL = 55;
pub const POWER_INFORMATION_LEVEL_LogicalProcessorIdling: POWER_INFORMATION_LEVEL = 56;
pub const POWER_INFORMATION_LEVEL_UserPresence: POWER_INFORMATION_LEVEL = 57;
pub const POWER_INFORMATION_LEVEL_PowerSettingNotificationName: POWER_INFORMATION_LEVEL = 58;
pub const POWER_INFORMATION_LEVEL_GetPowerSettingValue: POWER_INFORMATION_LEVEL = 59;
pub const POWER_INFORMATION_LEVEL_IdleResiliency: POWER_INFORMATION_LEVEL = 60;
pub const POWER_INFORMATION_LEVEL_SessionRITState: POWER_INFORMATION_LEVEL = 61;
pub const POWER_INFORMATION_LEVEL_SessionConnectNotification: POWER_INFORMATION_LEVEL = 62;
pub const POWER_INFORMATION_LEVEL_SessionPowerCleanup: POWER_INFORMATION_LEVEL = 63;
pub const POWER_INFORMATION_LEVEL_SessionLockState: POWER_INFORMATION_LEVEL = 64;
pub const POWER_INFORMATION_LEVEL_SystemHiberbootState: POWER_INFORMATION_LEVEL = 65;
pub const POWER_INFORMATION_LEVEL_PlatformInformation: POWER_INFORMATION_LEVEL = 66;
pub const POWER_INFORMATION_LEVEL_PdcInvocation: POWER_INFORMATION_LEVEL = 67;
pub const POWER_INFORMATION_LEVEL_MonitorInvocation: POWER_INFORMATION_LEVEL = 68;
pub const POWER_INFORMATION_LEVEL_FirmwareTableInformationRegistered: POWER_INFORMATION_LEVEL = 69;
pub const POWER_INFORMATION_LEVEL_SetShutdownSelectedTime: POWER_INFORMATION_LEVEL = 70;
pub const POWER_INFORMATION_LEVEL_SuspendResumeInvocation: POWER_INFORMATION_LEVEL = 71;
pub const POWER_INFORMATION_LEVEL_PlmPowerRequestCreate: POWER_INFORMATION_LEVEL = 72;
pub const POWER_INFORMATION_LEVEL_ScreenOff: POWER_INFORMATION_LEVEL = 73;
pub const POWER_INFORMATION_LEVEL_CsDeviceNotification: POWER_INFORMATION_LEVEL = 74;
pub const POWER_INFORMATION_LEVEL_PlatformRole: POWER_INFORMATION_LEVEL = 75;
pub const POWER_INFORMATION_LEVEL_LastResumePerformance: POWER_INFORMATION_LEVEL = 76;
pub const POWER_INFORMATION_LEVEL_DisplayBurst: POWER_INFORMATION_LEVEL = 77;
pub const POWER_INFORMATION_LEVEL_ExitLatencySamplingPercentage: POWER_INFORMATION_LEVEL = 78;
pub const POWER_INFORMATION_LEVEL_RegisterSpmPowerSettings: POWER_INFORMATION_LEVEL = 79;
pub const POWER_INFORMATION_LEVEL_PlatformIdleStates: POWER_INFORMATION_LEVEL = 80;
pub const POWER_INFORMATION_LEVEL_ProcessorIdleVeto: POWER_INFORMATION_LEVEL = 81;
pub const POWER_INFORMATION_LEVEL_PlatformIdleVeto: POWER_INFORMATION_LEVEL = 82;
pub const POWER_INFORMATION_LEVEL_SystemBatteryStatePrecise: POWER_INFORMATION_LEVEL = 83;
pub const POWER_INFORMATION_LEVEL_ThermalEvent: POWER_INFORMATION_LEVEL = 84;
pub const POWER_INFORMATION_LEVEL_PowerRequestActionInternal: POWER_INFORMATION_LEVEL = 85;
pub const POWER_INFORMATION_LEVEL_BatteryDeviceState: POWER_INFORMATION_LEVEL = 86;
pub const POWER_INFORMATION_LEVEL_PowerInformationInternal: POWER_INFORMATION_LEVEL = 87;
pub const POWER_INFORMATION_LEVEL_ThermalStandby: POWER_INFORMATION_LEVEL = 88;
pub const POWER_INFORMATION_LEVEL_SystemHiberFileType: POWER_INFORMATION_LEVEL = 89;
pub const POWER_INFORMATION_LEVEL_PhysicalPowerButtonPress: POWER_INFORMATION_LEVEL = 90;
pub const POWER_INFORMATION_LEVEL_QueryPotentialDripsConstraint: POWER_INFORMATION_LEVEL = 91;
pub const POWER_INFORMATION_LEVEL_EnergyTrackerCreate: POWER_INFORMATION_LEVEL = 92;
pub const POWER_INFORMATION_LEVEL_EnergyTrackerQuery: POWER_INFORMATION_LEVEL = 93;
pub const POWER_INFORMATION_LEVEL_UpdateBlackBoxRecorder: POWER_INFORMATION_LEVEL = 94;
pub const POWER_INFORMATION_LEVEL_SessionAllowExternalDmaDevices: POWER_INFORMATION_LEVEL = 95;
pub const POWER_INFORMATION_LEVEL_SendSuspendResumeNotification: POWER_INFORMATION_LEVEL = 96;
pub const POWER_INFORMATION_LEVEL_BlackBoxRecorderDirectAccessBuffer: POWER_INFORMATION_LEVEL = 97;
pub const POWER_INFORMATION_LEVEL_PowerInformationLevelMaximum: POWER_INFORMATION_LEVEL = 98;
pub type POWER_INFORMATION_LEVEL = ::std::os::raw::c_int;
pub const POWER_USER_PRESENCE_TYPE_UserNotPresent: POWER_USER_PRESENCE_TYPE = 0;
pub const POWER_USER_PRESENCE_TYPE_UserPresent: POWER_USER_PRESENCE_TYPE = 1;
pub const POWER_USER_PRESENCE_TYPE_UserUnknown: POWER_USER_PRESENCE_TYPE = 255;
pub type POWER_USER_PRESENCE_TYPE = ::std::os::raw::c_int;
pub type PPOWER_USER_PRESENCE_TYPE = *mut POWER_USER_PRESENCE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_USER_PRESENCE {
  pub UserPresence: POWER_USER_PRESENCE_TYPE,
}
#[test]
fn bindgen_test_layout__POWER_USER_PRESENCE() {
  const UNINIT: ::std::mem::MaybeUninit<_POWER_USER_PRESENCE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_POWER_USER_PRESENCE>(),
    4usize,
    concat!("Size of: ", stringify!(_POWER_USER_PRESENCE))
  );
  assert_eq!(
    ::std::mem::align_of::<_POWER_USER_PRESENCE>(),
    4usize,
    concat!("Alignment of ", stringify!(_POWER_USER_PRESENCE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UserPresence) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_USER_PRESENCE),
      "::",
      stringify!(UserPresence)
    )
  );
}
pub type POWER_USER_PRESENCE = _POWER_USER_PRESENCE;
pub type PPOWER_USER_PRESENCE = *mut _POWER_USER_PRESENCE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SESSION_CONNECT {
  pub Connected: BOOLEAN,
  pub Console: BOOLEAN,
}
#[test]
fn bindgen_test_layout__POWER_SESSION_CONNECT() {
  const UNINIT: ::std::mem::MaybeUninit<_POWER_SESSION_CONNECT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_POWER_SESSION_CONNECT>(),
    2usize,
    concat!("Size of: ", stringify!(_POWER_SESSION_CONNECT))
  );
  assert_eq!(
    ::std::mem::align_of::<_POWER_SESSION_CONNECT>(),
    1usize,
    concat!("Alignment of ", stringify!(_POWER_SESSION_CONNECT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Connected) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_SESSION_CONNECT),
      "::",
      stringify!(Connected)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Console) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_SESSION_CONNECT),
      "::",
      stringify!(Console)
    )
  );
}
pub type POWER_SESSION_CONNECT = _POWER_SESSION_CONNECT;
pub type PPOWER_SESSION_CONNECT = *mut _POWER_SESSION_CONNECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SESSION_TIMEOUTS {
  pub InputTimeout: DWORD,
  pub DisplayTimeout: DWORD,
}
#[test]
fn bindgen_test_layout__POWER_SESSION_TIMEOUTS() {
  const UNINIT: ::std::mem::MaybeUninit<_POWER_SESSION_TIMEOUTS> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_POWER_SESSION_TIMEOUTS>(),
    8usize,
    concat!("Size of: ", stringify!(_POWER_SESSION_TIMEOUTS))
  );
  assert_eq!(
    ::std::mem::align_of::<_POWER_SESSION_TIMEOUTS>(),
    4usize,
    concat!("Alignment of ", stringify!(_POWER_SESSION_TIMEOUTS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InputTimeout) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_SESSION_TIMEOUTS),
      "::",
      stringify!(InputTimeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DisplayTimeout) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_SESSION_TIMEOUTS),
      "::",
      stringify!(DisplayTimeout)
    )
  );
}
pub type POWER_SESSION_TIMEOUTS = _POWER_SESSION_TIMEOUTS;
pub type PPOWER_SESSION_TIMEOUTS = *mut _POWER_SESSION_TIMEOUTS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SESSION_RIT_STATE {
  pub Active: BOOLEAN,
  pub LastInputTime: DWORD64,
}
#[test]
fn bindgen_test_layout__POWER_SESSION_RIT_STATE() {
  const UNINIT: ::std::mem::MaybeUninit<_POWER_SESSION_RIT_STATE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_POWER_SESSION_RIT_STATE>(),
    16usize,
    concat!("Size of: ", stringify!(_POWER_SESSION_RIT_STATE))
  );
  assert_eq!(
    ::std::mem::align_of::<_POWER_SESSION_RIT_STATE>(),
    8usize,
    concat!("Alignment of ", stringify!(_POWER_SESSION_RIT_STATE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Active) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_SESSION_RIT_STATE),
      "::",
      stringify!(Active)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastInputTime) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_SESSION_RIT_STATE),
      "::",
      stringify!(LastInputTime)
    )
  );
}
pub type POWER_SESSION_RIT_STATE = _POWER_SESSION_RIT_STATE;
pub type PPOWER_SESSION_RIT_STATE = *mut _POWER_SESSION_RIT_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SESSION_WINLOGON {
  pub SessionId: DWORD,
  pub Console: BOOLEAN,
  pub Locked: BOOLEAN,
}
#[test]
fn bindgen_test_layout__POWER_SESSION_WINLOGON() {
  const UNINIT: ::std::mem::MaybeUninit<_POWER_SESSION_WINLOGON> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_POWER_SESSION_WINLOGON>(),
    8usize,
    concat!("Size of: ", stringify!(_POWER_SESSION_WINLOGON))
  );
  assert_eq!(
    ::std::mem::align_of::<_POWER_SESSION_WINLOGON>(),
    4usize,
    concat!("Alignment of ", stringify!(_POWER_SESSION_WINLOGON))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SessionId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_SESSION_WINLOGON),
      "::",
      stringify!(SessionId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Console) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_SESSION_WINLOGON),
      "::",
      stringify!(Console)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Locked) as usize - ptr as usize },
    5usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_SESSION_WINLOGON),
      "::",
      stringify!(Locked)
    )
  );
}
pub type POWER_SESSION_WINLOGON = _POWER_SESSION_WINLOGON;
pub type PPOWER_SESSION_WINLOGON = *mut _POWER_SESSION_WINLOGON;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES {
  pub IsAllowed: BOOLEAN,
}
#[test]
fn bindgen_test_layout__POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES() {
  const UNINIT: ::std::mem::MaybeUninit<_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES>(),
    1usize,
    concat!(
      "Size of: ",
      stringify!(_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IsAllowed) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES),
      "::",
      stringify!(IsAllowed)
    )
  );
}
pub type POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
pub type PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = *mut _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_IDLE_RESILIENCY {
  pub CoalescingTimeout: DWORD,
  pub IdleResiliencyPeriod: DWORD,
}
#[test]
fn bindgen_test_layout__POWER_IDLE_RESILIENCY() {
  const UNINIT: ::std::mem::MaybeUninit<_POWER_IDLE_RESILIENCY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_POWER_IDLE_RESILIENCY>(),
    8usize,
    concat!("Size of: ", stringify!(_POWER_IDLE_RESILIENCY))
  );
  assert_eq!(
    ::std::mem::align_of::<_POWER_IDLE_RESILIENCY>(),
    4usize,
    concat!("Alignment of ", stringify!(_POWER_IDLE_RESILIENCY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CoalescingTimeout) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_IDLE_RESILIENCY),
      "::",
      stringify!(CoalescingTimeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IdleResiliencyPeriod) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_IDLE_RESILIENCY),
      "::",
      stringify!(IdleResiliencyPeriod)
    )
  );
}
pub type POWER_IDLE_RESILIENCY = _POWER_IDLE_RESILIENCY;
pub type PPOWER_IDLE_RESILIENCY = *mut _POWER_IDLE_RESILIENCY;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUnknown: POWER_MONITOR_REQUEST_REASON =
  0;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPowerButton:
  POWER_MONITOR_REQUEST_REASON = 1;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonRemoteConnection:
  POWER_MONITOR_REQUEST_REASON = 2;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonScMonitorpower:
  POWER_MONITOR_REQUEST_REASON = 3;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInput: POWER_MONITOR_REQUEST_REASON =
  4;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonAcDcDisplayBurst:
  POWER_MONITOR_REQUEST_REASON = 5;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserDisplayBurst:
  POWER_MONITOR_REQUEST_REASON = 6;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPoSetSystemState:
  POWER_MONITOR_REQUEST_REASON = 7;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSetThreadExecutionState:
  POWER_MONITOR_REQUEST_REASON = 8;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonFullWake: POWER_MONITOR_REQUEST_REASON =
  9;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSessionUnlock:
  POWER_MONITOR_REQUEST_REASON = 10;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonScreenOffRequest:
  POWER_MONITOR_REQUEST_REASON = 11;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonIdleTimeout:
  POWER_MONITOR_REQUEST_REASON = 12;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPolicyChange:
  POWER_MONITOR_REQUEST_REASON = 13;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSleepButton:
  POWER_MONITOR_REQUEST_REASON = 14;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonLid: POWER_MONITOR_REQUEST_REASON = 15;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBatteryCountChange:
  POWER_MONITOR_REQUEST_REASON = 16;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonGracePeriod:
  POWER_MONITOR_REQUEST_REASON = 17;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPnP: POWER_MONITOR_REQUEST_REASON = 18;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDP: POWER_MONITOR_REQUEST_REASON = 19;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSxTransition:
  POWER_MONITOR_REQUEST_REASON = 20;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSystemIdle:
  POWER_MONITOR_REQUEST_REASON = 21;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonNearProximity:
  POWER_MONITOR_REQUEST_REASON = 22;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonThermalStandby:
  POWER_MONITOR_REQUEST_REASON = 23;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonResumePdc: POWER_MONITOR_REQUEST_REASON =
  24;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonResumeS4: POWER_MONITOR_REQUEST_REASON =
  25;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonTerminal: POWER_MONITOR_REQUEST_REASON =
  26;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignal: POWER_MONITOR_REQUEST_REASON =
  27;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonAcDcDisplayBurstSuppressed:
  POWER_MONITOR_REQUEST_REASON = 28;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSystemStateEntered:
  POWER_MONITOR_REQUEST_REASON = 29;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonWinrt: POWER_MONITOR_REQUEST_REASON = 30;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputKeyboard:
  POWER_MONITOR_REQUEST_REASON = 31;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputMouse:
  POWER_MONITOR_REQUEST_REASON = 32;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputTouchpad:
  POWER_MONITOR_REQUEST_REASON = 33;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputPen:
  POWER_MONITOR_REQUEST_REASON = 34;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputAccelerometer:
  POWER_MONITOR_REQUEST_REASON = 35;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputHid:
  POWER_MONITOR_REQUEST_REASON = 36;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputPoUserPresent:
  POWER_MONITOR_REQUEST_REASON = 37;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputSessionSwitch:
  POWER_MONITOR_REQUEST_REASON = 38;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputInitialization:
  POWER_MONITOR_REQUEST_REASON = 39;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalWindowsMobilePwrNotif:
  POWER_MONITOR_REQUEST_REASON = 40;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalWindowsMobileShell:
  POWER_MONITOR_REQUEST_REASON = 41;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalHeyCortana:
  POWER_MONITOR_REQUEST_REASON = 42;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalHolographicShell:
  POWER_MONITOR_REQUEST_REASON = 43;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalFingerprint:
  POWER_MONITOR_REQUEST_REASON = 44;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDirectedDrips:
  POWER_MONITOR_REQUEST_REASON = 45;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDim: POWER_MONITOR_REQUEST_REASON = 46;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBuiltinPanel:
  POWER_MONITOR_REQUEST_REASON = 47;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDisplayRequiredUnDim:
  POWER_MONITOR_REQUEST_REASON = 48;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBatteryCountChangeSuppressed:
  POWER_MONITOR_REQUEST_REASON = 49;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonResumeModernStandby:
  POWER_MONITOR_REQUEST_REASON = 50;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonTerminalInit:
  POWER_MONITOR_REQUEST_REASON = 51;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalSensorsHumanPresence:
  POWER_MONITOR_REQUEST_REASON = 52;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBatteryPreCritical:
  POWER_MONITOR_REQUEST_REASON = 53;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputTouch:
  POWER_MONITOR_REQUEST_REASON = 54;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonMax: POWER_MONITOR_REQUEST_REASON = 55;
pub type POWER_MONITOR_REQUEST_REASON = ::std::os::raw::c_int;
pub const _POWER_MONITOR_REQUEST_TYPE_MonitorRequestTypeOff: _POWER_MONITOR_REQUEST_TYPE = 0;
pub const _POWER_MONITOR_REQUEST_TYPE_MonitorRequestTypeOnAndPresent: _POWER_MONITOR_REQUEST_TYPE =
  1;
pub const _POWER_MONITOR_REQUEST_TYPE_MonitorRequestTypeToggleOn: _POWER_MONITOR_REQUEST_TYPE = 2;
pub type _POWER_MONITOR_REQUEST_TYPE = ::std::os::raw::c_int;
pub use self::_POWER_MONITOR_REQUEST_TYPE as POWER_MONITOR_REQUEST_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_MONITOR_INVOCATION {
  pub Console: BOOLEAN,
  pub RequestReason: POWER_MONITOR_REQUEST_REASON,
}
#[test]
fn bindgen_test_layout__POWER_MONITOR_INVOCATION() {
  const UNINIT: ::std::mem::MaybeUninit<_POWER_MONITOR_INVOCATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_POWER_MONITOR_INVOCATION>(),
    8usize,
    concat!("Size of: ", stringify!(_POWER_MONITOR_INVOCATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_POWER_MONITOR_INVOCATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_POWER_MONITOR_INVOCATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Console) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_MONITOR_INVOCATION),
      "::",
      stringify!(Console)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RequestReason) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_MONITOR_INVOCATION),
      "::",
      stringify!(RequestReason)
    )
  );
}
pub type POWER_MONITOR_INVOCATION = _POWER_MONITOR_INVOCATION;
pub type PPOWER_MONITOR_INVOCATION = *mut _POWER_MONITOR_INVOCATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RESUME_PERFORMANCE {
  pub PostTimeMs: DWORD,
  pub TotalResumeTimeMs: ULONGLONG,
  pub ResumeCompleteTimestamp: ULONGLONG,
}
#[test]
fn bindgen_test_layout__RESUME_PERFORMANCE() {
  const UNINIT: ::std::mem::MaybeUninit<_RESUME_PERFORMANCE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_RESUME_PERFORMANCE>(),
    24usize,
    concat!("Size of: ", stringify!(_RESUME_PERFORMANCE))
  );
  assert_eq!(
    ::std::mem::align_of::<_RESUME_PERFORMANCE>(),
    8usize,
    concat!("Alignment of ", stringify!(_RESUME_PERFORMANCE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PostTimeMs) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_RESUME_PERFORMANCE),
      "::",
      stringify!(PostTimeMs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalResumeTimeMs) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_RESUME_PERFORMANCE),
      "::",
      stringify!(TotalResumeTimeMs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ResumeCompleteTimestamp) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_RESUME_PERFORMANCE),
      "::",
      stringify!(ResumeCompleteTimestamp)
    )
  );
}
pub type RESUME_PERFORMANCE = _RESUME_PERFORMANCE;
pub type PRESUME_PERFORMANCE = *mut _RESUME_PERFORMANCE;
pub const SYSTEM_POWER_CONDITION_PoAc: SYSTEM_POWER_CONDITION = 0;
pub const SYSTEM_POWER_CONDITION_PoDc: SYSTEM_POWER_CONDITION = 1;
pub const SYSTEM_POWER_CONDITION_PoHot: SYSTEM_POWER_CONDITION = 2;
pub const SYSTEM_POWER_CONDITION_PoConditionMaximum: SYSTEM_POWER_CONDITION = 3;
pub type SYSTEM_POWER_CONDITION = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SET_POWER_SETTING_VALUE {
  pub Version: DWORD,
  pub Guid: GUID,
  pub PowerCondition: SYSTEM_POWER_CONDITION,
  pub DataLength: DWORD,
  pub Data: [BYTE; 1usize],
}
#[test]
fn bindgen_test_layout_SET_POWER_SETTING_VALUE() {
  const UNINIT: ::std::mem::MaybeUninit<SET_POWER_SETTING_VALUE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<SET_POWER_SETTING_VALUE>(),
    32usize,
    concat!("Size of: ", stringify!(SET_POWER_SETTING_VALUE))
  );
  assert_eq!(
    ::std::mem::align_of::<SET_POWER_SETTING_VALUE>(),
    4usize,
    concat!("Alignment of ", stringify!(SET_POWER_SETTING_VALUE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(SET_POWER_SETTING_VALUE),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Guid) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(SET_POWER_SETTING_VALUE),
      "::",
      stringify!(Guid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PowerCondition) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(SET_POWER_SETTING_VALUE),
      "::",
      stringify!(PowerCondition)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataLength) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(SET_POWER_SETTING_VALUE),
      "::",
      stringify!(DataLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(SET_POWER_SETTING_VALUE),
      "::",
      stringify!(Data)
    )
  );
}
pub type PSET_POWER_SETTING_VALUE = *mut SET_POWER_SETTING_VALUE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NOTIFY_USER_POWER_SETTING {
  pub Guid: GUID,
}
#[test]
fn bindgen_test_layout_NOTIFY_USER_POWER_SETTING() {
  const UNINIT: ::std::mem::MaybeUninit<NOTIFY_USER_POWER_SETTING> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<NOTIFY_USER_POWER_SETTING>(),
    16usize,
    concat!("Size of: ", stringify!(NOTIFY_USER_POWER_SETTING))
  );
  assert_eq!(
    ::std::mem::align_of::<NOTIFY_USER_POWER_SETTING>(),
    4usize,
    concat!("Alignment of ", stringify!(NOTIFY_USER_POWER_SETTING))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Guid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(NOTIFY_USER_POWER_SETTING),
      "::",
      stringify!(Guid)
    )
  );
}
pub type PNOTIFY_USER_POWER_SETTING = *mut NOTIFY_USER_POWER_SETTING;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _APPLICATIONLAUNCH_SETTING_VALUE {
  pub ActivationTime: LARGE_INTEGER,
  pub Flags: DWORD,
  pub ButtonInstanceID: DWORD,
}
#[test]
fn bindgen_test_layout__APPLICATIONLAUNCH_SETTING_VALUE() {
  const UNINIT: ::std::mem::MaybeUninit<_APPLICATIONLAUNCH_SETTING_VALUE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_APPLICATIONLAUNCH_SETTING_VALUE>(),
    16usize,
    concat!("Size of: ", stringify!(_APPLICATIONLAUNCH_SETTING_VALUE))
  );
  assert_eq!(
    ::std::mem::align_of::<_APPLICATIONLAUNCH_SETTING_VALUE>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_APPLICATIONLAUNCH_SETTING_VALUE)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ActivationTime) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_APPLICATIONLAUNCH_SETTING_VALUE),
      "::",
      stringify!(ActivationTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_APPLICATIONLAUNCH_SETTING_VALUE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ButtonInstanceID) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_APPLICATIONLAUNCH_SETTING_VALUE),
      "::",
      stringify!(ButtonInstanceID)
    )
  );
}
pub type APPLICATIONLAUNCH_SETTING_VALUE = _APPLICATIONLAUNCH_SETTING_VALUE;
pub type PAPPLICATIONLAUNCH_SETTING_VALUE = *mut _APPLICATIONLAUNCH_SETTING_VALUE;
pub const _POWER_PLATFORM_ROLE_PlatformRoleUnspecified: _POWER_PLATFORM_ROLE = 0;
pub const _POWER_PLATFORM_ROLE_PlatformRoleDesktop: _POWER_PLATFORM_ROLE = 1;
pub const _POWER_PLATFORM_ROLE_PlatformRoleMobile: _POWER_PLATFORM_ROLE = 2;
pub const _POWER_PLATFORM_ROLE_PlatformRoleWorkstation: _POWER_PLATFORM_ROLE = 3;
pub const _POWER_PLATFORM_ROLE_PlatformRoleEnterpriseServer: _POWER_PLATFORM_ROLE = 4;
pub const _POWER_PLATFORM_ROLE_PlatformRoleSOHOServer: _POWER_PLATFORM_ROLE = 5;
pub const _POWER_PLATFORM_ROLE_PlatformRoleAppliancePC: _POWER_PLATFORM_ROLE = 6;
pub const _POWER_PLATFORM_ROLE_PlatformRolePerformanceServer: _POWER_PLATFORM_ROLE = 7;
pub const _POWER_PLATFORM_ROLE_PlatformRoleSlate: _POWER_PLATFORM_ROLE = 8;
pub const _POWER_PLATFORM_ROLE_PlatformRoleMaximum: _POWER_PLATFORM_ROLE = 9;
pub type _POWER_PLATFORM_ROLE = ::std::os::raw::c_int;
pub use self::_POWER_PLATFORM_ROLE as POWER_PLATFORM_ROLE;
pub type PPOWER_PLATFORM_ROLE = *mut _POWER_PLATFORM_ROLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_PLATFORM_INFORMATION {
  pub AoAc: BOOLEAN,
}
#[test]
fn bindgen_test_layout__POWER_PLATFORM_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_POWER_PLATFORM_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_POWER_PLATFORM_INFORMATION>(),
    1usize,
    concat!("Size of: ", stringify!(_POWER_PLATFORM_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_POWER_PLATFORM_INFORMATION>(),
    1usize,
    concat!("Alignment of ", stringify!(_POWER_PLATFORM_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AoAc) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_POWER_PLATFORM_INFORMATION),
      "::",
      stringify!(AoAc)
    )
  );
}
pub type POWER_PLATFORM_INFORMATION = _POWER_PLATFORM_INFORMATION;
pub type PPOWER_PLATFORM_INFORMATION = *mut _POWER_PLATFORM_INFORMATION;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_GROUP_POLICY: POWER_SETTING_ALTITUDE = 0;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_USER: POWER_SETTING_ALTITUDE = 1;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_RUNTIME_OVERRIDE: POWER_SETTING_ALTITUDE = 2;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_PROVISIONING: POWER_SETTING_ALTITUDE = 3;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_OEM_CUSTOMIZATION: POWER_SETTING_ALTITUDE = 4;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_INTERNAL_OVERRIDE: POWER_SETTING_ALTITUDE = 5;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_OS_DEFAULT: POWER_SETTING_ALTITUDE = 6;
pub type POWER_SETTING_ALTITUDE = ::std::os::raw::c_int;
pub type PPOWER_SETTING_ALTITUDE = *mut POWER_SETTING_ALTITUDE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BATTERY_REPORTING_SCALE {
  pub Granularity: DWORD,
  pub Capacity: DWORD,
}
#[test]
fn bindgen_test_layout_BATTERY_REPORTING_SCALE() {
  const UNINIT: ::std::mem::MaybeUninit<BATTERY_REPORTING_SCALE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<BATTERY_REPORTING_SCALE>(),
    8usize,
    concat!("Size of: ", stringify!(BATTERY_REPORTING_SCALE))
  );
  assert_eq!(
    ::std::mem::align_of::<BATTERY_REPORTING_SCALE>(),
    4usize,
    concat!("Alignment of ", stringify!(BATTERY_REPORTING_SCALE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Granularity) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(BATTERY_REPORTING_SCALE),
      "::",
      stringify!(Granularity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(BATTERY_REPORTING_SCALE),
      "::",
      stringify!(Capacity)
    )
  );
}
pub type PBATTERY_REPORTING_SCALE = *mut BATTERY_REPORTING_SCALE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_LEGACY_PERFSTATE {
  pub Frequency: DWORD,
  pub Flags: DWORD,
  pub PercentFrequency: DWORD,
}
#[test]
fn bindgen_test_layout_PPM_WMI_LEGACY_PERFSTATE() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_WMI_LEGACY_PERFSTATE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_WMI_LEGACY_PERFSTATE>(),
    12usize,
    concat!("Size of: ", stringify!(PPM_WMI_LEGACY_PERFSTATE))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_WMI_LEGACY_PERFSTATE>(),
    4usize,
    concat!("Alignment of ", stringify!(PPM_WMI_LEGACY_PERFSTATE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Frequency) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_LEGACY_PERFSTATE),
      "::",
      stringify!(Frequency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_LEGACY_PERFSTATE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PercentFrequency) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_LEGACY_PERFSTATE),
      "::",
      stringify!(PercentFrequency)
    )
  );
}
pub type PPPM_WMI_LEGACY_PERFSTATE = *mut PPM_WMI_LEGACY_PERFSTATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_IDLE_STATE {
  pub Latency: DWORD,
  pub Power: DWORD,
  pub TimeCheck: DWORD,
  pub PromotePercent: BYTE,
  pub DemotePercent: BYTE,
  pub StateType: BYTE,
  pub Reserved: BYTE,
  pub StateFlags: DWORD,
  pub Context: DWORD,
  pub IdleHandler: DWORD,
  pub Reserved1: DWORD,
}
#[test]
fn bindgen_test_layout_PPM_WMI_IDLE_STATE() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_WMI_IDLE_STATE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_WMI_IDLE_STATE>(),
    32usize,
    concat!("Size of: ", stringify!(PPM_WMI_IDLE_STATE))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_WMI_IDLE_STATE>(),
    4usize,
    concat!("Alignment of ", stringify!(PPM_WMI_IDLE_STATE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Latency) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(Latency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Power) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(Power)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeCheck) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(TimeCheck)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PromotePercent) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(PromotePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DemotePercent) as usize - ptr as usize },
    13usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(DemotePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StateType) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(StateType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    15usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StateFlags) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(StateFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Context) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(Context)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IdleHandler) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(IdleHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATE),
      "::",
      stringify!(Reserved1)
    )
  );
}
pub type PPPM_WMI_IDLE_STATE = *mut PPM_WMI_IDLE_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_IDLE_STATES {
  pub Type: DWORD,
  pub Count: DWORD,
  pub TargetState: DWORD,
  pub OldState: DWORD,
  pub TargetProcessors: DWORD64,
  pub State: [PPM_WMI_IDLE_STATE; 1usize],
}
#[test]
fn bindgen_test_layout_PPM_WMI_IDLE_STATES() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_WMI_IDLE_STATES> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_WMI_IDLE_STATES>(),
    56usize,
    concat!("Size of: ", stringify!(PPM_WMI_IDLE_STATES))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_WMI_IDLE_STATES>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_WMI_IDLE_STATES))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES),
      "::",
      stringify!(Count)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetState) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES),
      "::",
      stringify!(TargetState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OldState) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES),
      "::",
      stringify!(OldState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetProcessors) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES),
      "::",
      stringify!(TargetProcessors)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES),
      "::",
      stringify!(State)
    )
  );
}
pub type PPPM_WMI_IDLE_STATES = *mut PPM_WMI_IDLE_STATES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_IDLE_STATES_EX {
  pub Type: DWORD,
  pub Count: DWORD,
  pub TargetState: DWORD,
  pub OldState: DWORD,
  pub TargetProcessors: PVOID,
  pub State: [PPM_WMI_IDLE_STATE; 1usize],
}
#[test]
fn bindgen_test_layout_PPM_WMI_IDLE_STATES_EX() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_WMI_IDLE_STATES_EX> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_WMI_IDLE_STATES_EX>(),
    56usize,
    concat!("Size of: ", stringify!(PPM_WMI_IDLE_STATES_EX))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_WMI_IDLE_STATES_EX>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_WMI_IDLE_STATES_EX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES_EX),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES_EX),
      "::",
      stringify!(Count)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetState) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES_EX),
      "::",
      stringify!(TargetState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OldState) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES_EX),
      "::",
      stringify!(OldState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetProcessors) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES_EX),
      "::",
      stringify!(TargetProcessors)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_IDLE_STATES_EX),
      "::",
      stringify!(State)
    )
  );
}
pub type PPPM_WMI_IDLE_STATES_EX = *mut PPM_WMI_IDLE_STATES_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_PERF_STATE {
  pub Frequency: DWORD,
  pub Power: DWORD,
  pub PercentFrequency: BYTE,
  pub IncreaseLevel: BYTE,
  pub DecreaseLevel: BYTE,
  pub Type: BYTE,
  pub IncreaseTime: DWORD,
  pub DecreaseTime: DWORD,
  pub Control: DWORD64,
  pub Status: DWORD64,
  pub HitCount: DWORD,
  pub Reserved1: DWORD,
  pub Reserved2: DWORD64,
  pub Reserved3: DWORD64,
}
#[test]
fn bindgen_test_layout_PPM_WMI_PERF_STATE() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_WMI_PERF_STATE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_WMI_PERF_STATE>(),
    64usize,
    concat!("Size of: ", stringify!(PPM_WMI_PERF_STATE))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_WMI_PERF_STATE>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_WMI_PERF_STATE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Frequency) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(Frequency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Power) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(Power)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PercentFrequency) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(PercentFrequency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IncreaseLevel) as usize - ptr as usize },
    9usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(IncreaseLevel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DecreaseLevel) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(DecreaseLevel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    11usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IncreaseTime) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(IncreaseTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DecreaseTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(DecreaseTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Control) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(Control)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(Status)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HitCount) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(HitCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATE),
      "::",
      stringify!(Reserved3)
    )
  );
}
pub type PPPM_WMI_PERF_STATE = *mut PPM_WMI_PERF_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_PERF_STATES {
  pub Count: DWORD,
  pub MaxFrequency: DWORD,
  pub CurrentState: DWORD,
  pub MaxPerfState: DWORD,
  pub MinPerfState: DWORD,
  pub LowestPerfState: DWORD,
  pub ThermalConstraint: DWORD,
  pub BusyAdjThreshold: BYTE,
  pub PolicyType: BYTE,
  pub Type: BYTE,
  pub Reserved: BYTE,
  pub TimerInterval: DWORD,
  pub TargetProcessors: DWORD64,
  pub PStateHandler: DWORD,
  pub PStateContext: DWORD,
  pub TStateHandler: DWORD,
  pub TStateContext: DWORD,
  pub FeedbackHandler: DWORD,
  pub Reserved1: DWORD,
  pub Reserved2: DWORD64,
  pub State: [PPM_WMI_PERF_STATE; 1usize],
}
#[test]
fn bindgen_test_layout_PPM_WMI_PERF_STATES() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_WMI_PERF_STATES> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_WMI_PERF_STATES>(),
    144usize,
    concat!("Size of: ", stringify!(PPM_WMI_PERF_STATES))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_WMI_PERF_STATES>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_WMI_PERF_STATES))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(Count)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxFrequency) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(MaxFrequency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CurrentState) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(CurrentState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxPerfState) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(MaxPerfState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinPerfState) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(MinPerfState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LowestPerfState) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(LowestPerfState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ThermalConstraint) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(ThermalConstraint)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BusyAdjThreshold) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(BusyAdjThreshold)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PolicyType) as usize - ptr as usize },
    29usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(PolicyType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    30usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    31usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimerInterval) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(TimerInterval)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetProcessors) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(TargetProcessors)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PStateHandler) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(PStateHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PStateContext) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(PStateContext)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TStateHandler) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(TStateHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TStateContext) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(TStateContext)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FeedbackHandler) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(FeedbackHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES),
      "::",
      stringify!(State)
    )
  );
}
pub type PPPM_WMI_PERF_STATES = *mut PPM_WMI_PERF_STATES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_PERF_STATES_EX {
  pub Count: DWORD,
  pub MaxFrequency: DWORD,
  pub CurrentState: DWORD,
  pub MaxPerfState: DWORD,
  pub MinPerfState: DWORD,
  pub LowestPerfState: DWORD,
  pub ThermalConstraint: DWORD,
  pub BusyAdjThreshold: BYTE,
  pub PolicyType: BYTE,
  pub Type: BYTE,
  pub Reserved: BYTE,
  pub TimerInterval: DWORD,
  pub TargetProcessors: PVOID,
  pub PStateHandler: DWORD,
  pub PStateContext: DWORD,
  pub TStateHandler: DWORD,
  pub TStateContext: DWORD,
  pub FeedbackHandler: DWORD,
  pub Reserved1: DWORD,
  pub Reserved2: DWORD64,
  pub State: [PPM_WMI_PERF_STATE; 1usize],
}
#[test]
fn bindgen_test_layout_PPM_WMI_PERF_STATES_EX() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_WMI_PERF_STATES_EX> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_WMI_PERF_STATES_EX>(),
    144usize,
    concat!("Size of: ", stringify!(PPM_WMI_PERF_STATES_EX))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_WMI_PERF_STATES_EX>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_WMI_PERF_STATES_EX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(Count)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxFrequency) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(MaxFrequency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CurrentState) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(CurrentState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxPerfState) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(MaxPerfState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinPerfState) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(MinPerfState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LowestPerfState) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(LowestPerfState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ThermalConstraint) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(ThermalConstraint)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BusyAdjThreshold) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(BusyAdjThreshold)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PolicyType) as usize - ptr as usize },
    29usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(PolicyType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    30usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    31usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimerInterval) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(TimerInterval)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TargetProcessors) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(TargetProcessors)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PStateHandler) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(PStateHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PStateContext) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(PStateContext)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TStateHandler) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(TStateHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TStateContext) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(TStateContext)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FeedbackHandler) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(FeedbackHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_WMI_PERF_STATES_EX),
      "::",
      stringify!(State)
    )
  );
}
pub type PPPM_WMI_PERF_STATES_EX = *mut PPM_WMI_PERF_STATES_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLE_STATE_ACCOUNTING {
  pub IdleTransitions: DWORD,
  pub FailedTransitions: DWORD,
  pub InvalidBucketIndex: DWORD,
  pub TotalTime: DWORD64,
  pub IdleTimeBuckets: [DWORD; 6usize],
}
#[test]
fn bindgen_test_layout_PPM_IDLE_STATE_ACCOUNTING() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_IDLE_STATE_ACCOUNTING> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_IDLE_STATE_ACCOUNTING>(),
    48usize,
    concat!("Size of: ", stringify!(PPM_IDLE_STATE_ACCOUNTING))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_IDLE_STATE_ACCOUNTING>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_IDLE_STATE_ACCOUNTING))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IdleTransitions) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING),
      "::",
      stringify!(IdleTransitions)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FailedTransitions) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING),
      "::",
      stringify!(FailedTransitions)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InvalidBucketIndex) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING),
      "::",
      stringify!(InvalidBucketIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING),
      "::",
      stringify!(TotalTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IdleTimeBuckets) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING),
      "::",
      stringify!(IdleTimeBuckets)
    )
  );
}
pub type PPPM_IDLE_STATE_ACCOUNTING = *mut PPM_IDLE_STATE_ACCOUNTING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLE_ACCOUNTING {
  pub StateCount: DWORD,
  pub TotalTransitions: DWORD,
  pub ResetCount: DWORD,
  pub StartTime: DWORD64,
  pub State: [PPM_IDLE_STATE_ACCOUNTING; 1usize],
}
#[test]
fn bindgen_test_layout_PPM_IDLE_ACCOUNTING() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_IDLE_ACCOUNTING> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_IDLE_ACCOUNTING>(),
    72usize,
    concat!("Size of: ", stringify!(PPM_IDLE_ACCOUNTING))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_IDLE_ACCOUNTING>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_IDLE_ACCOUNTING))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StateCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING),
      "::",
      stringify!(StateCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalTransitions) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING),
      "::",
      stringify!(TotalTransitions)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ResetCount) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING),
      "::",
      stringify!(ResetCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StartTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING),
      "::",
      stringify!(StartTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING),
      "::",
      stringify!(State)
    )
  );
}
pub type PPPM_IDLE_ACCOUNTING = *mut PPM_IDLE_ACCOUNTING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLE_STATE_BUCKET_EX {
  pub TotalTimeUs: DWORD64,
  pub MinTimeUs: DWORD,
  pub MaxTimeUs: DWORD,
  pub Count: DWORD,
}
#[test]
fn bindgen_test_layout_PPM_IDLE_STATE_BUCKET_EX() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_IDLE_STATE_BUCKET_EX> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_IDLE_STATE_BUCKET_EX>(),
    24usize,
    concat!("Size of: ", stringify!(PPM_IDLE_STATE_BUCKET_EX))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_IDLE_STATE_BUCKET_EX>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_IDLE_STATE_BUCKET_EX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalTimeUs) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_BUCKET_EX),
      "::",
      stringify!(TotalTimeUs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinTimeUs) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_BUCKET_EX),
      "::",
      stringify!(MinTimeUs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxTimeUs) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_BUCKET_EX),
      "::",
      stringify!(MaxTimeUs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_BUCKET_EX),
      "::",
      stringify!(Count)
    )
  );
}
pub type PPPM_IDLE_STATE_BUCKET_EX = *mut PPM_IDLE_STATE_BUCKET_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLE_STATE_ACCOUNTING_EX {
  pub TotalTime: DWORD64,
  pub IdleTransitions: DWORD,
  pub FailedTransitions: DWORD,
  pub InvalidBucketIndex: DWORD,
  pub MinTimeUs: DWORD,
  pub MaxTimeUs: DWORD,
  pub CancelledTransitions: DWORD,
  pub IdleTimeBuckets: [PPM_IDLE_STATE_BUCKET_EX; 16usize],
}
#[test]
fn bindgen_test_layout_PPM_IDLE_STATE_ACCOUNTING_EX() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_IDLE_STATE_ACCOUNTING_EX> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_IDLE_STATE_ACCOUNTING_EX>(),
    416usize,
    concat!("Size of: ", stringify!(PPM_IDLE_STATE_ACCOUNTING_EX))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_IDLE_STATE_ACCOUNTING_EX>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_IDLE_STATE_ACCOUNTING_EX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalTime) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING_EX),
      "::",
      stringify!(TotalTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IdleTransitions) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING_EX),
      "::",
      stringify!(IdleTransitions)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FailedTransitions) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING_EX),
      "::",
      stringify!(FailedTransitions)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).InvalidBucketIndex) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING_EX),
      "::",
      stringify!(InvalidBucketIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinTimeUs) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING_EX),
      "::",
      stringify!(MinTimeUs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxTimeUs) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING_EX),
      "::",
      stringify!(MaxTimeUs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CancelledTransitions) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING_EX),
      "::",
      stringify!(CancelledTransitions)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IdleTimeBuckets) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_STATE_ACCOUNTING_EX),
      "::",
      stringify!(IdleTimeBuckets)
    )
  );
}
pub type PPPM_IDLE_STATE_ACCOUNTING_EX = *mut PPM_IDLE_STATE_ACCOUNTING_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLE_ACCOUNTING_EX {
  pub StateCount: DWORD,
  pub TotalTransitions: DWORD,
  pub ResetCount: DWORD,
  pub AbortCount: DWORD,
  pub StartTime: DWORD64,
  pub State: [PPM_IDLE_STATE_ACCOUNTING_EX; 1usize],
}
#[test]
fn bindgen_test_layout_PPM_IDLE_ACCOUNTING_EX() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_IDLE_ACCOUNTING_EX> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_IDLE_ACCOUNTING_EX>(),
    440usize,
    concat!("Size of: ", stringify!(PPM_IDLE_ACCOUNTING_EX))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_IDLE_ACCOUNTING_EX>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_IDLE_ACCOUNTING_EX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StateCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING_EX),
      "::",
      stringify!(StateCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalTransitions) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING_EX),
      "::",
      stringify!(TotalTransitions)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ResetCount) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING_EX),
      "::",
      stringify!(ResetCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AbortCount) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING_EX),
      "::",
      stringify!(AbortCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StartTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING_EX),
      "::",
      stringify!(StartTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLE_ACCOUNTING_EX),
      "::",
      stringify!(State)
    )
  );
}
pub type PPPM_IDLE_ACCOUNTING_EX = *mut PPM_IDLE_ACCOUNTING_EX;
extern "C" {
  pub static PPM_PERFSTATE_CHANGE_GUID: GUID;
}
extern "C" {
  pub static PPM_PERFSTATE_DOMAIN_CHANGE_GUID: GUID;
}
extern "C" {
  pub static PPM_IDLESTATE_CHANGE_GUID: GUID;
}
extern "C" {
  pub static PPM_PERFSTATES_DATA_GUID: GUID;
}
extern "C" {
  pub static PPM_IDLESTATES_DATA_GUID: GUID;
}
extern "C" {
  pub static PPM_IDLE_ACCOUNTING_GUID: GUID;
}
extern "C" {
  pub static PPM_IDLE_ACCOUNTING_EX_GUID: GUID;
}
extern "C" {
  pub static PPM_THERMALCONSTRAINT_GUID: GUID;
}
extern "C" {
  pub static PPM_PERFMON_PERFSTATE_GUID: GUID;
}
extern "C" {
  pub static PPM_THERMAL_POLICY_CHANGE_GUID: GUID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_PERFSTATE_EVENT {
  pub State: DWORD,
  pub Status: DWORD,
  pub Latency: DWORD,
  pub Speed: DWORD,
  pub Processor: DWORD,
}
#[test]
fn bindgen_test_layout_PPM_PERFSTATE_EVENT() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_PERFSTATE_EVENT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_PERFSTATE_EVENT>(),
    20usize,
    concat!("Size of: ", stringify!(PPM_PERFSTATE_EVENT))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_PERFSTATE_EVENT>(),
    4usize,
    concat!("Alignment of ", stringify!(PPM_PERFSTATE_EVENT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_PERFSTATE_EVENT),
      "::",
      stringify!(State)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Status) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_PERFSTATE_EVENT),
      "::",
      stringify!(Status)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Latency) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_PERFSTATE_EVENT),
      "::",
      stringify!(Latency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Speed) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_PERFSTATE_EVENT),
      "::",
      stringify!(Speed)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Processor) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_PERFSTATE_EVENT),
      "::",
      stringify!(Processor)
    )
  );
}
pub type PPPM_PERFSTATE_EVENT = *mut PPM_PERFSTATE_EVENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_PERFSTATE_DOMAIN_EVENT {
  pub State: DWORD,
  pub Latency: DWORD,
  pub Speed: DWORD,
  pub Processors: DWORD64,
}
#[test]
fn bindgen_test_layout_PPM_PERFSTATE_DOMAIN_EVENT() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_PERFSTATE_DOMAIN_EVENT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_PERFSTATE_DOMAIN_EVENT>(),
    24usize,
    concat!("Size of: ", stringify!(PPM_PERFSTATE_DOMAIN_EVENT))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_PERFSTATE_DOMAIN_EVENT>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_PERFSTATE_DOMAIN_EVENT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_PERFSTATE_DOMAIN_EVENT),
      "::",
      stringify!(State)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Latency) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_PERFSTATE_DOMAIN_EVENT),
      "::",
      stringify!(Latency)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Speed) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_PERFSTATE_DOMAIN_EVENT),
      "::",
      stringify!(Speed)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Processors) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_PERFSTATE_DOMAIN_EVENT),
      "::",
      stringify!(Processors)
    )
  );
}
pub type PPPM_PERFSTATE_DOMAIN_EVENT = *mut PPM_PERFSTATE_DOMAIN_EVENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLESTATE_EVENT {
  pub NewState: DWORD,
  pub OldState: DWORD,
  pub Processors: DWORD64,
}
#[test]
fn bindgen_test_layout_PPM_IDLESTATE_EVENT() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_IDLESTATE_EVENT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_IDLESTATE_EVENT>(),
    16usize,
    concat!("Size of: ", stringify!(PPM_IDLESTATE_EVENT))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_IDLESTATE_EVENT>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_IDLESTATE_EVENT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NewState) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLESTATE_EVENT),
      "::",
      stringify!(NewState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OldState) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLESTATE_EVENT),
      "::",
      stringify!(OldState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Processors) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_IDLESTATE_EVENT),
      "::",
      stringify!(Processors)
    )
  );
}
pub type PPPM_IDLESTATE_EVENT = *mut PPM_IDLESTATE_EVENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_THERMALCHANGE_EVENT {
  pub ThermalConstraint: DWORD,
  pub Processors: DWORD64,
}
#[test]
fn bindgen_test_layout_PPM_THERMALCHANGE_EVENT() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_THERMALCHANGE_EVENT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_THERMALCHANGE_EVENT>(),
    16usize,
    concat!("Size of: ", stringify!(PPM_THERMALCHANGE_EVENT))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_THERMALCHANGE_EVENT>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_THERMALCHANGE_EVENT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ThermalConstraint) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_THERMALCHANGE_EVENT),
      "::",
      stringify!(ThermalConstraint)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Processors) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_THERMALCHANGE_EVENT),
      "::",
      stringify!(Processors)
    )
  );
}
pub type PPPM_THERMALCHANGE_EVENT = *mut PPM_THERMALCHANGE_EVENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_THERMAL_POLICY_EVENT {
  pub Mode: BYTE,
  pub Processors: DWORD64,
}
#[test]
fn bindgen_test_layout_PPM_THERMAL_POLICY_EVENT() {
  const UNINIT: ::std::mem::MaybeUninit<PPM_THERMAL_POLICY_EVENT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PPM_THERMAL_POLICY_EVENT>(),
    16usize,
    concat!("Size of: ", stringify!(PPM_THERMAL_POLICY_EVENT))
  );
  assert_eq!(
    ::std::mem::align_of::<PPM_THERMAL_POLICY_EVENT>(),
    8usize,
    concat!("Alignment of ", stringify!(PPM_THERMAL_POLICY_EVENT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_THERMAL_POLICY_EVENT),
      "::",
      stringify!(Mode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Processors) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PPM_THERMAL_POLICY_EVENT),
      "::",
      stringify!(Processors)
    )
  );
}
pub type PPPM_THERMAL_POLICY_EVENT = *mut PPM_THERMAL_POLICY_EVENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct POWER_ACTION_POLICY {
  pub Action: POWER_ACTION,
  pub Flags: DWORD,
  pub EventCode: DWORD,
}
#[test]
fn bindgen_test_layout_POWER_ACTION_POLICY() {
  const UNINIT: ::std::mem::MaybeUninit<POWER_ACTION_POLICY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<POWER_ACTION_POLICY>(),
    12usize,
    concat!("Size of: ", stringify!(POWER_ACTION_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<POWER_ACTION_POLICY>(),
    4usize,
    concat!("Alignment of ", stringify!(POWER_ACTION_POLICY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Action) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(POWER_ACTION_POLICY),
      "::",
      stringify!(Action)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(POWER_ACTION_POLICY),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EventCode) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(POWER_ACTION_POLICY),
      "::",
      stringify!(EventCode)
    )
  );
}
pub type PPOWER_ACTION_POLICY = *mut POWER_ACTION_POLICY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSTEM_POWER_LEVEL {
  pub Enable: BOOLEAN,
  pub Spare: [BYTE; 3usize],
  pub BatteryLevel: DWORD,
  pub PowerPolicy: POWER_ACTION_POLICY,
  pub MinSystemState: SYSTEM_POWER_STATE,
}
#[test]
fn bindgen_test_layout_SYSTEM_POWER_LEVEL() {
  const UNINIT: ::std::mem::MaybeUninit<SYSTEM_POWER_LEVEL> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<SYSTEM_POWER_LEVEL>(),
    24usize,
    concat!("Size of: ", stringify!(SYSTEM_POWER_LEVEL))
  );
  assert_eq!(
    ::std::mem::align_of::<SYSTEM_POWER_LEVEL>(),
    4usize,
    concat!("Alignment of ", stringify!(SYSTEM_POWER_LEVEL))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Enable) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_LEVEL),
      "::",
      stringify!(Enable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Spare) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_LEVEL),
      "::",
      stringify!(Spare)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BatteryLevel) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_LEVEL),
      "::",
      stringify!(BatteryLevel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PowerPolicy) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_LEVEL),
      "::",
      stringify!(PowerPolicy)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinSystemState) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_LEVEL),
      "::",
      stringify!(MinSystemState)
    )
  );
}
pub type PSYSTEM_POWER_LEVEL = *mut SYSTEM_POWER_LEVEL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_POWER_POLICY {
  pub Revision: DWORD,
  pub PowerButton: POWER_ACTION_POLICY,
  pub SleepButton: POWER_ACTION_POLICY,
  pub LidClose: POWER_ACTION_POLICY,
  pub LidOpenWake: SYSTEM_POWER_STATE,
  pub Reserved: DWORD,
  pub Idle: POWER_ACTION_POLICY,
  pub IdleTimeout: DWORD,
  pub IdleSensitivity: BYTE,
  pub DynamicThrottle: BYTE,
  pub Spare2: [BYTE; 2usize],
  pub MinSleep: SYSTEM_POWER_STATE,
  pub MaxSleep: SYSTEM_POWER_STATE,
  pub ReducedLatencySleep: SYSTEM_POWER_STATE,
  pub WinLogonFlags: DWORD,
  pub Spare3: DWORD,
  pub DozeS4Timeout: DWORD,
  pub BroadcastCapacityResolution: DWORD,
  pub DischargePolicy: [SYSTEM_POWER_LEVEL; 4usize],
  pub VideoTimeout: DWORD,
  pub VideoDimDisplay: BOOLEAN,
  pub VideoReserved: [DWORD; 3usize],
  pub SpindownTimeout: DWORD,
  pub OptimizeForPower: BOOLEAN,
  pub FanThrottleTolerance: BYTE,
  pub ForcedThrottle: BYTE,
  pub MinThrottle: BYTE,
  pub OverThrottled: POWER_ACTION_POLICY,
}
#[test]
fn bindgen_test_layout__SYSTEM_POWER_POLICY() {
  const UNINIT: ::std::mem::MaybeUninit<_SYSTEM_POWER_POLICY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SYSTEM_POWER_POLICY>(),
    232usize,
    concat!("Size of: ", stringify!(_SYSTEM_POWER_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<_SYSTEM_POWER_POLICY>(),
    4usize,
    concat!("Alignment of ", stringify!(_SYSTEM_POWER_POLICY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Revision) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(Revision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PowerButton) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(PowerButton)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SleepButton) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(SleepButton)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LidClose) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(LidClose)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LidOpenWake) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(LidOpenWake)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Idle) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(Idle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IdleTimeout) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(IdleTimeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IdleSensitivity) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(IdleSensitivity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DynamicThrottle) as usize - ptr as usize },
    65usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(DynamicThrottle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Spare2) as usize - ptr as usize },
    66usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(Spare2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinSleep) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(MinSleep)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxSleep) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(MaxSleep)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReducedLatencySleep) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(ReducedLatencySleep)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).WinLogonFlags) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(WinLogonFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Spare3) as usize - ptr as usize },
    84usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(Spare3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DozeS4Timeout) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(DozeS4Timeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BroadcastCapacityResolution) as usize - ptr as usize },
    92usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(BroadcastCapacityResolution)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DischargePolicy) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(DischargePolicy)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VideoTimeout) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(VideoTimeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VideoDimDisplay) as usize - ptr as usize },
    196usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(VideoDimDisplay)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VideoReserved) as usize - ptr as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(VideoReserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SpindownTimeout) as usize - ptr as usize },
    212usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(SpindownTimeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OptimizeForPower) as usize - ptr as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(OptimizeForPower)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FanThrottleTolerance) as usize - ptr as usize },
    217usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(FanThrottleTolerance)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ForcedThrottle) as usize - ptr as usize },
    218usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(ForcedThrottle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinThrottle) as usize - ptr as usize },
    219usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(MinThrottle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OverThrottled) as usize - ptr as usize },
    220usize,
    concat!(
      "Offset of field: ",
      stringify!(_SYSTEM_POWER_POLICY),
      "::",
      stringify!(OverThrottled)
    )
  );
}
pub type SYSTEM_POWER_POLICY = _SYSTEM_POWER_POLICY;
pub type PSYSTEM_POWER_POLICY = *mut _SYSTEM_POWER_POLICY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROCESSOR_IDLESTATE_INFO {
  pub TimeCheck: DWORD,
  pub DemotePercent: BYTE,
  pub PromotePercent: BYTE,
  pub Spare: [BYTE; 2usize],
}
#[test]
fn bindgen_test_layout_PROCESSOR_IDLESTATE_INFO() {
  const UNINIT: ::std::mem::MaybeUninit<PROCESSOR_IDLESTATE_INFO> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PROCESSOR_IDLESTATE_INFO>(),
    8usize,
    concat!("Size of: ", stringify!(PROCESSOR_IDLESTATE_INFO))
  );
  assert_eq!(
    ::std::mem::align_of::<PROCESSOR_IDLESTATE_INFO>(),
    4usize,
    concat!("Alignment of ", stringify!(PROCESSOR_IDLESTATE_INFO))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeCheck) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_IDLESTATE_INFO),
      "::",
      stringify!(TimeCheck)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DemotePercent) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_IDLESTATE_INFO),
      "::",
      stringify!(DemotePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PromotePercent) as usize - ptr as usize },
    5usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_IDLESTATE_INFO),
      "::",
      stringify!(PromotePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Spare) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_IDLESTATE_INFO),
      "::",
      stringify!(Spare)
    )
  );
}
pub type PPROCESSOR_IDLESTATE_INFO = *mut PROCESSOR_IDLESTATE_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PROCESSOR_IDLESTATE_POLICY {
  pub Revision: WORD,
  pub Flags: PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1,
  pub PolicyCount: DWORD,
  pub Policy: [PROCESSOR_IDLESTATE_INFO; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1 {
  pub AsWORD: WORD,
  pub __bindgen_anon_1: PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u16; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    2usize,
    concat!(
      "Size of: ",
      stringify!(PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn AllowScaling(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_AllowScaling(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Disabled(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_Disabled(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 14u8) as u16) }
  }
  #[inline]
  pub fn set_Reserved(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 14u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    AllowScaling: WORD,
    Disabled: WORD,
    Reserved: WORD,
  ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let AllowScaling: u16 = unsafe { ::std::mem::transmute(AllowScaling) };
      AllowScaling as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let Disabled: u16 = unsafe { ::std::mem::transmute(Disabled) };
      Disabled as u64
    });
    __bindgen_bitfield_unit.set(2usize, 14u8, {
      let Reserved: u16 = unsafe { ::std::mem::transmute(Reserved) };
      Reserved as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout_PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1>(),
    2usize,
    concat!(
      "Size of: ",
      stringify!(PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AsWORD) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1),
      "::",
      stringify!(AsWORD)
    )
  );
}
#[test]
fn bindgen_test_layout_PROCESSOR_IDLESTATE_POLICY() {
  const UNINIT: ::std::mem::MaybeUninit<PROCESSOR_IDLESTATE_POLICY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PROCESSOR_IDLESTATE_POLICY>(),
    32usize,
    concat!("Size of: ", stringify!(PROCESSOR_IDLESTATE_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<PROCESSOR_IDLESTATE_POLICY>(),
    4usize,
    concat!("Alignment of ", stringify!(PROCESSOR_IDLESTATE_POLICY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Revision) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_IDLESTATE_POLICY),
      "::",
      stringify!(Revision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_IDLESTATE_POLICY),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PolicyCount) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_IDLESTATE_POLICY),
      "::",
      stringify!(PolicyCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Policy) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_IDLESTATE_POLICY),
      "::",
      stringify!(Policy)
    )
  );
}
pub type PPROCESSOR_IDLESTATE_POLICY = *mut PROCESSOR_IDLESTATE_POLICY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESSOR_POWER_POLICY_INFO {
  pub TimeCheck: DWORD,
  pub DemoteLimit: DWORD,
  pub PromoteLimit: DWORD,
  pub DemotePercent: BYTE,
  pub PromotePercent: BYTE,
  pub Spare: [BYTE; 2usize],
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__PROCESSOR_POWER_POLICY_INFO() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESSOR_POWER_POLICY_INFO> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESSOR_POWER_POLICY_INFO>(),
    20usize,
    concat!("Size of: ", stringify!(_PROCESSOR_POWER_POLICY_INFO))
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESSOR_POWER_POLICY_INFO>(),
    4usize,
    concat!("Alignment of ", stringify!(_PROCESSOR_POWER_POLICY_INFO))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeCheck) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY_INFO),
      "::",
      stringify!(TimeCheck)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DemoteLimit) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY_INFO),
      "::",
      stringify!(DemoteLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PromoteLimit) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY_INFO),
      "::",
      stringify!(PromoteLimit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DemotePercent) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY_INFO),
      "::",
      stringify!(DemotePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PromotePercent) as usize - ptr as usize },
    13usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY_INFO),
      "::",
      stringify!(PromotePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Spare) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY_INFO),
      "::",
      stringify!(Spare)
    )
  );
}
impl _PROCESSOR_POWER_POLICY_INFO {
  #[inline]
  pub fn AllowDemotion(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AllowDemotion(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AllowPromotion(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AllowPromotion(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
  }
  #[inline]
  pub fn set_Reserved(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 30u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    AllowDemotion: DWORD,
    AllowPromotion: DWORD,
    Reserved: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let AllowDemotion: u32 = unsafe { ::std::mem::transmute(AllowDemotion) };
      AllowDemotion as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let AllowPromotion: u32 = unsafe { ::std::mem::transmute(AllowPromotion) };
      AllowPromotion as u64
    });
    __bindgen_bitfield_unit.set(2usize, 30u8, {
      let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
      Reserved as u64
    });
    __bindgen_bitfield_unit
  }
}
pub type PROCESSOR_POWER_POLICY_INFO = _PROCESSOR_POWER_POLICY_INFO;
pub type PPROCESSOR_POWER_POLICY_INFO = *mut _PROCESSOR_POWER_POLICY_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESSOR_POWER_POLICY {
  pub Revision: DWORD,
  pub DynamicThrottle: BYTE,
  pub Spare: [BYTE; 3usize],
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
  pub PolicyCount: DWORD,
  pub Policy: [PROCESSOR_POWER_POLICY_INFO; 3usize],
}
#[test]
fn bindgen_test_layout__PROCESSOR_POWER_POLICY() {
  const UNINIT: ::std::mem::MaybeUninit<_PROCESSOR_POWER_POLICY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PROCESSOR_POWER_POLICY>(),
    76usize,
    concat!("Size of: ", stringify!(_PROCESSOR_POWER_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<_PROCESSOR_POWER_POLICY>(),
    4usize,
    concat!("Alignment of ", stringify!(_PROCESSOR_POWER_POLICY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Revision) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY),
      "::",
      stringify!(Revision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DynamicThrottle) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY),
      "::",
      stringify!(DynamicThrottle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Spare) as usize - ptr as usize },
    5usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY),
      "::",
      stringify!(Spare)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PolicyCount) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY),
      "::",
      stringify!(PolicyCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Policy) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_PROCESSOR_POWER_POLICY),
      "::",
      stringify!(Policy)
    )
  );
}
impl _PROCESSOR_POWER_POLICY {
  #[inline]
  pub fn DisableCStates(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_DisableCStates(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_Reserved(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    DisableCStates: DWORD,
    Reserved: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let DisableCStates: u32 = unsafe { ::std::mem::transmute(DisableCStates) };
      DisableCStates as u64
    });
    __bindgen_bitfield_unit.set(1usize, 31u8, {
      let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
      Reserved as u64
    });
    __bindgen_bitfield_unit
  }
}
pub type PROCESSOR_POWER_POLICY = _PROCESSOR_POWER_POLICY;
pub type PPROCESSOR_POWER_POLICY = *mut _PROCESSOR_POWER_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PROCESSOR_PERFSTATE_POLICY {
  pub Revision: DWORD,
  pub MaxThrottle: BYTE,
  pub MinThrottle: BYTE,
  pub BusyAdjThreshold: BYTE,
  pub __bindgen_anon_1: PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1,
  pub TimeCheck: DWORD,
  pub IncreaseTime: DWORD,
  pub DecreaseTime: DWORD,
  pub IncreasePercent: DWORD,
  pub DecreasePercent: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1 {
  pub Spare: BYTE,
  pub Flags: PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1 {
  pub AsBYTE: BYTE,
  pub __bindgen_anon_1: PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
    1usize,
    concat!(
      "Size of: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn NoDomainAccounting(&self) -> BYTE {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
  }
  #[inline]
  pub fn set_NoDomainAccounting(&mut self, val: BYTE) {
    unsafe {
      let val: u8 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn IncreasePolicy(&self) -> BYTE {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
  }
  #[inline]
  pub fn set_IncreasePolicy(&mut self, val: BYTE) {
    unsafe {
      let val: u8 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn DecreasePolicy(&self) -> BYTE {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
  }
  #[inline]
  pub fn set_DecreasePolicy(&mut self, val: BYTE) {
    unsafe {
      let val: u8 = ::std::mem::transmute(val);
      self._bitfield_1.set(3usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved(&self) -> BYTE {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
  }
  #[inline]
  pub fn set_Reserved(&mut self, val: BYTE) {
    unsafe {
      let val: u8 = ::std::mem::transmute(val);
      self._bitfield_1.set(5usize, 3u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    NoDomainAccounting: BYTE,
    IncreasePolicy: BYTE,
    DecreasePolicy: BYTE,
    Reserved: BYTE,
  ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let NoDomainAccounting: u8 = unsafe { ::std::mem::transmute(NoDomainAccounting) };
      NoDomainAccounting as u64
    });
    __bindgen_bitfield_unit.set(1usize, 2u8, {
      let IncreasePolicy: u8 = unsafe { ::std::mem::transmute(IncreasePolicy) };
      IncreasePolicy as u64
    });
    __bindgen_bitfield_unit.set(3usize, 2u8, {
      let DecreasePolicy: u8 = unsafe { ::std::mem::transmute(DecreasePolicy) };
      DecreasePolicy as u64
    });
    __bindgen_bitfield_unit.set(5usize, 3u8, {
      let Reserved: u8 = unsafe { ::std::mem::transmute(Reserved) };
      Reserved as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout_PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    1usize,
    concat!(
      "Size of: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AsBYTE) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(AsBYTE)
    )
  );
}
#[test]
fn bindgen_test_layout_PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1>(),
    1usize,
    concat!(
      "Size of: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Spare) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1),
      "::",
      stringify!(Spare)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
}
#[test]
fn bindgen_test_layout_PROCESSOR_PERFSTATE_POLICY() {
  const UNINIT: ::std::mem::MaybeUninit<PROCESSOR_PERFSTATE_POLICY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PROCESSOR_PERFSTATE_POLICY>(),
    28usize,
    concat!("Size of: ", stringify!(PROCESSOR_PERFSTATE_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<PROCESSOR_PERFSTATE_POLICY>(),
    4usize,
    concat!("Alignment of ", stringify!(PROCESSOR_PERFSTATE_POLICY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Revision) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY),
      "::",
      stringify!(Revision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxThrottle) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY),
      "::",
      stringify!(MaxThrottle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinThrottle) as usize - ptr as usize },
    5usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY),
      "::",
      stringify!(MinThrottle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BusyAdjThreshold) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY),
      "::",
      stringify!(BusyAdjThreshold)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeCheck) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY),
      "::",
      stringify!(TimeCheck)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IncreaseTime) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY),
      "::",
      stringify!(IncreaseTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DecreaseTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY),
      "::",
      stringify!(DecreaseTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IncreasePercent) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY),
      "::",
      stringify!(IncreasePercent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DecreasePercent) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PROCESSOR_PERFSTATE_POLICY),
      "::",
      stringify!(DecreasePercent)
    )
  );
}
pub type PPROCESSOR_PERFSTATE_POLICY = *mut PROCESSOR_PERFSTATE_POLICY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ADMINISTRATOR_POWER_POLICY {
  pub MinSleep: SYSTEM_POWER_STATE,
  pub MaxSleep: SYSTEM_POWER_STATE,
  pub MinVideoTimeout: DWORD,
  pub MaxVideoTimeout: DWORD,
  pub MinSpindownTimeout: DWORD,
  pub MaxSpindownTimeout: DWORD,
}
#[test]
fn bindgen_test_layout__ADMINISTRATOR_POWER_POLICY() {
  const UNINIT: ::std::mem::MaybeUninit<_ADMINISTRATOR_POWER_POLICY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ADMINISTRATOR_POWER_POLICY>(),
    24usize,
    concat!("Size of: ", stringify!(_ADMINISTRATOR_POWER_POLICY))
  );
  assert_eq!(
    ::std::mem::align_of::<_ADMINISTRATOR_POWER_POLICY>(),
    4usize,
    concat!("Alignment of ", stringify!(_ADMINISTRATOR_POWER_POLICY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinSleep) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ADMINISTRATOR_POWER_POLICY),
      "::",
      stringify!(MinSleep)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxSleep) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ADMINISTRATOR_POWER_POLICY),
      "::",
      stringify!(MaxSleep)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinVideoTimeout) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ADMINISTRATOR_POWER_POLICY),
      "::",
      stringify!(MinVideoTimeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxVideoTimeout) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_ADMINISTRATOR_POWER_POLICY),
      "::",
      stringify!(MaxVideoTimeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinSpindownTimeout) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ADMINISTRATOR_POWER_POLICY),
      "::",
      stringify!(MinSpindownTimeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxSpindownTimeout) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_ADMINISTRATOR_POWER_POLICY),
      "::",
      stringify!(MaxSpindownTimeout)
    )
  );
}
pub type ADMINISTRATOR_POWER_POLICY = _ADMINISTRATOR_POWER_POLICY;
pub type PADMINISTRATOR_POWER_POLICY = *mut _ADMINISTRATOR_POWER_POLICY;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket1GB: _HIBERFILE_BUCKET_SIZE = 0;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket2GB: _HIBERFILE_BUCKET_SIZE = 1;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket4GB: _HIBERFILE_BUCKET_SIZE = 2;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket8GB: _HIBERFILE_BUCKET_SIZE = 3;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket16GB: _HIBERFILE_BUCKET_SIZE = 4;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket32GB: _HIBERFILE_BUCKET_SIZE = 5;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucketUnlimited: _HIBERFILE_BUCKET_SIZE = 6;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucketMax: _HIBERFILE_BUCKET_SIZE = 7;
pub type _HIBERFILE_BUCKET_SIZE = ::std::os::raw::c_int;
pub use self::_HIBERFILE_BUCKET_SIZE as HIBERFILE_BUCKET_SIZE;
pub type PHIBERFILE_BUCKET_SIZE = *mut _HIBERFILE_BUCKET_SIZE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HIBERFILE_BUCKET {
  pub MaxPhysicalMemory: DWORD64,
  pub PhysicalMemoryPercent: [DWORD; 3usize],
}
#[test]
fn bindgen_test_layout__HIBERFILE_BUCKET() {
  const UNINIT: ::std::mem::MaybeUninit<_HIBERFILE_BUCKET> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_HIBERFILE_BUCKET>(),
    24usize,
    concat!("Size of: ", stringify!(_HIBERFILE_BUCKET))
  );
  assert_eq!(
    ::std::mem::align_of::<_HIBERFILE_BUCKET>(),
    8usize,
    concat!("Alignment of ", stringify!(_HIBERFILE_BUCKET))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxPhysicalMemory) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_HIBERFILE_BUCKET),
      "::",
      stringify!(MaxPhysicalMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PhysicalMemoryPercent) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_HIBERFILE_BUCKET),
      "::",
      stringify!(PhysicalMemoryPercent)
    )
  );
}
pub type HIBERFILE_BUCKET = _HIBERFILE_BUCKET;
pub type PHIBERFILE_BUCKET = *mut _HIBERFILE_BUCKET;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSTEM_POWER_CAPABILITIES {
  pub PowerButtonPresent: BOOLEAN,
  pub SleepButtonPresent: BOOLEAN,
  pub LidPresent: BOOLEAN,
  pub SystemS1: BOOLEAN,
  pub SystemS2: BOOLEAN,
  pub SystemS3: BOOLEAN,
  pub SystemS4: BOOLEAN,
  pub SystemS5: BOOLEAN,
  pub HiberFilePresent: BOOLEAN,
  pub FullWake: BOOLEAN,
  pub VideoDimPresent: BOOLEAN,
  pub ApmPresent: BOOLEAN,
  pub UpsPresent: BOOLEAN,
  pub ThermalControl: BOOLEAN,
  pub ProcessorThrottle: BOOLEAN,
  pub ProcessorMinThrottle: BYTE,
  pub ProcessorMaxThrottle: BYTE,
  pub FastSystemS4: BOOLEAN,
  pub Hiberboot: BOOLEAN,
  pub WakeAlarmPresent: BOOLEAN,
  pub AoAc: BOOLEAN,
  pub DiskSpinDown: BOOLEAN,
  pub HiberFileType: BYTE,
  pub AoAcConnectivitySupported: BOOLEAN,
  pub spare3: [BYTE; 6usize],
  pub SystemBatteriesPresent: BOOLEAN,
  pub BatteriesAreShortTerm: BOOLEAN,
  pub BatteryScale: [BATTERY_REPORTING_SCALE; 3usize],
  pub AcOnLineWake: SYSTEM_POWER_STATE,
  pub SoftLidWake: SYSTEM_POWER_STATE,
  pub RtcWake: SYSTEM_POWER_STATE,
  pub MinDeviceWakeState: SYSTEM_POWER_STATE,
  pub DefaultLowLatencyWake: SYSTEM_POWER_STATE,
}
#[test]
fn bindgen_test_layout_SYSTEM_POWER_CAPABILITIES() {
  const UNINIT: ::std::mem::MaybeUninit<SYSTEM_POWER_CAPABILITIES> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<SYSTEM_POWER_CAPABILITIES>(),
    76usize,
    concat!("Size of: ", stringify!(SYSTEM_POWER_CAPABILITIES))
  );
  assert_eq!(
    ::std::mem::align_of::<SYSTEM_POWER_CAPABILITIES>(),
    4usize,
    concat!("Alignment of ", stringify!(SYSTEM_POWER_CAPABILITIES))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PowerButtonPresent) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(PowerButtonPresent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SleepButtonPresent) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(SleepButtonPresent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LidPresent) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(LidPresent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SystemS1) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(SystemS1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SystemS2) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(SystemS2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SystemS3) as usize - ptr as usize },
    5usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(SystemS3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SystemS4) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(SystemS4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SystemS5) as usize - ptr as usize },
    7usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(SystemS5)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HiberFilePresent) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(HiberFilePresent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FullWake) as usize - ptr as usize },
    9usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(FullWake)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VideoDimPresent) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(VideoDimPresent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ApmPresent) as usize - ptr as usize },
    11usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(ApmPresent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UpsPresent) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(UpsPresent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ThermalControl) as usize - ptr as usize },
    13usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(ThermalControl)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessorThrottle) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(ProcessorThrottle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessorMinThrottle) as usize - ptr as usize },
    15usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(ProcessorMinThrottle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessorMaxThrottle) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(ProcessorMaxThrottle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FastSystemS4) as usize - ptr as usize },
    17usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(FastSystemS4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Hiberboot) as usize - ptr as usize },
    18usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(Hiberboot)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).WakeAlarmPresent) as usize - ptr as usize },
    19usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(WakeAlarmPresent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AoAc) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(AoAc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DiskSpinDown) as usize - ptr as usize },
    21usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(DiskSpinDown)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HiberFileType) as usize - ptr as usize },
    22usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(HiberFileType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AoAcConnectivitySupported) as usize - ptr as usize },
    23usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(AoAcConnectivitySupported)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).spare3) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(spare3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SystemBatteriesPresent) as usize - ptr as usize },
    30usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(SystemBatteriesPresent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BatteriesAreShortTerm) as usize - ptr as usize },
    31usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(BatteriesAreShortTerm)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BatteryScale) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(BatteryScale)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AcOnLineWake) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(AcOnLineWake)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SoftLidWake) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(SoftLidWake)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RtcWake) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(RtcWake)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinDeviceWakeState) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(MinDeviceWakeState)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DefaultLowLatencyWake) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_POWER_CAPABILITIES),
      "::",
      stringify!(DefaultLowLatencyWake)
    )
  );
}
pub type PSYSTEM_POWER_CAPABILITIES = *mut SYSTEM_POWER_CAPABILITIES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSTEM_BATTERY_STATE {
  pub AcOnLine: BOOLEAN,
  pub BatteryPresent: BOOLEAN,
  pub Charging: BOOLEAN,
  pub Discharging: BOOLEAN,
  pub Spare1: [BOOLEAN; 3usize],
  pub Tag: BYTE,
  pub MaxCapacity: DWORD,
  pub RemainingCapacity: DWORD,
  pub Rate: DWORD,
  pub EstimatedTime: DWORD,
  pub DefaultAlert1: DWORD,
  pub DefaultAlert2: DWORD,
}
#[test]
fn bindgen_test_layout_SYSTEM_BATTERY_STATE() {
  const UNINIT: ::std::mem::MaybeUninit<SYSTEM_BATTERY_STATE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<SYSTEM_BATTERY_STATE>(),
    32usize,
    concat!("Size of: ", stringify!(SYSTEM_BATTERY_STATE))
  );
  assert_eq!(
    ::std::mem::align_of::<SYSTEM_BATTERY_STATE>(),
    4usize,
    concat!("Alignment of ", stringify!(SYSTEM_BATTERY_STATE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AcOnLine) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(AcOnLine)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BatteryPresent) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(BatteryPresent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Charging) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(Charging)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Discharging) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(Discharging)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Spare1) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(Spare1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Tag) as usize - ptr as usize },
    7usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(Tag)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxCapacity) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(MaxCapacity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RemainingCapacity) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(RemainingCapacity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Rate) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(Rate)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EstimatedTime) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(EstimatedTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DefaultAlert1) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(DefaultAlert1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DefaultAlert2) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(SYSTEM_BATTERY_STATE),
      "::",
      stringify!(DefaultAlert2)
    )
  );
}
pub type PSYSTEM_BATTERY_STATE = *mut SYSTEM_BATTERY_STATE;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DOS_HEADER {
  pub e_magic: WORD,
  pub e_cblp: WORD,
  pub e_cp: WORD,
  pub e_crlc: WORD,
  pub e_cparhdr: WORD,
  pub e_minalloc: WORD,
  pub e_maxalloc: WORD,
  pub e_ss: WORD,
  pub e_sp: WORD,
  pub e_csum: WORD,
  pub e_ip: WORD,
  pub e_cs: WORD,
  pub e_lfarlc: WORD,
  pub e_ovno: WORD,
  pub e_res: [WORD; 4usize],
  pub e_oemid: WORD,
  pub e_oeminfo: WORD,
  pub e_res2: [WORD; 10usize],
  pub e_lfanew: LONG,
}
#[test]
fn bindgen_test_layout__IMAGE_DOS_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DOS_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DOS_HEADER>(),
    64usize,
    concat!("Size of: ", stringify!(_IMAGE_DOS_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DOS_HEADER>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_DOS_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_magic) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_magic)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_cblp) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_cblp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_cp) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_cp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_crlc) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_crlc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_cparhdr) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_cparhdr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_minalloc) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_minalloc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_maxalloc) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_maxalloc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_ss) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_ss)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_sp) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_sp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_csum) as usize - ptr as usize },
    18usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_csum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_ip) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_ip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_cs) as usize - ptr as usize },
    22usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_cs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_lfarlc) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_lfarlc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_ovno) as usize - ptr as usize },
    26usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_ovno)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_res) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_res)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_oemid) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_oemid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_oeminfo) as usize - ptr as usize },
    38usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_oeminfo)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_res2) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_res2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e_lfanew) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DOS_HEADER),
      "::",
      stringify!(e_lfanew)
    )
  );
}
pub type IMAGE_DOS_HEADER = _IMAGE_DOS_HEADER;
pub type PIMAGE_DOS_HEADER = *mut _IMAGE_DOS_HEADER;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_OS2_HEADER {
  pub ne_magic: WORD,
  pub ne_ver: CHAR,
  pub ne_rev: CHAR,
  pub ne_enttab: WORD,
  pub ne_cbenttab: WORD,
  pub ne_crc: LONG,
  pub ne_flags: WORD,
  pub ne_autodata: WORD,
  pub ne_heap: WORD,
  pub ne_stack: WORD,
  pub ne_csip: LONG,
  pub ne_sssp: LONG,
  pub ne_cseg: WORD,
  pub ne_cmod: WORD,
  pub ne_cbnrestab: WORD,
  pub ne_segtab: WORD,
  pub ne_rsrctab: WORD,
  pub ne_restab: WORD,
  pub ne_modtab: WORD,
  pub ne_imptab: WORD,
  pub ne_nrestab: LONG,
  pub ne_cmovent: WORD,
  pub ne_align: WORD,
  pub ne_cres: WORD,
  pub ne_exetyp: BYTE,
  pub ne_flagsothers: BYTE,
  pub ne_pretthunks: WORD,
  pub ne_psegrefbytes: WORD,
  pub ne_swaparea: WORD,
  pub ne_expver: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_OS2_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_OS2_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_OS2_HEADER>(),
    64usize,
    concat!("Size of: ", stringify!(_IMAGE_OS2_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_OS2_HEADER>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_OS2_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_magic) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_magic)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_ver) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_ver)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_rev) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_rev)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_enttab) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_enttab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_cbenttab) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_cbenttab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_crc) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_crc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_flags) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_autodata) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_autodata)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_heap) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_heap)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_stack) as usize - ptr as usize },
    18usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_stack)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_csip) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_csip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_sssp) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_sssp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_cseg) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_cseg)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_cmod) as usize - ptr as usize },
    30usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_cmod)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_cbnrestab) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_cbnrestab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_segtab) as usize - ptr as usize },
    34usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_segtab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_rsrctab) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_rsrctab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_restab) as usize - ptr as usize },
    38usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_restab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_modtab) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_modtab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_imptab) as usize - ptr as usize },
    42usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_imptab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_nrestab) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_nrestab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_cmovent) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_cmovent)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_align) as usize - ptr as usize },
    50usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_align)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_cres) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_cres)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_exetyp) as usize - ptr as usize },
    54usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_exetyp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_flagsothers) as usize - ptr as usize },
    55usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_flagsothers)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_pretthunks) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_pretthunks)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_psegrefbytes) as usize - ptr as usize },
    58usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_psegrefbytes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_swaparea) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_swaparea)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ne_expver) as usize - ptr as usize },
    62usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OS2_HEADER),
      "::",
      stringify!(ne_expver)
    )
  );
}
pub type IMAGE_OS2_HEADER = _IMAGE_OS2_HEADER;
pub type PIMAGE_OS2_HEADER = *mut _IMAGE_OS2_HEADER;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_VXD_HEADER {
  pub e32_magic: WORD,
  pub e32_border: BYTE,
  pub e32_worder: BYTE,
  pub e32_level: DWORD,
  pub e32_cpu: WORD,
  pub e32_os: WORD,
  pub e32_ver: DWORD,
  pub e32_mflags: DWORD,
  pub e32_mpages: DWORD,
  pub e32_startobj: DWORD,
  pub e32_eip: DWORD,
  pub e32_stackobj: DWORD,
  pub e32_esp: DWORD,
  pub e32_pagesize: DWORD,
  pub e32_lastpagesize: DWORD,
  pub e32_fixupsize: DWORD,
  pub e32_fixupsum: DWORD,
  pub e32_ldrsize: DWORD,
  pub e32_ldrsum: DWORD,
  pub e32_objtab: DWORD,
  pub e32_objcnt: DWORD,
  pub e32_objmap: DWORD,
  pub e32_itermap: DWORD,
  pub e32_rsrctab: DWORD,
  pub e32_rsrccnt: DWORD,
  pub e32_restab: DWORD,
  pub e32_enttab: DWORD,
  pub e32_dirtab: DWORD,
  pub e32_dircnt: DWORD,
  pub e32_fpagetab: DWORD,
  pub e32_frectab: DWORD,
  pub e32_impmod: DWORD,
  pub e32_impmodcnt: DWORD,
  pub e32_impproc: DWORD,
  pub e32_pagesum: DWORD,
  pub e32_datapage: DWORD,
  pub e32_preload: DWORD,
  pub e32_nrestab: DWORD,
  pub e32_cbnrestab: DWORD,
  pub e32_nressum: DWORD,
  pub e32_autodata: DWORD,
  pub e32_debuginfo: DWORD,
  pub e32_debuglen: DWORD,
  pub e32_instpreload: DWORD,
  pub e32_instdemand: DWORD,
  pub e32_heapsize: DWORD,
  pub e32_res3: [BYTE; 12usize],
  pub e32_winresoff: DWORD,
  pub e32_winreslen: DWORD,
  pub e32_devid: WORD,
  pub e32_ddkver: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_VXD_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_VXD_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_VXD_HEADER>(),
    196usize,
    concat!("Size of: ", stringify!(_IMAGE_VXD_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_VXD_HEADER>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_VXD_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_magic) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_magic)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_border) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_border)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_worder) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_worder)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_level) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_level)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_cpu) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_cpu)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_os) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_os)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_ver) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_ver)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_mflags) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_mflags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_mpages) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_mpages)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_startobj) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_startobj)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_eip) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_eip)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_stackobj) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_stackobj)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_esp) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_esp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_pagesize) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_pagesize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_lastpagesize) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_lastpagesize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_fixupsize) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_fixupsize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_fixupsum) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_fixupsum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_ldrsize) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_ldrsize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_ldrsum) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_ldrsum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_objtab) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_objtab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_objcnt) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_objcnt)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_objmap) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_objmap)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_itermap) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_itermap)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_rsrctab) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_rsrctab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_rsrccnt) as usize - ptr as usize },
    84usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_rsrccnt)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_restab) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_restab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_enttab) as usize - ptr as usize },
    92usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_enttab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_dirtab) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_dirtab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_dircnt) as usize - ptr as usize },
    100usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_dircnt)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_fpagetab) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_fpagetab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_frectab) as usize - ptr as usize },
    108usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_frectab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_impmod) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_impmod)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_impmodcnt) as usize - ptr as usize },
    116usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_impmodcnt)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_impproc) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_impproc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_pagesum) as usize - ptr as usize },
    124usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_pagesum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_datapage) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_datapage)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_preload) as usize - ptr as usize },
    132usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_preload)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_nrestab) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_nrestab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_cbnrestab) as usize - ptr as usize },
    140usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_cbnrestab)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_nressum) as usize - ptr as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_nressum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_autodata) as usize - ptr as usize },
    148usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_autodata)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_debuginfo) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_debuginfo)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_debuglen) as usize - ptr as usize },
    156usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_debuglen)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_instpreload) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_instpreload)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_instdemand) as usize - ptr as usize },
    164usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_instdemand)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_heapsize) as usize - ptr as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_heapsize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_res3) as usize - ptr as usize },
    172usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_res3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_winresoff) as usize - ptr as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_winresoff)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_winreslen) as usize - ptr as usize },
    188usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_winreslen)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_devid) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_devid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).e32_ddkver) as usize - ptr as usize },
    194usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_VXD_HEADER),
      "::",
      stringify!(e32_ddkver)
    )
  );
}
pub type IMAGE_VXD_HEADER = _IMAGE_VXD_HEADER;
pub type PIMAGE_VXD_HEADER = *mut _IMAGE_VXD_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_FILE_HEADER {
  pub Machine: WORD,
  pub NumberOfSections: WORD,
  pub TimeDateStamp: DWORD,
  pub PointerToSymbolTable: DWORD,
  pub NumberOfSymbols: DWORD,
  pub SizeOfOptionalHeader: WORD,
  pub Characteristics: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_FILE_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_FILE_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_FILE_HEADER>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_FILE_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_FILE_HEADER>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_FILE_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Machine) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FILE_HEADER),
      "::",
      stringify!(Machine)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfSections) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FILE_HEADER),
      "::",
      stringify!(NumberOfSections)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FILE_HEADER),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PointerToSymbolTable) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FILE_HEADER),
      "::",
      stringify!(PointerToSymbolTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfSymbols) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FILE_HEADER),
      "::",
      stringify!(NumberOfSymbols)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfOptionalHeader) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FILE_HEADER),
      "::",
      stringify!(SizeOfOptionalHeader)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
    18usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FILE_HEADER),
      "::",
      stringify!(Characteristics)
    )
  );
}
pub type IMAGE_FILE_HEADER = _IMAGE_FILE_HEADER;
pub type PIMAGE_FILE_HEADER = *mut _IMAGE_FILE_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DATA_DIRECTORY {
  pub VirtualAddress: DWORD,
  pub Size: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_DATA_DIRECTORY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DATA_DIRECTORY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DATA_DIRECTORY>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_DATA_DIRECTORY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DATA_DIRECTORY>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_DATA_DIRECTORY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VirtualAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DATA_DIRECTORY),
      "::",
      stringify!(VirtualAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DATA_DIRECTORY),
      "::",
      stringify!(Size)
    )
  );
}
pub type IMAGE_DATA_DIRECTORY = _IMAGE_DATA_DIRECTORY;
pub type PIMAGE_DATA_DIRECTORY = *mut _IMAGE_DATA_DIRECTORY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_OPTIONAL_HEADER {
  pub Magic: WORD,
  pub MajorLinkerVersion: BYTE,
  pub MinorLinkerVersion: BYTE,
  pub SizeOfCode: DWORD,
  pub SizeOfInitializedData: DWORD,
  pub SizeOfUninitializedData: DWORD,
  pub AddressOfEntryPoint: DWORD,
  pub BaseOfCode: DWORD,
  pub BaseOfData: DWORD,
  pub ImageBase: DWORD,
  pub SectionAlignment: DWORD,
  pub FileAlignment: DWORD,
  pub MajorOperatingSystemVersion: WORD,
  pub MinorOperatingSystemVersion: WORD,
  pub MajorImageVersion: WORD,
  pub MinorImageVersion: WORD,
  pub MajorSubsystemVersion: WORD,
  pub MinorSubsystemVersion: WORD,
  pub Win32VersionValue: DWORD,
  pub SizeOfImage: DWORD,
  pub SizeOfHeaders: DWORD,
  pub CheckSum: DWORD,
  pub Subsystem: WORD,
  pub DllCharacteristics: WORD,
  pub SizeOfStackReserve: DWORD,
  pub SizeOfStackCommit: DWORD,
  pub SizeOfHeapReserve: DWORD,
  pub SizeOfHeapCommit: DWORD,
  pub LoaderFlags: DWORD,
  pub NumberOfRvaAndSizes: DWORD,
  pub DataDirectory: [IMAGE_DATA_DIRECTORY; 16usize],
}
#[test]
fn bindgen_test_layout__IMAGE_OPTIONAL_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_OPTIONAL_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_OPTIONAL_HEADER>(),
    224usize,
    concat!("Size of: ", stringify!(_IMAGE_OPTIONAL_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_OPTIONAL_HEADER>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_OPTIONAL_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Magic) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(Magic)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorLinkerVersion) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(MajorLinkerVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorLinkerVersion) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(MinorLinkerVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfCode) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfInitializedData) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfInitializedData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfUninitializedData) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfUninitializedData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfEntryPoint) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(AddressOfEntryPoint)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseOfCode) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(BaseOfCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseOfData) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(BaseOfData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageBase) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(ImageBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SectionAlignment) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(SectionAlignment)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileAlignment) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(FileAlignment)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorOperatingSystemVersion) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(MajorOperatingSystemVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorOperatingSystemVersion) as usize - ptr as usize },
    42usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(MinorOperatingSystemVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorImageVersion) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(MajorImageVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorImageVersion) as usize - ptr as usize },
    46usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(MinorImageVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorSubsystemVersion) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(MajorSubsystemVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorSubsystemVersion) as usize - ptr as usize },
    50usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(MinorSubsystemVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Win32VersionValue) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(Win32VersionValue)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfImage) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfImage)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeaders) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfHeaders)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CheckSum) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(CheckSum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Subsystem) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(Subsystem)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DllCharacteristics) as usize - ptr as usize },
    70usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(DllCharacteristics)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfStackReserve) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfStackReserve)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfStackCommit) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfStackCommit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeapReserve) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfHeapReserve)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeapCommit) as usize - ptr as usize },
    84usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfHeapCommit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LoaderFlags) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(LoaderFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfRvaAndSizes) as usize - ptr as usize },
    92usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(NumberOfRvaAndSizes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataDirectory) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER),
      "::",
      stringify!(DataDirectory)
    )
  );
}
pub type IMAGE_OPTIONAL_HEADER32 = _IMAGE_OPTIONAL_HEADER;
pub type PIMAGE_OPTIONAL_HEADER32 = *mut _IMAGE_OPTIONAL_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ROM_OPTIONAL_HEADER {
  pub Magic: WORD,
  pub MajorLinkerVersion: BYTE,
  pub MinorLinkerVersion: BYTE,
  pub SizeOfCode: DWORD,
  pub SizeOfInitializedData: DWORD,
  pub SizeOfUninitializedData: DWORD,
  pub AddressOfEntryPoint: DWORD,
  pub BaseOfCode: DWORD,
  pub BaseOfData: DWORD,
  pub BaseOfBss: DWORD,
  pub GprMask: DWORD,
  pub CprMask: [DWORD; 4usize],
  pub GpValue: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_ROM_OPTIONAL_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ROM_OPTIONAL_HEADER> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ROM_OPTIONAL_HEADER>(),
    56usize,
    concat!("Size of: ", stringify!(_IMAGE_ROM_OPTIONAL_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ROM_OPTIONAL_HEADER>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_ROM_OPTIONAL_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Magic) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(Magic)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorLinkerVersion) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(MajorLinkerVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorLinkerVersion) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(MinorLinkerVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfCode) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfInitializedData) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfInitializedData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfUninitializedData) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(SizeOfUninitializedData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfEntryPoint) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(AddressOfEntryPoint)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseOfCode) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(BaseOfCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseOfData) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(BaseOfData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseOfBss) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(BaseOfBss)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GprMask) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(GprMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CprMask) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(CprMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GpValue) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_OPTIONAL_HEADER),
      "::",
      stringify!(GpValue)
    )
  );
}
pub type IMAGE_ROM_OPTIONAL_HEADER = _IMAGE_ROM_OPTIONAL_HEADER;
pub type PIMAGE_ROM_OPTIONAL_HEADER = *mut _IMAGE_ROM_OPTIONAL_HEADER;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_OPTIONAL_HEADER64 {
  pub Magic: WORD,
  pub MajorLinkerVersion: BYTE,
  pub MinorLinkerVersion: BYTE,
  pub SizeOfCode: DWORD,
  pub SizeOfInitializedData: DWORD,
  pub SizeOfUninitializedData: DWORD,
  pub AddressOfEntryPoint: DWORD,
  pub BaseOfCode: DWORD,
  pub ImageBase: ULONGLONG,
  pub SectionAlignment: DWORD,
  pub FileAlignment: DWORD,
  pub MajorOperatingSystemVersion: WORD,
  pub MinorOperatingSystemVersion: WORD,
  pub MajorImageVersion: WORD,
  pub MinorImageVersion: WORD,
  pub MajorSubsystemVersion: WORD,
  pub MinorSubsystemVersion: WORD,
  pub Win32VersionValue: DWORD,
  pub SizeOfImage: DWORD,
  pub SizeOfHeaders: DWORD,
  pub CheckSum: DWORD,
  pub Subsystem: WORD,
  pub DllCharacteristics: WORD,
  pub SizeOfStackReserve: ULONGLONG,
  pub SizeOfStackCommit: ULONGLONG,
  pub SizeOfHeapReserve: ULONGLONG,
  pub SizeOfHeapCommit: ULONGLONG,
  pub LoaderFlags: DWORD,
  pub NumberOfRvaAndSizes: DWORD,
  pub DataDirectory: [IMAGE_DATA_DIRECTORY; 16usize],
}
#[test]
fn bindgen_test_layout__IMAGE_OPTIONAL_HEADER64() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_OPTIONAL_HEADER64> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_OPTIONAL_HEADER64>(),
    240usize,
    concat!("Size of: ", stringify!(_IMAGE_OPTIONAL_HEADER64))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_OPTIONAL_HEADER64>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_OPTIONAL_HEADER64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Magic) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(Magic)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorLinkerVersion) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(MajorLinkerVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorLinkerVersion) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(MinorLinkerVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfCode) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(SizeOfCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfInitializedData) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(SizeOfInitializedData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfUninitializedData) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(SizeOfUninitializedData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfEntryPoint) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(AddressOfEntryPoint)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseOfCode) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(BaseOfCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageBase) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(ImageBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SectionAlignment) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(SectionAlignment)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileAlignment) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(FileAlignment)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorOperatingSystemVersion) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(MajorOperatingSystemVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorOperatingSystemVersion) as usize - ptr as usize },
    42usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(MinorOperatingSystemVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorImageVersion) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(MajorImageVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorImageVersion) as usize - ptr as usize },
    46usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(MinorImageVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorSubsystemVersion) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(MajorSubsystemVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorSubsystemVersion) as usize - ptr as usize },
    50usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(MinorSubsystemVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Win32VersionValue) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(Win32VersionValue)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfImage) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(SizeOfImage)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeaders) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(SizeOfHeaders)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CheckSum) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(CheckSum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Subsystem) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(Subsystem)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DllCharacteristics) as usize - ptr as usize },
    70usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(DllCharacteristics)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfStackReserve) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(SizeOfStackReserve)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfStackCommit) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(SizeOfStackCommit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeapReserve) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(SizeOfHeapReserve)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeapCommit) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(SizeOfHeapCommit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LoaderFlags) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(LoaderFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfRvaAndSizes) as usize - ptr as usize },
    108usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(NumberOfRvaAndSizes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataDirectory) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_OPTIONAL_HEADER64),
      "::",
      stringify!(DataDirectory)
    )
  );
}
pub type IMAGE_OPTIONAL_HEADER64 = _IMAGE_OPTIONAL_HEADER64;
pub type PIMAGE_OPTIONAL_HEADER64 = *mut _IMAGE_OPTIONAL_HEADER64;
pub type IMAGE_OPTIONAL_HEADER = IMAGE_OPTIONAL_HEADER64;
pub type PIMAGE_OPTIONAL_HEADER = PIMAGE_OPTIONAL_HEADER64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_NT_HEADERS64 {
  pub Signature: DWORD,
  pub FileHeader: IMAGE_FILE_HEADER,
  pub OptionalHeader: IMAGE_OPTIONAL_HEADER64,
}
#[test]
fn bindgen_test_layout__IMAGE_NT_HEADERS64() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_NT_HEADERS64> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_NT_HEADERS64>(),
    264usize,
    concat!("Size of: ", stringify!(_IMAGE_NT_HEADERS64))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_NT_HEADERS64>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_NT_HEADERS64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Signature) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_NT_HEADERS64),
      "::",
      stringify!(Signature)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileHeader) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_NT_HEADERS64),
      "::",
      stringify!(FileHeader)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OptionalHeader) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_NT_HEADERS64),
      "::",
      stringify!(OptionalHeader)
    )
  );
}
pub type IMAGE_NT_HEADERS64 = _IMAGE_NT_HEADERS64;
pub type PIMAGE_NT_HEADERS64 = *mut _IMAGE_NT_HEADERS64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_NT_HEADERS {
  pub Signature: DWORD,
  pub FileHeader: IMAGE_FILE_HEADER,
  pub OptionalHeader: IMAGE_OPTIONAL_HEADER32,
}
#[test]
fn bindgen_test_layout__IMAGE_NT_HEADERS() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_NT_HEADERS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_NT_HEADERS>(),
    248usize,
    concat!("Size of: ", stringify!(_IMAGE_NT_HEADERS))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_NT_HEADERS>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_NT_HEADERS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Signature) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_NT_HEADERS),
      "::",
      stringify!(Signature)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileHeader) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_NT_HEADERS),
      "::",
      stringify!(FileHeader)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OptionalHeader) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_NT_HEADERS),
      "::",
      stringify!(OptionalHeader)
    )
  );
}
pub type IMAGE_NT_HEADERS32 = _IMAGE_NT_HEADERS;
pub type PIMAGE_NT_HEADERS32 = *mut _IMAGE_NT_HEADERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ROM_HEADERS {
  pub FileHeader: IMAGE_FILE_HEADER,
  pub OptionalHeader: IMAGE_ROM_OPTIONAL_HEADER,
}
#[test]
fn bindgen_test_layout__IMAGE_ROM_HEADERS() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ROM_HEADERS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ROM_HEADERS>(),
    76usize,
    concat!("Size of: ", stringify!(_IMAGE_ROM_HEADERS))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ROM_HEADERS>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_ROM_HEADERS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileHeader) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_HEADERS),
      "::",
      stringify!(FileHeader)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OptionalHeader) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ROM_HEADERS),
      "::",
      stringify!(OptionalHeader)
    )
  );
}
pub type IMAGE_ROM_HEADERS = _IMAGE_ROM_HEADERS;
pub type PIMAGE_ROM_HEADERS = *mut _IMAGE_ROM_HEADERS;
pub type IMAGE_NT_HEADERS = IMAGE_NT_HEADERS64;
pub type PIMAGE_NT_HEADERS = PIMAGE_NT_HEADERS64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ANON_OBJECT_HEADER {
  pub Sig1: WORD,
  pub Sig2: WORD,
  pub Version: WORD,
  pub Machine: WORD,
  pub TimeDateStamp: DWORD,
  pub ClassID: CLSID,
  pub SizeOfData: DWORD,
}
#[test]
fn bindgen_test_layout_ANON_OBJECT_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<ANON_OBJECT_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<ANON_OBJECT_HEADER>(),
    32usize,
    concat!("Size of: ", stringify!(ANON_OBJECT_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<ANON_OBJECT_HEADER>(),
    4usize,
    concat!("Alignment of ", stringify!(ANON_OBJECT_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sig1) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER),
      "::",
      stringify!(Sig1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sig2) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER),
      "::",
      stringify!(Sig2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Machine) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER),
      "::",
      stringify!(Machine)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ClassID) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER),
      "::",
      stringify!(ClassID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfData) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER),
      "::",
      stringify!(SizeOfData)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ANON_OBJECT_HEADER_V2 {
  pub Sig1: WORD,
  pub Sig2: WORD,
  pub Version: WORD,
  pub Machine: WORD,
  pub TimeDateStamp: DWORD,
  pub ClassID: CLSID,
  pub SizeOfData: DWORD,
  pub Flags: DWORD,
  pub MetaDataSize: DWORD,
  pub MetaDataOffset: DWORD,
}
#[test]
fn bindgen_test_layout_ANON_OBJECT_HEADER_V2() {
  const UNINIT: ::std::mem::MaybeUninit<ANON_OBJECT_HEADER_V2> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<ANON_OBJECT_HEADER_V2>(),
    44usize,
    concat!("Size of: ", stringify!(ANON_OBJECT_HEADER_V2))
  );
  assert_eq!(
    ::std::mem::align_of::<ANON_OBJECT_HEADER_V2>(),
    4usize,
    concat!("Alignment of ", stringify!(ANON_OBJECT_HEADER_V2))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sig1) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_V2),
      "::",
      stringify!(Sig1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sig2) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_V2),
      "::",
      stringify!(Sig2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_V2),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Machine) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_V2),
      "::",
      stringify!(Machine)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_V2),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ClassID) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_V2),
      "::",
      stringify!(ClassID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfData) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_V2),
      "::",
      stringify!(SizeOfData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_V2),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MetaDataSize) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_V2),
      "::",
      stringify!(MetaDataSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MetaDataOffset) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_V2),
      "::",
      stringify!(MetaDataOffset)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ANON_OBJECT_HEADER_BIGOBJ {
  pub Sig1: WORD,
  pub Sig2: WORD,
  pub Version: WORD,
  pub Machine: WORD,
  pub TimeDateStamp: DWORD,
  pub ClassID: CLSID,
  pub SizeOfData: DWORD,
  pub Flags: DWORD,
  pub MetaDataSize: DWORD,
  pub MetaDataOffset: DWORD,
  pub NumberOfSections: DWORD,
  pub PointerToSymbolTable: DWORD,
  pub NumberOfSymbols: DWORD,
}
#[test]
fn bindgen_test_layout_ANON_OBJECT_HEADER_BIGOBJ() {
  const UNINIT: ::std::mem::MaybeUninit<ANON_OBJECT_HEADER_BIGOBJ> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<ANON_OBJECT_HEADER_BIGOBJ>(),
    56usize,
    concat!("Size of: ", stringify!(ANON_OBJECT_HEADER_BIGOBJ))
  );
  assert_eq!(
    ::std::mem::align_of::<ANON_OBJECT_HEADER_BIGOBJ>(),
    4usize,
    concat!("Alignment of ", stringify!(ANON_OBJECT_HEADER_BIGOBJ))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sig1) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(Sig1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sig2) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(Sig2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Machine) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(Machine)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ClassID) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(ClassID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfData) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(SizeOfData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MetaDataSize) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(MetaDataSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MetaDataOffset) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(MetaDataOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfSections) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(NumberOfSections)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PointerToSymbolTable) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(PointerToSymbolTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfSymbols) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(ANON_OBJECT_HEADER_BIGOBJ),
      "::",
      stringify!(NumberOfSymbols)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_SECTION_HEADER {
  pub Name: [BYTE; 8usize],
  pub Misc: _IMAGE_SECTION_HEADER__bindgen_ty_1,
  pub VirtualAddress: DWORD,
  pub SizeOfRawData: DWORD,
  pub PointerToRawData: DWORD,
  pub PointerToRelocations: DWORD,
  pub PointerToLinenumbers: DWORD,
  pub NumberOfRelocations: WORD,
  pub NumberOfLinenumbers: WORD,
  pub Characteristics: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_SECTION_HEADER__bindgen_ty_1 {
  pub PhysicalAddress: DWORD,
  pub VirtualSize: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_SECTION_HEADER__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SECTION_HEADER__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_SECTION_HEADER__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(_IMAGE_SECTION_HEADER__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_SECTION_HEADER__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_SECTION_HEADER__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PhysicalAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER__bindgen_ty_1),
      "::",
      stringify!(PhysicalAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VirtualSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER__bindgen_ty_1),
      "::",
      stringify!(VirtualSize)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_SECTION_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SECTION_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_SECTION_HEADER>(),
    40usize,
    concat!("Size of: ", stringify!(_IMAGE_SECTION_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_SECTION_HEADER>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_SECTION_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Misc) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER),
      "::",
      stringify!(Misc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VirtualAddress) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER),
      "::",
      stringify!(VirtualAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfRawData) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER),
      "::",
      stringify!(SizeOfRawData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PointerToRawData) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER),
      "::",
      stringify!(PointerToRawData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PointerToRelocations) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER),
      "::",
      stringify!(PointerToRelocations)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PointerToLinenumbers) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER),
      "::",
      stringify!(PointerToLinenumbers)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfRelocations) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER),
      "::",
      stringify!(NumberOfRelocations)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfLinenumbers) as usize - ptr as usize },
    34usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER),
      "::",
      stringify!(NumberOfLinenumbers)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SECTION_HEADER),
      "::",
      stringify!(Characteristics)
    )
  );
}
pub type IMAGE_SECTION_HEADER = _IMAGE_SECTION_HEADER;
pub type PIMAGE_SECTION_HEADER = *mut _IMAGE_SECTION_HEADER;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct _IMAGE_SYMBOL {
  pub N: _IMAGE_SYMBOL__bindgen_ty_1,
  pub Value: DWORD,
  pub SectionNumber: SHORT,
  pub Type: WORD,
  pub StorageClass: BYTE,
  pub NumberOfAuxSymbols: BYTE,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union _IMAGE_SYMBOL__bindgen_ty_1 {
  pub ShortName: [BYTE; 8usize],
  pub Name: _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1,
  pub LongName: [DWORD; 2usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1 {
  pub Short: DWORD,
  pub Long: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Short) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Short)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Long) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Long)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_SYMBOL__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SYMBOL__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_SYMBOL__bindgen_ty_1>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_SYMBOL__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_SYMBOL__bindgen_ty_1>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_SYMBOL__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ShortName) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL__bindgen_ty_1),
      "::",
      stringify!(ShortName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL__bindgen_ty_1),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LongName) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL__bindgen_ty_1),
      "::",
      stringify!(LongName)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_SYMBOL() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SYMBOL> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_SYMBOL>(),
    18usize,
    concat!("Size of: ", stringify!(_IMAGE_SYMBOL))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_SYMBOL>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_SYMBOL))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL),
      "::",
      stringify!(N)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL),
      "::",
      stringify!(Value)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SectionNumber) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL),
      "::",
      stringify!(SectionNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StorageClass) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL),
      "::",
      stringify!(StorageClass)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfAuxSymbols) as usize - ptr as usize },
    17usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL),
      "::",
      stringify!(NumberOfAuxSymbols)
    )
  );
}
pub type IMAGE_SYMBOL = _IMAGE_SYMBOL;
pub type PIMAGE_SYMBOL = *mut IMAGE_SYMBOL;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct _IMAGE_SYMBOL_EX {
  pub N: _IMAGE_SYMBOL_EX__bindgen_ty_1,
  pub Value: DWORD,
  pub SectionNumber: LONG,
  pub Type: WORD,
  pub StorageClass: BYTE,
  pub NumberOfAuxSymbols: BYTE,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union _IMAGE_SYMBOL_EX__bindgen_ty_1 {
  pub ShortName: [BYTE; 8usize],
  pub Name: _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1,
  pub LongName: [DWORD; 2usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1 {
  pub Short: DWORD,
  pub Long: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Short) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Short)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Long) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Long)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_SYMBOL_EX__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SYMBOL_EX__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_SYMBOL_EX__bindgen_ty_1>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_SYMBOL_EX__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_SYMBOL_EX__bindgen_ty_1>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_SYMBOL_EX__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ShortName) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX__bindgen_ty_1),
      "::",
      stringify!(ShortName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX__bindgen_ty_1),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LongName) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX__bindgen_ty_1),
      "::",
      stringify!(LongName)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_SYMBOL_EX() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SYMBOL_EX> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_SYMBOL_EX>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_SYMBOL_EX))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_SYMBOL_EX>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_SYMBOL_EX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX),
      "::",
      stringify!(N)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX),
      "::",
      stringify!(Value)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SectionNumber) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX),
      "::",
      stringify!(SectionNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StorageClass) as usize - ptr as usize },
    18usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX),
      "::",
      stringify!(StorageClass)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfAuxSymbols) as usize - ptr as usize },
    19usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SYMBOL_EX),
      "::",
      stringify!(NumberOfAuxSymbols)
    )
  );
}
pub type IMAGE_SYMBOL_EX = _IMAGE_SYMBOL_EX;
pub type PIMAGE_SYMBOL_EX = *mut IMAGE_SYMBOL_EX;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
  pub bAuxType: BYTE,
  pub bReserved: BYTE,
  pub SymbolTableIndex: DWORD,
  pub rgbReserved: [BYTE; 12usize],
}
#[test]
fn bindgen_test_layout_IMAGE_AUX_SYMBOL_TOKEN_DEF() {
  const UNINIT: ::std::mem::MaybeUninit<IMAGE_AUX_SYMBOL_TOKEN_DEF> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<IMAGE_AUX_SYMBOL_TOKEN_DEF>(),
    18usize,
    concat!("Size of: ", stringify!(IMAGE_AUX_SYMBOL_TOKEN_DEF))
  );
  assert_eq!(
    ::std::mem::align_of::<IMAGE_AUX_SYMBOL_TOKEN_DEF>(),
    2usize,
    concat!("Alignment of ", stringify!(IMAGE_AUX_SYMBOL_TOKEN_DEF))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bAuxType) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_AUX_SYMBOL_TOKEN_DEF),
      "::",
      stringify!(bAuxType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_AUX_SYMBOL_TOKEN_DEF),
      "::",
      stringify!(bReserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SymbolTableIndex) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_AUX_SYMBOL_TOKEN_DEF),
      "::",
      stringify!(SymbolTableIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rgbReserved) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_AUX_SYMBOL_TOKEN_DEF),
      "::",
      stringify!(rgbReserved)
    )
  );
}
pub type PIMAGE_AUX_SYMBOL_TOKEN_DEF = *mut IMAGE_AUX_SYMBOL_TOKEN_DEF;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL {
  pub Sym: _IMAGE_AUX_SYMBOL__bindgen_ty_1,
  pub File: _IMAGE_AUX_SYMBOL__bindgen_ty_2,
  pub Section: _IMAGE_AUX_SYMBOL__bindgen_ty_3,
  pub TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF,
  pub CRC: _IMAGE_AUX_SYMBOL__bindgen_ty_4,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1 {
  pub TagIndex: DWORD,
  pub Misc: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1,
  pub FcnAry: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2,
  pub TvIndex: WORD,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1 {
  pub LnSz: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
  pub TotalSize: DWORD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
  pub Linenumber: WORD,
  pub Size: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Linenumber) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Linenumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(Size)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LnSz) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(LnSz)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TotalSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1),
      "::",
      stringify!(TotalSize)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2 {
  pub Function: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
  pub Array: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
  pub PointerToLinenumber: DWORD,
  pub PointerToNextFunction: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<
    _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PointerToLinenumber) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(PointerToLinenumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PointerToNextFunction) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
      "::",
      stringify!(PointerToNextFunction)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2 {
  pub Dimension: [WORD; 4usize],
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<
    _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Dimension) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2),
      "::",
      stringify!(Dimension)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Function) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2),
      "::",
      stringify!(Function)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Array) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2),
      "::",
      stringify!(Array)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1>(),
    18usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TagIndex) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1),
      "::",
      stringify!(TagIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Misc) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1),
      "::",
      stringify!(Misc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FcnAry) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1),
      "::",
      stringify!(FcnAry)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TvIndex) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1),
      "::",
      stringify!(TvIndex)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_2 {
  pub Name: [BYTE; 18usize],
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_2>(),
    18usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_2))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_2>(),
    1usize,
    concat!("Alignment of ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_2))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_2),
      "::",
      stringify!(Name)
    )
  );
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_3 {
  pub Length: DWORD,
  pub NumberOfRelocations: WORD,
  pub NumberOfLinenumbers: WORD,
  pub CheckSum: DWORD,
  pub Number: SHORT,
  pub Selection: BYTE,
  pub bReserved: BYTE,
  pub HighNumber: SHORT,
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_3() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_3> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_3>(),
    18usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_3>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfRelocations) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
      "::",
      stringify!(NumberOfRelocations)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfLinenumbers) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
      "::",
      stringify!(NumberOfLinenumbers)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CheckSum) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
      "::",
      stringify!(CheckSum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Number) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
      "::",
      stringify!(Number)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Selection) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
      "::",
      stringify!(Selection)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
    15usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
      "::",
      stringify!(bReserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HighNumber) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
      "::",
      stringify!(HighNumber)
    )
  );
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_4 {
  pub crc: DWORD,
  pub rgbReserved: [BYTE; 14usize],
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_4() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_4> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_4>(),
    18usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_4))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_4>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_4))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).crc) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_4),
      "::",
      stringify!(crc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rgbReserved) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_4),
      "::",
      stringify!(rgbReserved)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL>(),
    18usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_AUX_SYMBOL))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sym) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL),
      "::",
      stringify!(Sym)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).File) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL),
      "::",
      stringify!(File)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Section) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL),
      "::",
      stringify!(Section)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TokenDef) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL),
      "::",
      stringify!(TokenDef)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CRC) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL),
      "::",
      stringify!(CRC)
    )
  );
}
pub type IMAGE_AUX_SYMBOL = _IMAGE_AUX_SYMBOL;
pub type PIMAGE_AUX_SYMBOL = *mut IMAGE_AUX_SYMBOL;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL_EX {
  pub Sym: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1,
  pub File: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_2,
  pub Section: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3,
  pub __bindgen_anon_1: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_4,
  pub CRC: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_5,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1 {
  pub WeakDefaultSymIndex: DWORD,
  pub WeakSearchType: DWORD,
  pub rgbReserved: [BYTE; 12usize],
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL_EX__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).WeakDefaultSymIndex) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1),
      "::",
      stringify!(WeakDefaultSymIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).WeakSearchType) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1),
      "::",
      stringify!(WeakSearchType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rgbReserved) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1),
      "::",
      stringify!(rgbReserved)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_2 {
  pub Name: [BYTE; 20usize],
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL_EX__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_2>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_2))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_2>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_2),
      "::",
      stringify!(Name)
    )
  );
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3 {
  pub Length: DWORD,
  pub NumberOfRelocations: WORD,
  pub NumberOfLinenumbers: WORD,
  pub CheckSum: DWORD,
  pub Number: SHORT,
  pub Selection: BYTE,
  pub bReserved: BYTE,
  pub HighNumber: SHORT,
  pub rgbReserved: [BYTE; 2usize],
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL_EX__bindgen_ty_3() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfRelocations) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3),
      "::",
      stringify!(NumberOfRelocations)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfLinenumbers) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3),
      "::",
      stringify!(NumberOfLinenumbers)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CheckSum) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3),
      "::",
      stringify!(CheckSum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Number) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3),
      "::",
      stringify!(Number)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Selection) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3),
      "::",
      stringify!(Selection)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bReserved) as usize - ptr as usize },
    15usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3),
      "::",
      stringify!(bReserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HighNumber) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3),
      "::",
      stringify!(HighNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rgbReserved) as usize - ptr as usize },
    18usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3),
      "::",
      stringify!(rgbReserved)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_4 {
  pub TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF,
  pub rgbReserved: [BYTE; 2usize],
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL_EX__bindgen_ty_4() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TokenDef) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4),
      "::",
      stringify!(TokenDef)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rgbReserved) as usize - ptr as usize },
    18usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4),
      "::",
      stringify!(rgbReserved)
    )
  );
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_5 {
  pub crc: DWORD,
  pub rgbReserved: [BYTE; 16usize],
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL_EX__bindgen_ty_5() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).crc) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5),
      "::",
      stringify!(crc)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rgbReserved) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5),
      "::",
      stringify!(rgbReserved)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL_EX() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL_EX> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL_EX))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_AUX_SYMBOL_EX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sym) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX),
      "::",
      stringify!(Sym)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).File) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX),
      "::",
      stringify!(File)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Section) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX),
      "::",
      stringify!(Section)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CRC) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_AUX_SYMBOL_EX),
      "::",
      stringify!(CRC)
    )
  );
}
pub type IMAGE_AUX_SYMBOL_EX = _IMAGE_AUX_SYMBOL_EX;
pub type PIMAGE_AUX_SYMBOL_EX = *mut IMAGE_AUX_SYMBOL_EX;
pub const IMAGE_AUX_SYMBOL_TYPE_IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF: IMAGE_AUX_SYMBOL_TYPE = 1;
pub type IMAGE_AUX_SYMBOL_TYPE = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct _IMAGE_RELOCATION {
  pub __bindgen_anon_1: _IMAGE_RELOCATION__bindgen_ty_1,
  pub SymbolTableIndex: DWORD,
  pub Type: WORD,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union _IMAGE_RELOCATION__bindgen_ty_1 {
  pub VirtualAddress: DWORD,
  pub RelocCount: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_RELOCATION__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RELOCATION__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RELOCATION__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(_IMAGE_RELOCATION__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RELOCATION__bindgen_ty_1>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_RELOCATION__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VirtualAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RELOCATION__bindgen_ty_1),
      "::",
      stringify!(VirtualAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RelocCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RELOCATION__bindgen_ty_1),
      "::",
      stringify!(RelocCount)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_RELOCATION() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RELOCATION> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RELOCATION>(),
    10usize,
    concat!("Size of: ", stringify!(_IMAGE_RELOCATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RELOCATION>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_RELOCATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SymbolTableIndex) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RELOCATION),
      "::",
      stringify!(SymbolTableIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RELOCATION),
      "::",
      stringify!(Type)
    )
  );
}
pub type IMAGE_RELOCATION = _IMAGE_RELOCATION;
pub type PIMAGE_RELOCATION = *mut IMAGE_RELOCATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_LINENUMBER {
  pub Type: _IMAGE_LINENUMBER__bindgen_ty_1,
  pub Linenumber: WORD,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union _IMAGE_LINENUMBER__bindgen_ty_1 {
  pub SymbolTableIndex: DWORD,
  pub VirtualAddress: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_LINENUMBER__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_LINENUMBER__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_LINENUMBER__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(_IMAGE_LINENUMBER__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_LINENUMBER__bindgen_ty_1>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_LINENUMBER__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SymbolTableIndex) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LINENUMBER__bindgen_ty_1),
      "::",
      stringify!(SymbolTableIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VirtualAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LINENUMBER__bindgen_ty_1),
      "::",
      stringify!(VirtualAddress)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_LINENUMBER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_LINENUMBER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_LINENUMBER>(),
    6usize,
    concat!("Size of: ", stringify!(_IMAGE_LINENUMBER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_LINENUMBER>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_LINENUMBER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LINENUMBER),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Linenumber) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LINENUMBER),
      "::",
      stringify!(Linenumber)
    )
  );
}
pub type IMAGE_LINENUMBER = _IMAGE_LINENUMBER;
pub type PIMAGE_LINENUMBER = *mut IMAGE_LINENUMBER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_BASE_RELOCATION {
  pub VirtualAddress: DWORD,
  pub SizeOfBlock: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_BASE_RELOCATION() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_BASE_RELOCATION> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_BASE_RELOCATION>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_BASE_RELOCATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_BASE_RELOCATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_BASE_RELOCATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VirtualAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BASE_RELOCATION),
      "::",
      stringify!(VirtualAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfBlock) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BASE_RELOCATION),
      "::",
      stringify!(SizeOfBlock)
    )
  );
}
pub type IMAGE_BASE_RELOCATION = _IMAGE_BASE_RELOCATION;
pub type PIMAGE_BASE_RELOCATION = *mut IMAGE_BASE_RELOCATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ARCHIVE_MEMBER_HEADER {
  pub Name: [BYTE; 16usize],
  pub Date: [BYTE; 12usize],
  pub UserID: [BYTE; 6usize],
  pub GroupID: [BYTE; 6usize],
  pub Mode: [BYTE; 8usize],
  pub Size: [BYTE; 10usize],
  pub EndHeader: [BYTE; 2usize],
}
#[test]
fn bindgen_test_layout__IMAGE_ARCHIVE_MEMBER_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ARCHIVE_MEMBER_HEADER> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ARCHIVE_MEMBER_HEADER>(),
    60usize,
    concat!("Size of: ", stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ARCHIVE_MEMBER_HEADER>(),
    1usize,
    concat!("Alignment of ", stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Date) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
      "::",
      stringify!(Date)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UserID) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
      "::",
      stringify!(UserID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GroupID) as usize - ptr as usize },
    34usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
      "::",
      stringify!(GroupID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
      "::",
      stringify!(Mode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndHeader) as usize - ptr as usize },
    58usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
      "::",
      stringify!(EndHeader)
    )
  );
}
pub type IMAGE_ARCHIVE_MEMBER_HEADER = _IMAGE_ARCHIVE_MEMBER_HEADER;
pub type PIMAGE_ARCHIVE_MEMBER_HEADER = *mut _IMAGE_ARCHIVE_MEMBER_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_EXPORT_DIRECTORY {
  pub Characteristics: DWORD,
  pub TimeDateStamp: DWORD,
  pub MajorVersion: WORD,
  pub MinorVersion: WORD,
  pub Name: DWORD,
  pub Base: DWORD,
  pub NumberOfFunctions: DWORD,
  pub NumberOfNames: DWORD,
  pub AddressOfFunctions: DWORD,
  pub AddressOfNames: DWORD,
  pub AddressOfNameOrdinals: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_EXPORT_DIRECTORY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_EXPORT_DIRECTORY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_EXPORT_DIRECTORY>(),
    40usize,
    concat!("Size of: ", stringify!(_IMAGE_EXPORT_DIRECTORY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_EXPORT_DIRECTORY>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_EXPORT_DIRECTORY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(Characteristics)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorVersion) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(MajorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorVersion) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(MinorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Base) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(Base)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfFunctions) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(NumberOfFunctions)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfNames) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(NumberOfNames)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfFunctions) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(AddressOfFunctions)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfNames) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(AddressOfNames)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfNameOrdinals) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EXPORT_DIRECTORY),
      "::",
      stringify!(AddressOfNameOrdinals)
    )
  );
}
pub type IMAGE_EXPORT_DIRECTORY = _IMAGE_EXPORT_DIRECTORY;
pub type PIMAGE_EXPORT_DIRECTORY = *mut _IMAGE_EXPORT_DIRECTORY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_IMPORT_BY_NAME {
  pub Hint: WORD,
  pub Name: [CHAR; 1usize],
}
#[test]
fn bindgen_test_layout__IMAGE_IMPORT_BY_NAME() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_IMPORT_BY_NAME> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_IMPORT_BY_NAME>(),
    4usize,
    concat!("Size of: ", stringify!(_IMAGE_IMPORT_BY_NAME))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_IMPORT_BY_NAME>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_IMPORT_BY_NAME))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Hint) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_IMPORT_BY_NAME),
      "::",
      stringify!(Hint)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_IMPORT_BY_NAME),
      "::",
      stringify!(Name)
    )
  );
}
pub type IMAGE_IMPORT_BY_NAME = _IMAGE_IMPORT_BY_NAME;
pub type PIMAGE_IMPORT_BY_NAME = *mut _IMAGE_IMPORT_BY_NAME;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_THUNK_DATA64 {
  pub u1: _IMAGE_THUNK_DATA64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_THUNK_DATA64__bindgen_ty_1 {
  pub ForwarderString: ULONGLONG,
  pub Function: ULONGLONG,
  pub Ordinal: ULONGLONG,
  pub AddressOfData: ULONGLONG,
}
#[test]
fn bindgen_test_layout__IMAGE_THUNK_DATA64__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_THUNK_DATA64__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_THUNK_DATA64__bindgen_ty_1>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_THUNK_DATA64__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ForwarderString) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1),
      "::",
      stringify!(ForwarderString)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Function) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1),
      "::",
      stringify!(Function)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ordinal) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1),
      "::",
      stringify!(Ordinal)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1),
      "::",
      stringify!(AddressOfData)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_THUNK_DATA64() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_THUNK_DATA64> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_THUNK_DATA64>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_THUNK_DATA64))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_THUNK_DATA64>(),
    8usize,
    concat!("Alignment of ", stringify!(_IMAGE_THUNK_DATA64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).u1) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_THUNK_DATA64),
      "::",
      stringify!(u1)
    )
  );
}
pub type IMAGE_THUNK_DATA64 = _IMAGE_THUNK_DATA64;
pub type PIMAGE_THUNK_DATA64 = *mut IMAGE_THUNK_DATA64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_THUNK_DATA32 {
  pub u1: _IMAGE_THUNK_DATA32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_THUNK_DATA32__bindgen_ty_1 {
  pub ForwarderString: DWORD,
  pub Function: DWORD,
  pub Ordinal: DWORD,
  pub AddressOfData: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_THUNK_DATA32__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_THUNK_DATA32__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_THUNK_DATA32__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_THUNK_DATA32__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ForwarderString) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1),
      "::",
      stringify!(ForwarderString)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Function) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1),
      "::",
      stringify!(Function)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ordinal) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1),
      "::",
      stringify!(Ordinal)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1),
      "::",
      stringify!(AddressOfData)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_THUNK_DATA32() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_THUNK_DATA32> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_THUNK_DATA32>(),
    4usize,
    concat!("Size of: ", stringify!(_IMAGE_THUNK_DATA32))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_THUNK_DATA32>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_THUNK_DATA32))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).u1) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_THUNK_DATA32),
      "::",
      stringify!(u1)
    )
  );
}
pub type IMAGE_THUNK_DATA32 = _IMAGE_THUNK_DATA32;
pub type PIMAGE_THUNK_DATA32 = *mut IMAGE_THUNK_DATA32;
pub type PIMAGE_TLS_CALLBACK =
  ::std::option::Option<unsafe extern "C" fn(DllHandle: PVOID, Reason: DWORD, Reserved: PVOID)>;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _IMAGE_TLS_DIRECTORY64 {
  pub StartAddressOfRawData: ULONGLONG,
  pub EndAddressOfRawData: ULONGLONG,
  pub AddressOfIndex: ULONGLONG,
  pub AddressOfCallBacks: ULONGLONG,
  pub SizeOfZeroFill: DWORD,
  pub __bindgen_anon_1: _IMAGE_TLS_DIRECTORY64__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union _IMAGE_TLS_DIRECTORY64__bindgen_ty_1 {
  pub Characteristics: DWORD,
  pub __bindgen_anon_1: _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn Reserved0(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
  }
  #[inline]
  pub fn set_Reserved0(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 20u8, val as u64)
    }
  }
  #[inline]
  pub fn Alignment(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
  }
  #[inline]
  pub fn set_Alignment(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(20usize, 4u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved1(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_Reserved1(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(24usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    Reserved0: DWORD,
    Alignment: DWORD,
    Reserved1: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 20u8, {
      let Reserved0: u32 = unsafe { ::std::mem::transmute(Reserved0) };
      Reserved0 as u64
    });
    __bindgen_bitfield_unit.set(20usize, 4u8, {
      let Alignment: u32 = unsafe { ::std::mem::transmute(Alignment) };
      Alignment as u64
    });
    __bindgen_bitfield_unit.set(24usize, 8u8, {
      let Reserved1: u32 = unsafe { ::std::mem::transmute(Reserved1) };
      Reserved1 as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__IMAGE_TLS_DIRECTORY64__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_TLS_DIRECTORY64__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_TLS_DIRECTORY64__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_TLS_DIRECTORY64__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_TLS_DIRECTORY64__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_TLS_DIRECTORY64__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY64__bindgen_ty_1),
      "::",
      stringify!(Characteristics)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_TLS_DIRECTORY64() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_TLS_DIRECTORY64> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_TLS_DIRECTORY64>(),
    40usize,
    concat!("Size of: ", stringify!(_IMAGE_TLS_DIRECTORY64))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_TLS_DIRECTORY64>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_TLS_DIRECTORY64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StartAddressOfRawData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY64),
      "::",
      stringify!(StartAddressOfRawData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndAddressOfRawData) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY64),
      "::",
      stringify!(EndAddressOfRawData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfIndex) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY64),
      "::",
      stringify!(AddressOfIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfCallBacks) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY64),
      "::",
      stringify!(AddressOfCallBacks)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfZeroFill) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY64),
      "::",
      stringify!(SizeOfZeroFill)
    )
  );
}
pub type IMAGE_TLS_DIRECTORY64 = _IMAGE_TLS_DIRECTORY64;
pub type PIMAGE_TLS_DIRECTORY64 = *mut IMAGE_TLS_DIRECTORY64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_TLS_DIRECTORY32 {
  pub StartAddressOfRawData: DWORD,
  pub EndAddressOfRawData: DWORD,
  pub AddressOfIndex: DWORD,
  pub AddressOfCallBacks: DWORD,
  pub SizeOfZeroFill: DWORD,
  pub __bindgen_anon_1: _IMAGE_TLS_DIRECTORY32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_TLS_DIRECTORY32__bindgen_ty_1 {
  pub Characteristics: DWORD,
  pub __bindgen_anon_1: _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn Reserved0(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
  }
  #[inline]
  pub fn set_Reserved0(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 20u8, val as u64)
    }
  }
  #[inline]
  pub fn Alignment(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
  }
  #[inline]
  pub fn set_Alignment(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(20usize, 4u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved1(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_Reserved1(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(24usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    Reserved0: DWORD,
    Alignment: DWORD,
    Reserved1: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 20u8, {
      let Reserved0: u32 = unsafe { ::std::mem::transmute(Reserved0) };
      Reserved0 as u64
    });
    __bindgen_bitfield_unit.set(20usize, 4u8, {
      let Alignment: u32 = unsafe { ::std::mem::transmute(Alignment) };
      Alignment as u64
    });
    __bindgen_bitfield_unit.set(24usize, 8u8, {
      let Reserved1: u32 = unsafe { ::std::mem::transmute(Reserved1) };
      Reserved1 as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__IMAGE_TLS_DIRECTORY32__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_TLS_DIRECTORY32__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_TLS_DIRECTORY32__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_TLS_DIRECTORY32__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_TLS_DIRECTORY32__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_TLS_DIRECTORY32__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY32__bindgen_ty_1),
      "::",
      stringify!(Characteristics)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_TLS_DIRECTORY32() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_TLS_DIRECTORY32> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_TLS_DIRECTORY32>(),
    24usize,
    concat!("Size of: ", stringify!(_IMAGE_TLS_DIRECTORY32))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_TLS_DIRECTORY32>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_TLS_DIRECTORY32))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StartAddressOfRawData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY32),
      "::",
      stringify!(StartAddressOfRawData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndAddressOfRawData) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY32),
      "::",
      stringify!(EndAddressOfRawData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfIndex) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY32),
      "::",
      stringify!(AddressOfIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfCallBacks) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY32),
      "::",
      stringify!(AddressOfCallBacks)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfZeroFill) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_TLS_DIRECTORY32),
      "::",
      stringify!(SizeOfZeroFill)
    )
  );
}
pub type IMAGE_TLS_DIRECTORY32 = _IMAGE_TLS_DIRECTORY32;
pub type PIMAGE_TLS_DIRECTORY32 = *mut IMAGE_TLS_DIRECTORY32;
pub type IMAGE_THUNK_DATA = IMAGE_THUNK_DATA64;
pub type PIMAGE_THUNK_DATA = PIMAGE_THUNK_DATA64;
pub type IMAGE_TLS_DIRECTORY = IMAGE_TLS_DIRECTORY64;
pub type PIMAGE_TLS_DIRECTORY = PIMAGE_TLS_DIRECTORY64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_IMPORT_DESCRIPTOR {
  pub __bindgen_anon_1: _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1,
  pub TimeDateStamp: DWORD,
  pub ForwarderChain: DWORD,
  pub Name: DWORD,
  pub FirstThunk: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1 {
  pub Characteristics: DWORD,
  pub OriginalFirstThunk: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1),
      "::",
      stringify!(Characteristics)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OriginalFirstThunk) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1),
      "::",
      stringify!(OriginalFirstThunk)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_IMPORT_DESCRIPTOR() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_IMPORT_DESCRIPTOR> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_IMPORT_DESCRIPTOR>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_IMPORT_DESCRIPTOR))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_IMPORT_DESCRIPTOR>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_IMPORT_DESCRIPTOR))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_IMPORT_DESCRIPTOR),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ForwarderChain) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_IMPORT_DESCRIPTOR),
      "::",
      stringify!(ForwarderChain)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_IMPORT_DESCRIPTOR),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FirstThunk) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_IMPORT_DESCRIPTOR),
      "::",
      stringify!(FirstThunk)
    )
  );
}
pub type IMAGE_IMPORT_DESCRIPTOR = _IMAGE_IMPORT_DESCRIPTOR;
pub type PIMAGE_IMPORT_DESCRIPTOR = *mut IMAGE_IMPORT_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
  pub TimeDateStamp: DWORD,
  pub OffsetModuleName: WORD,
  pub NumberOfModuleForwarderRefs: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_BOUND_IMPORT_DESCRIPTOR() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_BOUND_IMPORT_DESCRIPTOR> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_BOUND_IMPORT_DESCRIPTOR>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_BOUND_IMPORT_DESCRIPTOR))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_BOUND_IMPORT_DESCRIPTOR>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_BOUND_IMPORT_DESCRIPTOR))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BOUND_IMPORT_DESCRIPTOR),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OffsetModuleName) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BOUND_IMPORT_DESCRIPTOR),
      "::",
      stringify!(OffsetModuleName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfModuleForwarderRefs) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BOUND_IMPORT_DESCRIPTOR),
      "::",
      stringify!(NumberOfModuleForwarderRefs)
    )
  );
}
pub type IMAGE_BOUND_IMPORT_DESCRIPTOR = _IMAGE_BOUND_IMPORT_DESCRIPTOR;
pub type PIMAGE_BOUND_IMPORT_DESCRIPTOR = *mut _IMAGE_BOUND_IMPORT_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_BOUND_FORWARDER_REF {
  pub TimeDateStamp: DWORD,
  pub OffsetModuleName: WORD,
  pub Reserved: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_BOUND_FORWARDER_REF() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_BOUND_FORWARDER_REF> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_BOUND_FORWARDER_REF>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_BOUND_FORWARDER_REF))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_BOUND_FORWARDER_REF>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_BOUND_FORWARDER_REF))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BOUND_FORWARDER_REF),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OffsetModuleName) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BOUND_FORWARDER_REF),
      "::",
      stringify!(OffsetModuleName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BOUND_FORWARDER_REF),
      "::",
      stringify!(Reserved)
    )
  );
}
pub type IMAGE_BOUND_FORWARDER_REF = _IMAGE_BOUND_FORWARDER_REF;
pub type PIMAGE_BOUND_FORWARDER_REF = *mut _IMAGE_BOUND_FORWARDER_REF;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_DELAYLOAD_DESCRIPTOR {
  pub Attributes: _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1,
  pub DllNameRVA: DWORD,
  pub ModuleHandleRVA: DWORD,
  pub ImportAddressTableRVA: DWORD,
  pub ImportNameTableRVA: DWORD,
  pub BoundImportAddressTableRVA: DWORD,
  pub UnloadInformationTableRVA: DWORD,
  pub TimeDateStamp: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1 {
  pub AllAttributes: DWORD,
  pub __bindgen_anon_1: _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn RvaBased(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_RvaBased(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ReservedAttributes(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_ReservedAttributes(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    RvaBased: DWORD,
    ReservedAttributes: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let RvaBased: u32 = unsafe { ::std::mem::transmute(RvaBased) };
      RvaBased as u64
    });
    __bindgen_bitfield_unit.set(1usize, 31u8, {
      let ReservedAttributes: u32 = unsafe { ::std::mem::transmute(ReservedAttributes) };
      ReservedAttributes as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AllAttributes) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1),
      "::",
      stringify!(AllAttributes)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_DELAYLOAD_DESCRIPTOR() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DELAYLOAD_DESCRIPTOR> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DELAYLOAD_DESCRIPTOR>(),
    32usize,
    concat!("Size of: ", stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DELAYLOAD_DESCRIPTOR>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Attributes) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR),
      "::",
      stringify!(Attributes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DllNameRVA) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR),
      "::",
      stringify!(DllNameRVA)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ModuleHandleRVA) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR),
      "::",
      stringify!(ModuleHandleRVA)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImportAddressTableRVA) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR),
      "::",
      stringify!(ImportAddressTableRVA)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImportNameTableRVA) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR),
      "::",
      stringify!(ImportNameTableRVA)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BoundImportAddressTableRVA) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR),
      "::",
      stringify!(BoundImportAddressTableRVA)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UnloadInformationTableRVA) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR),
      "::",
      stringify!(UnloadInformationTableRVA)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DELAYLOAD_DESCRIPTOR),
      "::",
      stringify!(TimeDateStamp)
    )
  );
}
pub type IMAGE_DELAYLOAD_DESCRIPTOR = _IMAGE_DELAYLOAD_DESCRIPTOR;
pub type PIMAGE_DELAYLOAD_DESCRIPTOR = *mut _IMAGE_DELAYLOAD_DESCRIPTOR;
pub type PCIMAGE_DELAYLOAD_DESCRIPTOR = *const IMAGE_DELAYLOAD_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY {
  pub Characteristics: DWORD,
  pub TimeDateStamp: DWORD,
  pub MajorVersion: WORD,
  pub MinorVersion: WORD,
  pub NumberOfNamedEntries: WORD,
  pub NumberOfIdEntries: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DIRECTORY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY>(),
    16usize,
    concat!("Size of: ", stringify!(_IMAGE_RESOURCE_DIRECTORY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_RESOURCE_DIRECTORY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY),
      "::",
      stringify!(Characteristics)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorVersion) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY),
      "::",
      stringify!(MajorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorVersion) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY),
      "::",
      stringify!(MinorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfNamedEntries) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY),
      "::",
      stringify!(NumberOfNamedEntries)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfIdEntries) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY),
      "::",
      stringify!(NumberOfIdEntries)
    )
  );
}
pub type IMAGE_RESOURCE_DIRECTORY = _IMAGE_RESOURCE_DIRECTORY;
pub type PIMAGE_RESOURCE_DIRECTORY = *mut _IMAGE_RESOURCE_DIRECTORY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
  pub __bindgen_anon_1: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1,
  pub __bindgen_anon_2: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1 {
  pub __bindgen_anon_1: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1,
  pub Name: DWORD,
  pub Id: WORD,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn NameOffset(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_NameOffset(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn NameIsString(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_NameIsString(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(31usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    NameOffset: DWORD,
    NameIsString: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 31u8, {
      let NameOffset: u32 = unsafe { ::std::mem::transmute(NameOffset) };
      NameOffset as u64
    });
    __bindgen_bitfield_unit.set(31usize, 1u8, {
      let NameIsString: u32 = unsafe { ::std::mem::transmute(NameIsString) };
      NameIsString as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Id) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(Id)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2 {
  pub OffsetToData: DWORD,
  pub __bindgen_anon_1: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1)
    )
  );
}
impl _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1 {
  #[inline]
  pub fn OffsetToDirectory(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
  }
  #[inline]
  pub fn set_OffsetToDirectory(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 31u8, val as u64)
    }
  }
  #[inline]
  pub fn DataIsDirectory(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_DataIsDirectory(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(31usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    OffsetToDirectory: DWORD,
    DataIsDirectory: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 31u8, {
      let OffsetToDirectory: u32 = unsafe { ::std::mem::transmute(OffsetToDirectory) };
      OffsetToDirectory as u64
    });
    __bindgen_bitfield_unit.set(31usize, 1u8, {
      let DataIsDirectory: u32 = unsafe { ::std::mem::transmute(DataIsDirectory) };
      DataIsDirectory as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OffsetToData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2),
      "::",
      stringify!(OffsetToData)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY))
  );
}
pub type IMAGE_RESOURCE_DIRECTORY_ENTRY = _IMAGE_RESOURCE_DIRECTORY_ENTRY;
pub type PIMAGE_RESOURCE_DIRECTORY_ENTRY = *mut _IMAGE_RESOURCE_DIRECTORY_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_STRING {
  pub Length: WORD,
  pub NameString: [CHAR; 1usize],
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_STRING() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DIRECTORY_STRING> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_STRING>(),
    4usize,
    concat!("Size of: ", stringify!(_IMAGE_RESOURCE_DIRECTORY_STRING))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_STRING>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_STRING)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_STRING),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NameString) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIRECTORY_STRING),
      "::",
      stringify!(NameString)
    )
  );
}
pub type IMAGE_RESOURCE_DIRECTORY_STRING = _IMAGE_RESOURCE_DIRECTORY_STRING;
pub type PIMAGE_RESOURCE_DIRECTORY_STRING = *mut _IMAGE_RESOURCE_DIRECTORY_STRING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIR_STRING_U {
  pub Length: WORD,
  pub NameString: [WCHAR; 1usize],
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIR_STRING_U() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DIR_STRING_U> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RESOURCE_DIR_STRING_U>(),
    4usize,
    concat!("Size of: ", stringify!(_IMAGE_RESOURCE_DIR_STRING_U))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RESOURCE_DIR_STRING_U>(),
    2usize,
    concat!("Alignment of ", stringify!(_IMAGE_RESOURCE_DIR_STRING_U))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIR_STRING_U),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NameString) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DIR_STRING_U),
      "::",
      stringify!(NameString)
    )
  );
}
pub type IMAGE_RESOURCE_DIR_STRING_U = _IMAGE_RESOURCE_DIR_STRING_U;
pub type PIMAGE_RESOURCE_DIR_STRING_U = *mut _IMAGE_RESOURCE_DIR_STRING_U;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DATA_ENTRY {
  pub OffsetToData: DWORD,
  pub Size: DWORD,
  pub CodePage: DWORD,
  pub Reserved: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DATA_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DATA_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RESOURCE_DATA_ENTRY>(),
    16usize,
    concat!("Size of: ", stringify!(_IMAGE_RESOURCE_DATA_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RESOURCE_DATA_ENTRY>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_RESOURCE_DATA_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OffsetToData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DATA_ENTRY),
      "::",
      stringify!(OffsetToData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DATA_ENTRY),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CodePage) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DATA_ENTRY),
      "::",
      stringify!(CodePage)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RESOURCE_DATA_ENTRY),
      "::",
      stringify!(Reserved)
    )
  );
}
pub type IMAGE_RESOURCE_DATA_ENTRY = _IMAGE_RESOURCE_DATA_ENTRY;
pub type PIMAGE_RESOURCE_DATA_ENTRY = *mut _IMAGE_RESOURCE_DATA_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
  pub Flags: WORD,
  pub Catalog: WORD,
  pub CatalogOffset: DWORD,
  pub Reserved: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_LOAD_CONFIG_CODE_INTEGRITY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_LOAD_CONFIG_CODE_INTEGRITY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_LOAD_CONFIG_CODE_INTEGRITY>(),
    12usize,
    concat!("Size of: ", stringify!(_IMAGE_LOAD_CONFIG_CODE_INTEGRITY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_LOAD_CONFIG_CODE_INTEGRITY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_LOAD_CONFIG_CODE_INTEGRITY)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_CODE_INTEGRITY),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Catalog) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_CODE_INTEGRITY),
      "::",
      stringify!(Catalog)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CatalogOffset) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_CODE_INTEGRITY),
      "::",
      stringify!(CatalogOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_CODE_INTEGRITY),
      "::",
      stringify!(Reserved)
    )
  );
}
pub type IMAGE_LOAD_CONFIG_CODE_INTEGRITY = _IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
pub type PIMAGE_LOAD_CONFIG_CODE_INTEGRITY = *mut _IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
  pub Version: DWORD,
  pub Size: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_DYNAMIC_RELOCATION_TABLE() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DYNAMIC_RELOCATION_TABLE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DYNAMIC_RELOCATION_TABLE>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_DYNAMIC_RELOCATION_TABLE))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DYNAMIC_RELOCATION_TABLE>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_DYNAMIC_RELOCATION_TABLE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION_TABLE),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION_TABLE),
      "::",
      stringify!(Size)
    )
  );
}
pub type IMAGE_DYNAMIC_RELOCATION_TABLE = _IMAGE_DYNAMIC_RELOCATION_TABLE;
pub type PIMAGE_DYNAMIC_RELOCATION_TABLE = *mut _IMAGE_DYNAMIC_RELOCATION_TABLE;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DYNAMIC_RELOCATION32 {
  pub Symbol: DWORD,
  pub BaseRelocSize: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_DYNAMIC_RELOCATION32() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DYNAMIC_RELOCATION32> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DYNAMIC_RELOCATION32>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_DYNAMIC_RELOCATION32))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DYNAMIC_RELOCATION32>(),
    1usize,
    concat!("Alignment of ", stringify!(_IMAGE_DYNAMIC_RELOCATION32))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Symbol) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION32),
      "::",
      stringify!(Symbol)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseRelocSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION32),
      "::",
      stringify!(BaseRelocSize)
    )
  );
}
pub type IMAGE_DYNAMIC_RELOCATION32 = _IMAGE_DYNAMIC_RELOCATION32;
pub type PIMAGE_DYNAMIC_RELOCATION32 = *mut _IMAGE_DYNAMIC_RELOCATION32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DYNAMIC_RELOCATION64 {
  pub Symbol: ULONGLONG,
  pub BaseRelocSize: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_DYNAMIC_RELOCATION64() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DYNAMIC_RELOCATION64> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DYNAMIC_RELOCATION64>(),
    12usize,
    concat!("Size of: ", stringify!(_IMAGE_DYNAMIC_RELOCATION64))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DYNAMIC_RELOCATION64>(),
    1usize,
    concat!("Alignment of ", stringify!(_IMAGE_DYNAMIC_RELOCATION64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Symbol) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION64),
      "::",
      stringify!(Symbol)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseRelocSize) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION64),
      "::",
      stringify!(BaseRelocSize)
    )
  );
}
pub type IMAGE_DYNAMIC_RELOCATION64 = _IMAGE_DYNAMIC_RELOCATION64;
pub type PIMAGE_DYNAMIC_RELOCATION64 = *mut _IMAGE_DYNAMIC_RELOCATION64;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
  pub HeaderSize: DWORD,
  pub FixupInfoSize: DWORD,
  pub Symbol: DWORD,
  pub SymbolGroup: DWORD,
  pub Flags: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_DYNAMIC_RELOCATION32_V2() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DYNAMIC_RELOCATION32_V2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DYNAMIC_RELOCATION32_V2>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_DYNAMIC_RELOCATION32_V2))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DYNAMIC_RELOCATION32_V2>(),
    1usize,
    concat!("Alignment of ", stringify!(_IMAGE_DYNAMIC_RELOCATION32_V2))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HeaderSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION32_V2),
      "::",
      stringify!(HeaderSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FixupInfoSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION32_V2),
      "::",
      stringify!(FixupInfoSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Symbol) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION32_V2),
      "::",
      stringify!(Symbol)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SymbolGroup) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION32_V2),
      "::",
      stringify!(SymbolGroup)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION32_V2),
      "::",
      stringify!(Flags)
    )
  );
}
pub type IMAGE_DYNAMIC_RELOCATION32_V2 = _IMAGE_DYNAMIC_RELOCATION32_V2;
pub type PIMAGE_DYNAMIC_RELOCATION32_V2 = *mut _IMAGE_DYNAMIC_RELOCATION32_V2;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
  pub HeaderSize: DWORD,
  pub FixupInfoSize: DWORD,
  pub Symbol: ULONGLONG,
  pub SymbolGroup: DWORD,
  pub Flags: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_DYNAMIC_RELOCATION64_V2() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DYNAMIC_RELOCATION64_V2> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DYNAMIC_RELOCATION64_V2>(),
    24usize,
    concat!("Size of: ", stringify!(_IMAGE_DYNAMIC_RELOCATION64_V2))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DYNAMIC_RELOCATION64_V2>(),
    1usize,
    concat!("Alignment of ", stringify!(_IMAGE_DYNAMIC_RELOCATION64_V2))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HeaderSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION64_V2),
      "::",
      stringify!(HeaderSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FixupInfoSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION64_V2),
      "::",
      stringify!(FixupInfoSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Symbol) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION64_V2),
      "::",
      stringify!(Symbol)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SymbolGroup) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION64_V2),
      "::",
      stringify!(SymbolGroup)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DYNAMIC_RELOCATION64_V2),
      "::",
      stringify!(Flags)
    )
  );
}
pub type IMAGE_DYNAMIC_RELOCATION64_V2 = _IMAGE_DYNAMIC_RELOCATION64_V2;
pub type PIMAGE_DYNAMIC_RELOCATION64_V2 = *mut _IMAGE_DYNAMIC_RELOCATION64_V2;
pub type IMAGE_DYNAMIC_RELOCATION = IMAGE_DYNAMIC_RELOCATION64;
pub type PIMAGE_DYNAMIC_RELOCATION = PIMAGE_DYNAMIC_RELOCATION64;
pub type IMAGE_DYNAMIC_RELOCATION_V2 = IMAGE_DYNAMIC_RELOCATION64_V2;
pub type PIMAGE_DYNAMIC_RELOCATION_V2 = PIMAGE_DYNAMIC_RELOCATION64_V2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
  pub PrologueByteCount: BYTE,
}
#[test]
fn bindgen_test_layout__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER>(),
    1usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrologueByteCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER),
      "::",
      stringify!(PrologueByteCount)
    )
  );
}
pub type IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
pub type PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = *mut IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
  pub EpilogueCount: DWORD,
  pub EpilogueByteCount: BYTE,
  pub BranchDescriptorElementSize: BYTE,
  pub BranchDescriptorCount: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EpilogueCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER),
      "::",
      stringify!(EpilogueCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EpilogueByteCount) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER),
      "::",
      stringify!(EpilogueByteCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BranchDescriptorElementSize) as usize - ptr as usize },
    5usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER),
      "::",
      stringify!(BranchDescriptorElementSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BranchDescriptorCount) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER),
      "::",
      stringify!(BranchDescriptorCount)
    )
  );
}
pub type IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
pub type PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = *mut IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION)
    )
  );
}
impl _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
  #[inline]
  pub fn PageRelativeOffset(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
  }
  #[inline]
  pub fn set_PageRelativeOffset(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 12u8, val as u64)
    }
  }
  #[inline]
  pub fn IndirectCall(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_IndirectCall(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(12usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn IATIndex(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 19u8) as u32) }
  }
  #[inline]
  pub fn set_IATIndex(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(13usize, 19u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    PageRelativeOffset: DWORD,
    IndirectCall: DWORD,
    IATIndex: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 12u8, {
      let PageRelativeOffset: u32 = unsafe { ::std::mem::transmute(PageRelativeOffset) };
      PageRelativeOffset as u64
    });
    __bindgen_bitfield_unit.set(12usize, 1u8, {
      let IndirectCall: u32 = unsafe { ::std::mem::transmute(IndirectCall) };
      IndirectCall as u64
    });
    __bindgen_bitfield_unit.set(13usize, 19u8, {
      let IATIndex: u32 = unsafe { ::std::mem::transmute(IATIndex) };
      IATIndex as u64
    });
    __bindgen_bitfield_unit
  }
}
pub type IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
  _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub type PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
  *mut IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION>(),
    2usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION)
    )
  );
}
impl _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
  #[inline]
  pub fn PageRelativeOffset(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u16) }
  }
  #[inline]
  pub fn set_PageRelativeOffset(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 12u8, val as u64)
    }
  }
  #[inline]
  pub fn IndirectCall(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_IndirectCall(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(12usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn RexWPrefix(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_RexWPrefix(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(13usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn CfgCheck(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_CfgCheck(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(14usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_Reserved(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(15usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    PageRelativeOffset: WORD,
    IndirectCall: WORD,
    RexWPrefix: WORD,
    CfgCheck: WORD,
    Reserved: WORD,
  ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 12u8, {
      let PageRelativeOffset: u16 = unsafe { ::std::mem::transmute(PageRelativeOffset) };
      PageRelativeOffset as u64
    });
    __bindgen_bitfield_unit.set(12usize, 1u8, {
      let IndirectCall: u16 = unsafe { ::std::mem::transmute(IndirectCall) };
      IndirectCall as u64
    });
    __bindgen_bitfield_unit.set(13usize, 1u8, {
      let RexWPrefix: u16 = unsafe { ::std::mem::transmute(RexWPrefix) };
      RexWPrefix as u64
    });
    __bindgen_bitfield_unit.set(14usize, 1u8, {
      let CfgCheck: u16 = unsafe { ::std::mem::transmute(CfgCheck) };
      CfgCheck as u64
    });
    __bindgen_bitfield_unit.set(15usize, 1u8, {
      let Reserved: u16 = unsafe { ::std::mem::transmute(Reserved) };
      Reserved as u64
    });
    __bindgen_bitfield_unit
  }
}
pub type IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
  _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub type PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
  *mut IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION>(),
    2usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION)
    )
  );
}
impl _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
  #[inline]
  pub fn PageRelativeOffset(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u16) }
  }
  #[inline]
  pub fn set_PageRelativeOffset(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 12u8, val as u64)
    }
  }
  #[inline]
  pub fn RegisterNumber(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u16) }
  }
  #[inline]
  pub fn set_RegisterNumber(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(12usize, 4u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    PageRelativeOffset: WORD,
    RegisterNumber: WORD,
  ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 12u8, {
      let PageRelativeOffset: u16 = unsafe { ::std::mem::transmute(PageRelativeOffset) };
      PageRelativeOffset as u64
    });
    __bindgen_bitfield_unit.set(12usize, 4u8, {
      let RegisterNumber: u16 = unsafe { ::std::mem::transmute(RegisterNumber) };
      RegisterNumber as u64
    });
    __bindgen_bitfield_unit
  }
}
pub type IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
pub type PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION =
  *mut IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_FUNCTION_OVERRIDE_HEADER {
  pub FuncOverrideSize: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_FUNCTION_OVERRIDE_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_FUNCTION_OVERRIDE_HEADER> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_FUNCTION_OVERRIDE_HEADER>(),
    4usize,
    concat!("Size of: ", stringify!(_IMAGE_FUNCTION_OVERRIDE_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_FUNCTION_OVERRIDE_HEADER>(),
    1usize,
    concat!("Alignment of ", stringify!(_IMAGE_FUNCTION_OVERRIDE_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FuncOverrideSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_OVERRIDE_HEADER),
      "::",
      stringify!(FuncOverrideSize)
    )
  );
}
pub type IMAGE_FUNCTION_OVERRIDE_HEADER = _IMAGE_FUNCTION_OVERRIDE_HEADER;
pub type PIMAGE_FUNCTION_OVERRIDE_HEADER = *mut IMAGE_FUNCTION_OVERRIDE_HEADER;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION {
  pub OriginalRva: DWORD,
  pub BDDOffset: DWORD,
  pub RvaSize: DWORD,
  pub BaseRelocSize: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION>(),
    1usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OriginalRva) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION),
      "::",
      stringify!(OriginalRva)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BDDOffset) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION),
      "::",
      stringify!(BDDOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RvaSize) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION),
      "::",
      stringify!(RvaSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseRelocSize) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION),
      "::",
      stringify!(BaseRelocSize)
    )
  );
}
pub type IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION = _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION;
pub type PIMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION =
  *mut IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_BDD_INFO {
  pub Version: DWORD,
  pub BDDSize: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_BDD_INFO() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_BDD_INFO> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_BDD_INFO>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_BDD_INFO))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_BDD_INFO>(),
    1usize,
    concat!("Alignment of ", stringify!(_IMAGE_BDD_INFO))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BDD_INFO),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BDDSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BDD_INFO),
      "::",
      stringify!(BDDSize)
    )
  );
}
pub type IMAGE_BDD_INFO = _IMAGE_BDD_INFO;
pub type PIMAGE_BDD_INFO = *mut IMAGE_BDD_INFO;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_BDD_DYNAMIC_RELOCATION {
  pub Left: WORD,
  pub Right: WORD,
  pub Value: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_BDD_DYNAMIC_RELOCATION() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_BDD_DYNAMIC_RELOCATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_BDD_DYNAMIC_RELOCATION>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_BDD_DYNAMIC_RELOCATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_BDD_DYNAMIC_RELOCATION>(),
    1usize,
    concat!("Alignment of ", stringify!(_IMAGE_BDD_DYNAMIC_RELOCATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Left) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BDD_DYNAMIC_RELOCATION),
      "::",
      stringify!(Left)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Right) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BDD_DYNAMIC_RELOCATION),
      "::",
      stringify!(Right)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_BDD_DYNAMIC_RELOCATION),
      "::",
      stringify!(Value)
    )
  );
}
pub type IMAGE_BDD_DYNAMIC_RELOCATION = _IMAGE_BDD_DYNAMIC_RELOCATION;
pub type PIMAGE_BDD_DYNAMIC_RELOCATION = *mut IMAGE_BDD_DYNAMIC_RELOCATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
  pub Size: DWORD,
  pub TimeDateStamp: DWORD,
  pub MajorVersion: WORD,
  pub MinorVersion: WORD,
  pub GlobalFlagsClear: DWORD,
  pub GlobalFlagsSet: DWORD,
  pub CriticalSectionDefaultTimeout: DWORD,
  pub DeCommitFreeBlockThreshold: DWORD,
  pub DeCommitTotalFreeThreshold: DWORD,
  pub LockPrefixTable: DWORD,
  pub MaximumAllocationSize: DWORD,
  pub VirtualMemoryThreshold: DWORD,
  pub ProcessHeapFlags: DWORD,
  pub ProcessAffinityMask: DWORD,
  pub CSDVersion: WORD,
  pub DependentLoadFlags: WORD,
  pub EditList: DWORD,
  pub SecurityCookie: DWORD,
  pub SEHandlerTable: DWORD,
  pub SEHandlerCount: DWORD,
  pub GuardCFCheckFunctionPointer: DWORD,
  pub GuardCFDispatchFunctionPointer: DWORD,
  pub GuardCFFunctionTable: DWORD,
  pub GuardCFFunctionCount: DWORD,
  pub GuardFlags: DWORD,
  pub CodeIntegrity: IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
  pub GuardAddressTakenIatEntryTable: DWORD,
  pub GuardAddressTakenIatEntryCount: DWORD,
  pub GuardLongJumpTargetTable: DWORD,
  pub GuardLongJumpTargetCount: DWORD,
  pub DynamicValueRelocTable: DWORD,
  pub CHPEMetadataPointer: DWORD,
  pub GuardRFFailureRoutine: DWORD,
  pub GuardRFFailureRoutineFunctionPointer: DWORD,
  pub DynamicValueRelocTableOffset: DWORD,
  pub DynamicValueRelocTableSection: WORD,
  pub Reserved2: WORD,
  pub GuardRFVerifyStackPointerFunctionPointer: DWORD,
  pub HotPatchTableOffset: DWORD,
  pub Reserved3: DWORD,
  pub EnclaveConfigurationPointer: DWORD,
  pub VolatileMetadataPointer: DWORD,
  pub GuardEHContinuationTable: DWORD,
  pub GuardEHContinuationCount: DWORD,
  pub GuardXFGCheckFunctionPointer: DWORD,
  pub GuardXFGDispatchFunctionPointer: DWORD,
  pub GuardXFGTableDispatchFunctionPointer: DWORD,
  pub CastGuardOsDeterminedFailureMode: DWORD,
  pub GuardMemcpyFunctionPointer: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_LOAD_CONFIG_DIRECTORY32() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_LOAD_CONFIG_DIRECTORY32> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_LOAD_CONFIG_DIRECTORY32>(),
    192usize,
    concat!("Size of: ", stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_LOAD_CONFIG_DIRECTORY32>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorVersion) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(MajorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorVersion) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(MinorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GlobalFlagsClear) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GlobalFlagsClear)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GlobalFlagsSet) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GlobalFlagsSet)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CriticalSectionDefaultTimeout) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(CriticalSectionDefaultTimeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DeCommitFreeBlockThreshold) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(DeCommitFreeBlockThreshold)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DeCommitTotalFreeThreshold) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(DeCommitTotalFreeThreshold)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LockPrefixTable) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(LockPrefixTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumAllocationSize) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(MaximumAllocationSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VirtualMemoryThreshold) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(VirtualMemoryThreshold)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessHeapFlags) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(ProcessHeapFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessAffinityMask) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(ProcessAffinityMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CSDVersion) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(CSDVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DependentLoadFlags) as usize - ptr as usize },
    54usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(DependentLoadFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EditList) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(EditList)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SecurityCookie) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(SecurityCookie)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SEHandlerTable) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(SEHandlerTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SEHandlerCount) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(SEHandlerCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardCFCheckFunctionPointer) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardCFCheckFunctionPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardCFDispatchFunctionPointer) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardCFDispatchFunctionPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardCFFunctionTable) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardCFFunctionTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardCFFunctionCount) as usize - ptr as usize },
    84usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardCFFunctionCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardFlags) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CodeIntegrity) as usize - ptr as usize },
    92usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(CodeIntegrity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardAddressTakenIatEntryTable) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardAddressTakenIatEntryTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardAddressTakenIatEntryCount) as usize - ptr as usize },
    108usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardAddressTakenIatEntryCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardLongJumpTargetTable) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardLongJumpTargetTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardLongJumpTargetCount) as usize - ptr as usize },
    116usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardLongJumpTargetCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DynamicValueRelocTable) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(DynamicValueRelocTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CHPEMetadataPointer) as usize - ptr as usize },
    124usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(CHPEMetadataPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardRFFailureRoutine) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardRFFailureRoutine)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).GuardRFFailureRoutineFunctionPointer) as usize - ptr as usize
    },
    132usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardRFFailureRoutineFunctionPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DynamicValueRelocTableOffset) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(DynamicValueRelocTableOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DynamicValueRelocTableSection) as usize - ptr as usize },
    140usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(DynamicValueRelocTableSection)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    142usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(Reserved2)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).GuardRFVerifyStackPointerFunctionPointer) as usize - ptr as usize
    },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardRFVerifyStackPointerFunctionPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HotPatchTableOffset) as usize - ptr as usize },
    148usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(HotPatchTableOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(Reserved3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnclaveConfigurationPointer) as usize - ptr as usize },
    156usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(EnclaveConfigurationPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VolatileMetadataPointer) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(VolatileMetadataPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardEHContinuationTable) as usize - ptr as usize },
    164usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardEHContinuationTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardEHContinuationCount) as usize - ptr as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardEHContinuationCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardXFGCheckFunctionPointer) as usize - ptr as usize },
    172usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardXFGCheckFunctionPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardXFGDispatchFunctionPointer) as usize - ptr as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardXFGDispatchFunctionPointer)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).GuardXFGTableDispatchFunctionPointer) as usize - ptr as usize
    },
    180usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardXFGTableDispatchFunctionPointer)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).CastGuardOsDeterminedFailureMode) as usize - ptr as usize
    },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(CastGuardOsDeterminedFailureMode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardMemcpyFunctionPointer) as usize - ptr as usize },
    188usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY32),
      "::",
      stringify!(GuardMemcpyFunctionPointer)
    )
  );
}
pub type IMAGE_LOAD_CONFIG_DIRECTORY32 = _IMAGE_LOAD_CONFIG_DIRECTORY32;
pub type PIMAGE_LOAD_CONFIG_DIRECTORY32 = *mut _IMAGE_LOAD_CONFIG_DIRECTORY32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
  pub Size: DWORD,
  pub TimeDateStamp: DWORD,
  pub MajorVersion: WORD,
  pub MinorVersion: WORD,
  pub GlobalFlagsClear: DWORD,
  pub GlobalFlagsSet: DWORD,
  pub CriticalSectionDefaultTimeout: DWORD,
  pub DeCommitFreeBlockThreshold: ULONGLONG,
  pub DeCommitTotalFreeThreshold: ULONGLONG,
  pub LockPrefixTable: ULONGLONG,
  pub MaximumAllocationSize: ULONGLONG,
  pub VirtualMemoryThreshold: ULONGLONG,
  pub ProcessAffinityMask: ULONGLONG,
  pub ProcessHeapFlags: DWORD,
  pub CSDVersion: WORD,
  pub DependentLoadFlags: WORD,
  pub EditList: ULONGLONG,
  pub SecurityCookie: ULONGLONG,
  pub SEHandlerTable: ULONGLONG,
  pub SEHandlerCount: ULONGLONG,
  pub GuardCFCheckFunctionPointer: ULONGLONG,
  pub GuardCFDispatchFunctionPointer: ULONGLONG,
  pub GuardCFFunctionTable: ULONGLONG,
  pub GuardCFFunctionCount: ULONGLONG,
  pub GuardFlags: DWORD,
  pub CodeIntegrity: IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
  pub GuardAddressTakenIatEntryTable: ULONGLONG,
  pub GuardAddressTakenIatEntryCount: ULONGLONG,
  pub GuardLongJumpTargetTable: ULONGLONG,
  pub GuardLongJumpTargetCount: ULONGLONG,
  pub DynamicValueRelocTable: ULONGLONG,
  pub CHPEMetadataPointer: ULONGLONG,
  pub GuardRFFailureRoutine: ULONGLONG,
  pub GuardRFFailureRoutineFunctionPointer: ULONGLONG,
  pub DynamicValueRelocTableOffset: DWORD,
  pub DynamicValueRelocTableSection: WORD,
  pub Reserved2: WORD,
  pub GuardRFVerifyStackPointerFunctionPointer: ULONGLONG,
  pub HotPatchTableOffset: DWORD,
  pub Reserved3: DWORD,
  pub EnclaveConfigurationPointer: ULONGLONG,
  pub VolatileMetadataPointer: ULONGLONG,
  pub GuardEHContinuationTable: ULONGLONG,
  pub GuardEHContinuationCount: ULONGLONG,
  pub GuardXFGCheckFunctionPointer: ULONGLONG,
  pub GuardXFGDispatchFunctionPointer: ULONGLONG,
  pub GuardXFGTableDispatchFunctionPointer: ULONGLONG,
  pub CastGuardOsDeterminedFailureMode: ULONGLONG,
  pub GuardMemcpyFunctionPointer: ULONGLONG,
}
#[test]
fn bindgen_test_layout__IMAGE_LOAD_CONFIG_DIRECTORY64() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_LOAD_CONFIG_DIRECTORY64> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_LOAD_CONFIG_DIRECTORY64>(),
    320usize,
    concat!("Size of: ", stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_LOAD_CONFIG_DIRECTORY64>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorVersion) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(MajorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorVersion) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(MinorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GlobalFlagsClear) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GlobalFlagsClear)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GlobalFlagsSet) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GlobalFlagsSet)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CriticalSectionDefaultTimeout) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(CriticalSectionDefaultTimeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DeCommitFreeBlockThreshold) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(DeCommitFreeBlockThreshold)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DeCommitTotalFreeThreshold) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(DeCommitTotalFreeThreshold)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LockPrefixTable) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(LockPrefixTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumAllocationSize) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(MaximumAllocationSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VirtualMemoryThreshold) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(VirtualMemoryThreshold)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessAffinityMask) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(ProcessAffinityMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessHeapFlags) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(ProcessHeapFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CSDVersion) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(CSDVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DependentLoadFlags) as usize - ptr as usize },
    78usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(DependentLoadFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EditList) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(EditList)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SecurityCookie) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(SecurityCookie)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SEHandlerTable) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(SEHandlerTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SEHandlerCount) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(SEHandlerCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardCFCheckFunctionPointer) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardCFCheckFunctionPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardCFDispatchFunctionPointer) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardCFDispatchFunctionPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardCFFunctionTable) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardCFFunctionTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardCFFunctionCount) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardCFFunctionCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardFlags) as usize - ptr as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CodeIntegrity) as usize - ptr as usize },
    148usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(CodeIntegrity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardAddressTakenIatEntryTable) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardAddressTakenIatEntryTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardAddressTakenIatEntryCount) as usize - ptr as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardAddressTakenIatEntryCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardLongJumpTargetTable) as usize - ptr as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardLongJumpTargetTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardLongJumpTargetCount) as usize - ptr as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardLongJumpTargetCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DynamicValueRelocTable) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(DynamicValueRelocTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CHPEMetadataPointer) as usize - ptr as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(CHPEMetadataPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardRFFailureRoutine) as usize - ptr as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardRFFailureRoutine)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).GuardRFFailureRoutineFunctionPointer) as usize - ptr as usize
    },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardRFFailureRoutineFunctionPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DynamicValueRelocTableOffset) as usize - ptr as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(DynamicValueRelocTableOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DynamicValueRelocTableSection) as usize - ptr as usize },
    228usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(DynamicValueRelocTableSection)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    230usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(Reserved2)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).GuardRFVerifyStackPointerFunctionPointer) as usize - ptr as usize
    },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardRFVerifyStackPointerFunctionPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HotPatchTableOffset) as usize - ptr as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(HotPatchTableOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize },
    244usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(Reserved3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnclaveConfigurationPointer) as usize - ptr as usize },
    248usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(EnclaveConfigurationPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VolatileMetadataPointer) as usize - ptr as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(VolatileMetadataPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardEHContinuationTable) as usize - ptr as usize },
    264usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardEHContinuationTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardEHContinuationCount) as usize - ptr as usize },
    272usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardEHContinuationCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardXFGCheckFunctionPointer) as usize - ptr as usize },
    280usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardXFGCheckFunctionPointer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardXFGDispatchFunctionPointer) as usize - ptr as usize },
    288usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardXFGDispatchFunctionPointer)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).GuardXFGTableDispatchFunctionPointer) as usize - ptr as usize
    },
    296usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardXFGTableDispatchFunctionPointer)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).CastGuardOsDeterminedFailureMode) as usize - ptr as usize
    },
    304usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(CastGuardOsDeterminedFailureMode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GuardMemcpyFunctionPointer) as usize - ptr as usize },
    312usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_LOAD_CONFIG_DIRECTORY64),
      "::",
      stringify!(GuardMemcpyFunctionPointer)
    )
  );
}
pub type IMAGE_LOAD_CONFIG_DIRECTORY64 = _IMAGE_LOAD_CONFIG_DIRECTORY64;
pub type PIMAGE_LOAD_CONFIG_DIRECTORY64 = *mut _IMAGE_LOAD_CONFIG_DIRECTORY64;
pub type IMAGE_LOAD_CONFIG_DIRECTORY = IMAGE_LOAD_CONFIG_DIRECTORY64;
pub type PIMAGE_LOAD_CONFIG_DIRECTORY = PIMAGE_LOAD_CONFIG_DIRECTORY64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_HOT_PATCH_INFO {
  pub Version: DWORD,
  pub Size: DWORD,
  pub SequenceNumber: DWORD,
  pub BaseImageList: DWORD,
  pub BaseImageCount: DWORD,
  pub BufferOffset: DWORD,
  pub ExtraPatchSize: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_HOT_PATCH_INFO() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_HOT_PATCH_INFO> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_HOT_PATCH_INFO>(),
    28usize,
    concat!("Size of: ", stringify!(_IMAGE_HOT_PATCH_INFO))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_HOT_PATCH_INFO>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_HOT_PATCH_INFO))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_INFO),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_INFO),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SequenceNumber) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_INFO),
      "::",
      stringify!(SequenceNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseImageList) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_INFO),
      "::",
      stringify!(BaseImageList)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseImageCount) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_INFO),
      "::",
      stringify!(BaseImageCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BufferOffset) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_INFO),
      "::",
      stringify!(BufferOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExtraPatchSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_INFO),
      "::",
      stringify!(ExtraPatchSize)
    )
  );
}
pub type IMAGE_HOT_PATCH_INFO = _IMAGE_HOT_PATCH_INFO;
pub type PIMAGE_HOT_PATCH_INFO = *mut _IMAGE_HOT_PATCH_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_HOT_PATCH_BASE {
  pub SequenceNumber: DWORD,
  pub Flags: DWORD,
  pub OriginalTimeDateStamp: DWORD,
  pub OriginalCheckSum: DWORD,
  pub CodeIntegrityInfo: DWORD,
  pub CodeIntegritySize: DWORD,
  pub PatchTable: DWORD,
  pub BufferOffset: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_HOT_PATCH_BASE() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_HOT_PATCH_BASE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_HOT_PATCH_BASE>(),
    32usize,
    concat!("Size of: ", stringify!(_IMAGE_HOT_PATCH_BASE))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_HOT_PATCH_BASE>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_HOT_PATCH_BASE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SequenceNumber) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_BASE),
      "::",
      stringify!(SequenceNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_BASE),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OriginalTimeDateStamp) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_BASE),
      "::",
      stringify!(OriginalTimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OriginalCheckSum) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_BASE),
      "::",
      stringify!(OriginalCheckSum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CodeIntegrityInfo) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_BASE),
      "::",
      stringify!(CodeIntegrityInfo)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CodeIntegritySize) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_BASE),
      "::",
      stringify!(CodeIntegritySize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PatchTable) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_BASE),
      "::",
      stringify!(PatchTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BufferOffset) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_BASE),
      "::",
      stringify!(BufferOffset)
    )
  );
}
pub type IMAGE_HOT_PATCH_BASE = _IMAGE_HOT_PATCH_BASE;
pub type PIMAGE_HOT_PATCH_BASE = *mut _IMAGE_HOT_PATCH_BASE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_HOT_PATCH_HASHES {
  pub SHA256: [BYTE; 32usize],
  pub SHA1: [BYTE; 20usize],
}
#[test]
fn bindgen_test_layout__IMAGE_HOT_PATCH_HASHES() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_HOT_PATCH_HASHES> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_HOT_PATCH_HASHES>(),
    52usize,
    concat!("Size of: ", stringify!(_IMAGE_HOT_PATCH_HASHES))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_HOT_PATCH_HASHES>(),
    1usize,
    concat!("Alignment of ", stringify!(_IMAGE_HOT_PATCH_HASHES))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SHA256) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_HASHES),
      "::",
      stringify!(SHA256)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SHA1) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_HOT_PATCH_HASHES),
      "::",
      stringify!(SHA1)
    )
  );
}
pub type IMAGE_HOT_PATCH_HASHES = _IMAGE_HOT_PATCH_HASHES;
pub type PIMAGE_HOT_PATCH_HASHES = *mut _IMAGE_HOT_PATCH_HASHES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
  pub FuncStart: DWORD,
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_CE_RUNTIME_FUNCTION_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_CE_RUNTIME_FUNCTION_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_CE_RUNTIME_FUNCTION_ENTRY>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_CE_RUNTIME_FUNCTION_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_CE_RUNTIME_FUNCTION_ENTRY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_CE_RUNTIME_FUNCTION_ENTRY)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FuncStart) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_CE_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(FuncStart)
    )
  );
}
impl _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
  #[inline]
  pub fn PrologLen(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_PrologLen(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn FuncLen(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 22u8) as u32) }
  }
  #[inline]
  pub fn set_FuncLen(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 22u8, val as u64)
    }
  }
  #[inline]
  pub fn ThirtyTwoBit(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_ThirtyTwoBit(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(30usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn ExceptionFlag(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_ExceptionFlag(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(31usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    PrologLen: DWORD,
    FuncLen: DWORD,
    ThirtyTwoBit: DWORD,
    ExceptionFlag: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 8u8, {
      let PrologLen: u32 = unsafe { ::std::mem::transmute(PrologLen) };
      PrologLen as u64
    });
    __bindgen_bitfield_unit.set(8usize, 22u8, {
      let FuncLen: u32 = unsafe { ::std::mem::transmute(FuncLen) };
      FuncLen as u64
    });
    __bindgen_bitfield_unit.set(30usize, 1u8, {
      let ThirtyTwoBit: u32 = unsafe { ::std::mem::transmute(ThirtyTwoBit) };
      ThirtyTwoBit as u64
    });
    __bindgen_bitfield_unit.set(31usize, 1u8, {
      let ExceptionFlag: u32 = unsafe { ::std::mem::transmute(ExceptionFlag) };
      ExceptionFlag as u64
    });
    __bindgen_bitfield_unit
  }
}
pub type IMAGE_CE_RUNTIME_FUNCTION_ENTRY = _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
  pub BeginAddress: DWORD,
  pub __bindgen_anon_1: _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1 {
  pub UnwindData: DWORD,
  pub __bindgen_anon_1: _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u16; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn Flag(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
  }
  #[inline]
  pub fn set_Flag(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn FunctionLength(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 11u8) as u32) }
  }
  #[inline]
  pub fn set_FunctionLength(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 11u8, val as u64)
    }
  }
  #[inline]
  pub fn Ret(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
  }
  #[inline]
  pub fn set_Ret(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(13usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn H(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_H(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(15usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Reg(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 3u8) as u32) }
  }
  #[inline]
  pub fn set_Reg(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(16usize, 3u8, val as u64)
    }
  }
  #[inline]
  pub fn R(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_R(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(19usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn L(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_L(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(20usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn C(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_C(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(21usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn StackAdjust(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
  }
  #[inline]
  pub fn set_StackAdjust(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(22usize, 10u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    Flag: DWORD,
    FunctionLength: DWORD,
    Ret: DWORD,
    H: DWORD,
    Reg: DWORD,
    R: DWORD,
    L: DWORD,
    C: DWORD,
    StackAdjust: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 2u8, {
      let Flag: u32 = unsafe { ::std::mem::transmute(Flag) };
      Flag as u64
    });
    __bindgen_bitfield_unit.set(2usize, 11u8, {
      let FunctionLength: u32 = unsafe { ::std::mem::transmute(FunctionLength) };
      FunctionLength as u64
    });
    __bindgen_bitfield_unit.set(13usize, 2u8, {
      let Ret: u32 = unsafe { ::std::mem::transmute(Ret) };
      Ret as u64
    });
    __bindgen_bitfield_unit.set(15usize, 1u8, {
      let H: u32 = unsafe { ::std::mem::transmute(H) };
      H as u64
    });
    __bindgen_bitfield_unit.set(16usize, 3u8, {
      let Reg: u32 = unsafe { ::std::mem::transmute(Reg) };
      Reg as u64
    });
    __bindgen_bitfield_unit.set(19usize, 1u8, {
      let R: u32 = unsafe { ::std::mem::transmute(R) };
      R as u64
    });
    __bindgen_bitfield_unit.set(20usize, 1u8, {
      let L: u32 = unsafe { ::std::mem::transmute(L) };
      L as u64
    });
    __bindgen_bitfield_unit.set(21usize, 1u8, {
      let C: u32 = unsafe { ::std::mem::transmute(C) };
      C as u64
    });
    __bindgen_bitfield_unit.set(22usize, 10u8, {
      let StackAdjust: u32 = unsafe { ::std::mem::transmute(StackAdjust) };
      StackAdjust as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UnwindData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1),
      "::",
      stringify!(UnwindData)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BeginAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(BeginAddress)
    )
  );
}
pub type IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
pub const ARM64_FNPDATA_FLAGS_PdataRefToFullXdata: ARM64_FNPDATA_FLAGS = 0;
pub const ARM64_FNPDATA_FLAGS_PdataPackedUnwindFunction: ARM64_FNPDATA_FLAGS = 1;
pub const ARM64_FNPDATA_FLAGS_PdataPackedUnwindFragment: ARM64_FNPDATA_FLAGS = 2;
pub type ARM64_FNPDATA_FLAGS = ::std::os::raw::c_int;
pub const ARM64_FNPDATA_CR_PdataCrUnchained: ARM64_FNPDATA_CR = 0;
pub const ARM64_FNPDATA_CR_PdataCrUnchainedSavedLr: ARM64_FNPDATA_CR = 1;
pub const ARM64_FNPDATA_CR_PdataCrChainedWithPac: ARM64_FNPDATA_CR = 2;
pub const ARM64_FNPDATA_CR_PdataCrChained: ARM64_FNPDATA_CR = 3;
pub type ARM64_FNPDATA_CR = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
  pub BeginAddress: DWORD,
  pub __bindgen_anon_1: _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1 {
  pub UnwindData: DWORD,
  pub __bindgen_anon_1: _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u16; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn Flag(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
  }
  #[inline]
  pub fn set_Flag(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn FunctionLength(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 11u8) as u32) }
  }
  #[inline]
  pub fn set_FunctionLength(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 11u8, val as u64)
    }
  }
  #[inline]
  pub fn RegF(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u32) }
  }
  #[inline]
  pub fn set_RegF(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(13usize, 3u8, val as u64)
    }
  }
  #[inline]
  pub fn RegI(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
  }
  #[inline]
  pub fn set_RegI(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(16usize, 4u8, val as u64)
    }
  }
  #[inline]
  pub fn H(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_H(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(20usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn CR(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 2u8) as u32) }
  }
  #[inline]
  pub fn set_CR(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(21usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn FrameSize(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 9u8) as u32) }
  }
  #[inline]
  pub fn set_FrameSize(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(23usize, 9u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    Flag: DWORD,
    FunctionLength: DWORD,
    RegF: DWORD,
    RegI: DWORD,
    H: DWORD,
    CR: DWORD,
    FrameSize: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 2u8, {
      let Flag: u32 = unsafe { ::std::mem::transmute(Flag) };
      Flag as u64
    });
    __bindgen_bitfield_unit.set(2usize, 11u8, {
      let FunctionLength: u32 = unsafe { ::std::mem::transmute(FunctionLength) };
      FunctionLength as u64
    });
    __bindgen_bitfield_unit.set(13usize, 3u8, {
      let RegF: u32 = unsafe { ::std::mem::transmute(RegF) };
      RegF as u64
    });
    __bindgen_bitfield_unit.set(16usize, 4u8, {
      let RegI: u32 = unsafe { ::std::mem::transmute(RegI) };
      RegI as u64
    });
    __bindgen_bitfield_unit.set(20usize, 1u8, {
      let H: u32 = unsafe { ::std::mem::transmute(H) };
      H as u64
    });
    __bindgen_bitfield_unit.set(21usize, 2u8, {
      let CR: u32 = unsafe { ::std::mem::transmute(CR) };
      CR as u64
    });
    __bindgen_bitfield_unit.set(23usize, 9u8, {
      let FrameSize: u32 = unsafe { ::std::mem::transmute(FrameSize) };
      FrameSize as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UnwindData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1),
      "::",
      stringify!(UnwindData)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BeginAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(BeginAddress)
    )
  );
}
pub type IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA {
  pub HeaderData: DWORD,
  pub __bindgen_anon_1: IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1)
    )
  );
}
impl IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1 {
  #[inline]
  pub fn FunctionLength(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
  }
  #[inline]
  pub fn set_FunctionLength(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 18u8, val as u64)
    }
  }
  #[inline]
  pub fn Version(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
  }
  #[inline]
  pub fn set_Version(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(18usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn ExceptionDataPresent(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_ExceptionDataPresent(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(20usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EpilogInHeader(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_EpilogInHeader(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(21usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn EpilogCount(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 5u8) as u32) }
  }
  #[inline]
  pub fn set_EpilogCount(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(22usize, 5u8, val as u64)
    }
  }
  #[inline]
  pub fn CodeWords(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
  }
  #[inline]
  pub fn set_CodeWords(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(27usize, 5u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    FunctionLength: DWORD,
    Version: DWORD,
    ExceptionDataPresent: DWORD,
    EpilogInHeader: DWORD,
    EpilogCount: DWORD,
    CodeWords: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 18u8, {
      let FunctionLength: u32 = unsafe { ::std::mem::transmute(FunctionLength) };
      FunctionLength as u64
    });
    __bindgen_bitfield_unit.set(18usize, 2u8, {
      let Version: u32 = unsafe { ::std::mem::transmute(Version) };
      Version as u64
    });
    __bindgen_bitfield_unit.set(20usize, 1u8, {
      let ExceptionDataPresent: u32 = unsafe { ::std::mem::transmute(ExceptionDataPresent) };
      ExceptionDataPresent as u64
    });
    __bindgen_bitfield_unit.set(21usize, 1u8, {
      let EpilogInHeader: u32 = unsafe { ::std::mem::transmute(EpilogInHeader) };
      EpilogInHeader as u64
    });
    __bindgen_bitfield_unit.set(22usize, 5u8, {
      let EpilogCount: u32 = unsafe { ::std::mem::transmute(EpilogCount) };
      EpilogCount as u64
    });
    __bindgen_bitfield_unit.set(27usize, 5u8, {
      let CodeWords: u32 = unsafe { ::std::mem::transmute(CodeWords) };
      CodeWords as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA() {
  const UNINIT: ::std::mem::MaybeUninit<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HeaderData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA),
      "::",
      stringify!(HeaderData)
    )
  );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
  pub BeginAddress: ULONGLONG,
  pub EndAddress: ULONGLONG,
  pub ExceptionHandler: ULONGLONG,
  pub HandlerData: ULONGLONG,
  pub PrologEndAddress: ULONGLONG,
}
#[test]
fn bindgen_test_layout__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY>(),
    40usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BeginAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(BeginAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndAddress) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(EndAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionHandler) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(ExceptionHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HandlerData) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(HandlerData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrologEndAddress) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(PrologEndAddress)
    )
  );
}
pub type IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
  pub BeginAddress: DWORD,
  pub EndAddress: DWORD,
  pub ExceptionHandler: DWORD,
  pub HandlerData: DWORD,
  pub PrologEndAddress: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY>(),
    20usize,
    concat!("Size of: ", stringify!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BeginAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(BeginAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndAddress) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(EndAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExceptionHandler) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(ExceptionHandler)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HandlerData) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(HandlerData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PrologEndAddress) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(PrologEndAddress)
    )
  );
}
pub type IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
  pub BeginAddress: DWORD,
  pub EndAddress: DWORD,
  pub __bindgen_anon_1: _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1 {
  pub UnwindInfoAddress: DWORD,
  pub UnwindData: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UnwindInfoAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1),
      "::",
      stringify!(UnwindInfoAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UnwindData) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1),
      "::",
      stringify!(UnwindData)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_RUNTIME_FUNCTION_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RUNTIME_FUNCTION_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_RUNTIME_FUNCTION_ENTRY>(),
    12usize,
    concat!("Size of: ", stringify!(_IMAGE_RUNTIME_FUNCTION_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_RUNTIME_FUNCTION_ENTRY>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_RUNTIME_FUNCTION_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BeginAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(BeginAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndAddress) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_RUNTIME_FUNCTION_ENTRY),
      "::",
      stringify!(EndAddress)
    )
  );
}
pub type _PIMAGE_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type IMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY;
pub type IMAGE_AMD64_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_AMD64_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY;
pub type IMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ENCLAVE_CONFIG32 {
  pub Size: DWORD,
  pub MinimumRequiredConfigSize: DWORD,
  pub PolicyFlags: DWORD,
  pub NumberOfImports: DWORD,
  pub ImportList: DWORD,
  pub ImportEntrySize: DWORD,
  pub FamilyID: [BYTE; 16usize],
  pub ImageID: [BYTE; 16usize],
  pub ImageVersion: DWORD,
  pub SecurityVersion: DWORD,
  pub EnclaveSize: DWORD,
  pub NumberOfThreads: DWORD,
  pub EnclaveFlags: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_ENCLAVE_CONFIG32() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ENCLAVE_CONFIG32> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ENCLAVE_CONFIG32>(),
    76usize,
    concat!("Size of: ", stringify!(_IMAGE_ENCLAVE_CONFIG32))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ENCLAVE_CONFIG32>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_ENCLAVE_CONFIG32))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinimumRequiredConfigSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(MinimumRequiredConfigSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PolicyFlags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(PolicyFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfImports) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(NumberOfImports)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImportList) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(ImportList)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImportEntrySize) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(ImportEntrySize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FamilyID) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(FamilyID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageID) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(ImageID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageVersion) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(ImageVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SecurityVersion) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(SecurityVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnclaveSize) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(EnclaveSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfThreads) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(NumberOfThreads)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnclaveFlags) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG32),
      "::",
      stringify!(EnclaveFlags)
    )
  );
}
pub type IMAGE_ENCLAVE_CONFIG32 = _IMAGE_ENCLAVE_CONFIG32;
pub type PIMAGE_ENCLAVE_CONFIG32 = *mut _IMAGE_ENCLAVE_CONFIG32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ENCLAVE_CONFIG64 {
  pub Size: DWORD,
  pub MinimumRequiredConfigSize: DWORD,
  pub PolicyFlags: DWORD,
  pub NumberOfImports: DWORD,
  pub ImportList: DWORD,
  pub ImportEntrySize: DWORD,
  pub FamilyID: [BYTE; 16usize],
  pub ImageID: [BYTE; 16usize],
  pub ImageVersion: DWORD,
  pub SecurityVersion: DWORD,
  pub EnclaveSize: ULONGLONG,
  pub NumberOfThreads: DWORD,
  pub EnclaveFlags: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_ENCLAVE_CONFIG64() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ENCLAVE_CONFIG64> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ENCLAVE_CONFIG64>(),
    80usize,
    concat!("Size of: ", stringify!(_IMAGE_ENCLAVE_CONFIG64))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ENCLAVE_CONFIG64>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_ENCLAVE_CONFIG64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinimumRequiredConfigSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(MinimumRequiredConfigSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PolicyFlags) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(PolicyFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfImports) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(NumberOfImports)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImportList) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(ImportList)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImportEntrySize) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(ImportEntrySize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FamilyID) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(FamilyID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageID) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(ImageID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageVersion) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(ImageVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SecurityVersion) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(SecurityVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnclaveSize) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(EnclaveSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfThreads) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(NumberOfThreads)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnclaveFlags) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_CONFIG64),
      "::",
      stringify!(EnclaveFlags)
    )
  );
}
pub type IMAGE_ENCLAVE_CONFIG64 = _IMAGE_ENCLAVE_CONFIG64;
pub type PIMAGE_ENCLAVE_CONFIG64 = *mut _IMAGE_ENCLAVE_CONFIG64;
pub type IMAGE_ENCLAVE_CONFIG = IMAGE_ENCLAVE_CONFIG64;
pub type PIMAGE_ENCLAVE_CONFIG = PIMAGE_ENCLAVE_CONFIG64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ENCLAVE_IMPORT {
  pub MatchType: DWORD,
  pub MinimumSecurityVersion: DWORD,
  pub UniqueOrAuthorID: [BYTE; 32usize],
  pub FamilyID: [BYTE; 16usize],
  pub ImageID: [BYTE; 16usize],
  pub ImportName: DWORD,
  pub Reserved: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_ENCLAVE_IMPORT() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ENCLAVE_IMPORT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_ENCLAVE_IMPORT>(),
    80usize,
    concat!("Size of: ", stringify!(_IMAGE_ENCLAVE_IMPORT))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_ENCLAVE_IMPORT>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_ENCLAVE_IMPORT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MatchType) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_IMPORT),
      "::",
      stringify!(MatchType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinimumSecurityVersion) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_IMPORT),
      "::",
      stringify!(MinimumSecurityVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UniqueOrAuthorID) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_IMPORT),
      "::",
      stringify!(UniqueOrAuthorID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FamilyID) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_IMPORT),
      "::",
      stringify!(FamilyID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageID) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_IMPORT),
      "::",
      stringify!(ImageID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImportName) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_IMPORT),
      "::",
      stringify!(ImportName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_ENCLAVE_IMPORT),
      "::",
      stringify!(Reserved)
    )
  );
}
pub type IMAGE_ENCLAVE_IMPORT = _IMAGE_ENCLAVE_IMPORT;
pub type PIMAGE_ENCLAVE_IMPORT = *mut _IMAGE_ENCLAVE_IMPORT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DEBUG_DIRECTORY {
  pub Characteristics: DWORD,
  pub TimeDateStamp: DWORD,
  pub MajorVersion: WORD,
  pub MinorVersion: WORD,
  pub Type: DWORD,
  pub SizeOfData: DWORD,
  pub AddressOfRawData: DWORD,
  pub PointerToRawData: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_DEBUG_DIRECTORY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DEBUG_DIRECTORY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DEBUG_DIRECTORY>(),
    28usize,
    concat!("Size of: ", stringify!(_IMAGE_DEBUG_DIRECTORY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DEBUG_DIRECTORY>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_DEBUG_DIRECTORY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_DIRECTORY),
      "::",
      stringify!(Characteristics)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_DIRECTORY),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorVersion) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_DIRECTORY),
      "::",
      stringify!(MajorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorVersion) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_DIRECTORY),
      "::",
      stringify!(MinorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_DIRECTORY),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfData) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_DIRECTORY),
      "::",
      stringify!(SizeOfData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AddressOfRawData) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_DIRECTORY),
      "::",
      stringify!(AddressOfRawData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PointerToRawData) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_DIRECTORY),
      "::",
      stringify!(PointerToRawData)
    )
  );
}
pub type IMAGE_DEBUG_DIRECTORY = _IMAGE_DEBUG_DIRECTORY;
pub type PIMAGE_DEBUG_DIRECTORY = *mut _IMAGE_DEBUG_DIRECTORY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_COFF_SYMBOLS_HEADER {
  pub NumberOfSymbols: DWORD,
  pub LvaToFirstSymbol: DWORD,
  pub NumberOfLinenumbers: DWORD,
  pub LvaToFirstLinenumber: DWORD,
  pub RvaToFirstByteOfCode: DWORD,
  pub RvaToLastByteOfCode: DWORD,
  pub RvaToFirstByteOfData: DWORD,
  pub RvaToLastByteOfData: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_COFF_SYMBOLS_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_COFF_SYMBOLS_HEADER> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_COFF_SYMBOLS_HEADER>(),
    32usize,
    concat!("Size of: ", stringify!(_IMAGE_COFF_SYMBOLS_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_COFF_SYMBOLS_HEADER>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_COFF_SYMBOLS_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfSymbols) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_COFF_SYMBOLS_HEADER),
      "::",
      stringify!(NumberOfSymbols)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LvaToFirstSymbol) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_COFF_SYMBOLS_HEADER),
      "::",
      stringify!(LvaToFirstSymbol)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfLinenumbers) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_COFF_SYMBOLS_HEADER),
      "::",
      stringify!(NumberOfLinenumbers)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LvaToFirstLinenumber) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_COFF_SYMBOLS_HEADER),
      "::",
      stringify!(LvaToFirstLinenumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RvaToFirstByteOfCode) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_COFF_SYMBOLS_HEADER),
      "::",
      stringify!(RvaToFirstByteOfCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RvaToLastByteOfCode) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_COFF_SYMBOLS_HEADER),
      "::",
      stringify!(RvaToLastByteOfCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RvaToFirstByteOfData) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_COFF_SYMBOLS_HEADER),
      "::",
      stringify!(RvaToFirstByteOfData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RvaToLastByteOfData) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_COFF_SYMBOLS_HEADER),
      "::",
      stringify!(RvaToLastByteOfData)
    )
  );
}
pub type IMAGE_COFF_SYMBOLS_HEADER = _IMAGE_COFF_SYMBOLS_HEADER;
pub type PIMAGE_COFF_SYMBOLS_HEADER = *mut _IMAGE_COFF_SYMBOLS_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FPO_DATA {
  pub ulOffStart: DWORD,
  pub cbProcSize: DWORD,
  pub cdwLocals: DWORD,
  pub cdwParams: WORD,
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout__FPO_DATA() {
  const UNINIT: ::std::mem::MaybeUninit<_FPO_DATA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_FPO_DATA>(),
    16usize,
    concat!("Size of: ", stringify!(_FPO_DATA))
  );
  assert_eq!(
    ::std::mem::align_of::<_FPO_DATA>(),
    4usize,
    concat!("Alignment of ", stringify!(_FPO_DATA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulOffStart) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FPO_DATA),
      "::",
      stringify!(ulOffStart)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cbProcSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_FPO_DATA),
      "::",
      stringify!(cbProcSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cdwLocals) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_FPO_DATA),
      "::",
      stringify!(cdwLocals)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cdwParams) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_FPO_DATA),
      "::",
      stringify!(cdwParams)
    )
  );
}
impl _FPO_DATA {
  #[inline]
  pub fn cbProlog(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
  }
  #[inline]
  pub fn set_cbProlog(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn cbRegs(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u16) }
  }
  #[inline]
  pub fn set_cbRegs(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 3u8, val as u64)
    }
  }
  #[inline]
  pub fn fHasSEH(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_fHasSEH(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(11usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn fUseBP(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_fUseBP(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(12usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn reserved(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
  }
  #[inline]
  pub fn set_reserved(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(13usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn cbFrame(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
  }
  #[inline]
  pub fn set_cbFrame(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(14usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    cbProlog: WORD,
    cbRegs: WORD,
    fHasSEH: WORD,
    fUseBP: WORD,
    reserved: WORD,
    cbFrame: WORD,
  ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 8u8, {
      let cbProlog: u16 = unsafe { ::std::mem::transmute(cbProlog) };
      cbProlog as u64
    });
    __bindgen_bitfield_unit.set(8usize, 3u8, {
      let cbRegs: u16 = unsafe { ::std::mem::transmute(cbRegs) };
      cbRegs as u64
    });
    __bindgen_bitfield_unit.set(11usize, 1u8, {
      let fHasSEH: u16 = unsafe { ::std::mem::transmute(fHasSEH) };
      fHasSEH as u64
    });
    __bindgen_bitfield_unit.set(12usize, 1u8, {
      let fUseBP: u16 = unsafe { ::std::mem::transmute(fUseBP) };
      fUseBP as u64
    });
    __bindgen_bitfield_unit.set(13usize, 1u8, {
      let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
      reserved as u64
    });
    __bindgen_bitfield_unit.set(14usize, 2u8, {
      let cbFrame: u16 = unsafe { ::std::mem::transmute(cbFrame) };
      cbFrame as u64
    });
    __bindgen_bitfield_unit
  }
}
pub type FPO_DATA = _FPO_DATA;
pub type PFPO_DATA = *mut _FPO_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DEBUG_MISC {
  pub DataType: DWORD,
  pub Length: DWORD,
  pub Unicode: BOOLEAN,
  pub Reserved: [BYTE; 3usize],
  pub Data: [BYTE; 1usize],
}
#[test]
fn bindgen_test_layout__IMAGE_DEBUG_MISC() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DEBUG_MISC> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_DEBUG_MISC>(),
    16usize,
    concat!("Size of: ", stringify!(_IMAGE_DEBUG_MISC))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_DEBUG_MISC>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_DEBUG_MISC))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataType) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_MISC),
      "::",
      stringify!(DataType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_MISC),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Unicode) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_MISC),
      "::",
      stringify!(Unicode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    9usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_MISC),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_DEBUG_MISC),
      "::",
      stringify!(Data)
    )
  );
}
pub type IMAGE_DEBUG_MISC = _IMAGE_DEBUG_MISC;
pub type PIMAGE_DEBUG_MISC = *mut _IMAGE_DEBUG_MISC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_FUNCTION_ENTRY {
  pub StartingAddress: DWORD,
  pub EndingAddress: DWORD,
  pub EndOfPrologue: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_FUNCTION_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_FUNCTION_ENTRY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_FUNCTION_ENTRY>(),
    12usize,
    concat!("Size of: ", stringify!(_IMAGE_FUNCTION_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_FUNCTION_ENTRY>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_FUNCTION_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StartingAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_ENTRY),
      "::",
      stringify!(StartingAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndingAddress) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_ENTRY),
      "::",
      stringify!(EndingAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndOfPrologue) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_ENTRY),
      "::",
      stringify!(EndOfPrologue)
    )
  );
}
pub type IMAGE_FUNCTION_ENTRY = _IMAGE_FUNCTION_ENTRY;
pub type PIMAGE_FUNCTION_ENTRY = *mut _IMAGE_FUNCTION_ENTRY;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _IMAGE_FUNCTION_ENTRY64 {
  pub StartingAddress: ULONGLONG,
  pub EndingAddress: ULONGLONG,
  pub __bindgen_anon_1: _IMAGE_FUNCTION_ENTRY64__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union _IMAGE_FUNCTION_ENTRY64__bindgen_ty_1 {
  pub EndOfPrologue: ULONGLONG,
  pub UnwindInfoAddress: ULONGLONG,
}
#[test]
fn bindgen_test_layout__IMAGE_FUNCTION_ENTRY64__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndOfPrologue) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1),
      "::",
      stringify!(EndOfPrologue)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UnwindInfoAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1),
      "::",
      stringify!(UnwindInfoAddress)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_FUNCTION_ENTRY64() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_FUNCTION_ENTRY64> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_FUNCTION_ENTRY64>(),
    24usize,
    concat!("Size of: ", stringify!(_IMAGE_FUNCTION_ENTRY64))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_FUNCTION_ENTRY64>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_FUNCTION_ENTRY64))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StartingAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_ENTRY64),
      "::",
      stringify!(StartingAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EndingAddress) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_FUNCTION_ENTRY64),
      "::",
      stringify!(EndingAddress)
    )
  );
}
pub type IMAGE_FUNCTION_ENTRY64 = _IMAGE_FUNCTION_ENTRY64;
pub type PIMAGE_FUNCTION_ENTRY64 = *mut _IMAGE_FUNCTION_ENTRY64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_SEPARATE_DEBUG_HEADER {
  pub Signature: WORD,
  pub Flags: WORD,
  pub Machine: WORD,
  pub Characteristics: WORD,
  pub TimeDateStamp: DWORD,
  pub CheckSum: DWORD,
  pub ImageBase: DWORD,
  pub SizeOfImage: DWORD,
  pub NumberOfSections: DWORD,
  pub ExportedNamesSize: DWORD,
  pub DebugDirectorySize: DWORD,
  pub SectionAlignment: DWORD,
  pub Reserved: [DWORD; 2usize],
}
#[test]
fn bindgen_test_layout__IMAGE_SEPARATE_DEBUG_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SEPARATE_DEBUG_HEADER> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_SEPARATE_DEBUG_HEADER>(),
    48usize,
    concat!("Size of: ", stringify!(_IMAGE_SEPARATE_DEBUG_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_SEPARATE_DEBUG_HEADER>(),
    4usize,
    concat!("Alignment of ", stringify!(_IMAGE_SEPARATE_DEBUG_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Signature) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(Signature)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Machine) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(Machine)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(Characteristics)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CheckSum) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(CheckSum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageBase) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(ImageBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfImage) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(SizeOfImage)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfSections) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(NumberOfSections)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExportedNamesSize) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(ExportedNamesSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DebugDirectorySize) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(DebugDirectorySize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SectionAlignment) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(SectionAlignment)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_SEPARATE_DEBUG_HEADER),
      "::",
      stringify!(Reserved)
    )
  );
}
pub type IMAGE_SEPARATE_DEBUG_HEADER = _IMAGE_SEPARATE_DEBUG_HEADER;
pub type PIMAGE_SEPARATE_DEBUG_HEADER = *mut _IMAGE_SEPARATE_DEBUG_HEADER;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _NON_PAGED_DEBUG_INFO {
  pub Signature: WORD,
  pub Flags: WORD,
  pub Size: DWORD,
  pub Machine: WORD,
  pub Characteristics: WORD,
  pub TimeDateStamp: DWORD,
  pub CheckSum: DWORD,
  pub SizeOfImage: DWORD,
  pub ImageBase: ULONGLONG,
}
#[test]
fn bindgen_test_layout__NON_PAGED_DEBUG_INFO() {
  const UNINIT: ::std::mem::MaybeUninit<_NON_PAGED_DEBUG_INFO> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NON_PAGED_DEBUG_INFO>(),
    32usize,
    concat!("Size of: ", stringify!(_NON_PAGED_DEBUG_INFO))
  );
  assert_eq!(
    ::std::mem::align_of::<_NON_PAGED_DEBUG_INFO>(),
    4usize,
    concat!("Alignment of ", stringify!(_NON_PAGED_DEBUG_INFO))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Signature) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NON_PAGED_DEBUG_INFO),
      "::",
      stringify!(Signature)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_NON_PAGED_DEBUG_INFO),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_NON_PAGED_DEBUG_INFO),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Machine) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_NON_PAGED_DEBUG_INFO),
      "::",
      stringify!(Machine)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_NON_PAGED_DEBUG_INFO),
      "::",
      stringify!(Characteristics)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_NON_PAGED_DEBUG_INFO),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CheckSum) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_NON_PAGED_DEBUG_INFO),
      "::",
      stringify!(CheckSum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfImage) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_NON_PAGED_DEBUG_INFO),
      "::",
      stringify!(SizeOfImage)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageBase) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_NON_PAGED_DEBUG_INFO),
      "::",
      stringify!(ImageBase)
    )
  );
}
pub type NON_PAGED_DEBUG_INFO = _NON_PAGED_DEBUG_INFO;
pub type PNON_PAGED_DEBUG_INFO = *mut _NON_PAGED_DEBUG_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImageArchitectureHeader {
  pub _bitfield_align_1: [u8; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
  pub FirstEntryRVA: DWORD,
}
#[test]
fn bindgen_test_layout__ImageArchitectureHeader() {
  const UNINIT: ::std::mem::MaybeUninit<_ImageArchitectureHeader> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ImageArchitectureHeader>(),
    8usize,
    concat!("Size of: ", stringify!(_ImageArchitectureHeader))
  );
  assert_eq!(
    ::std::mem::align_of::<_ImageArchitectureHeader>(),
    4usize,
    concat!("Alignment of ", stringify!(_ImageArchitectureHeader))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FirstEntryRVA) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ImageArchitectureHeader),
      "::",
      stringify!(FirstEntryRVA)
    )
  );
}
impl _ImageArchitectureHeader {
  #[inline]
  pub fn AmaskValue(&self) -> ::std::os::raw::c_uint {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_AmaskValue(&mut self, val: ::std::os::raw::c_uint) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn AmaskShift(&self) -> ::std::os::raw::c_uint {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
  }
  #[inline]
  pub fn set_AmaskShift(&mut self, val: ::std::os::raw::c_uint) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(8usize, 8u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    AmaskValue: ::std::os::raw::c_uint,
    AmaskShift: ::std::os::raw::c_uint,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let AmaskValue: u32 = unsafe { ::std::mem::transmute(AmaskValue) };
      AmaskValue as u64
    });
    __bindgen_bitfield_unit.set(8usize, 8u8, {
      let AmaskShift: u32 = unsafe { ::std::mem::transmute(AmaskShift) };
      AmaskShift as u64
    });
    __bindgen_bitfield_unit
  }
}
pub type IMAGE_ARCHITECTURE_HEADER = _ImageArchitectureHeader;
pub type PIMAGE_ARCHITECTURE_HEADER = *mut _ImageArchitectureHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImageArchitectureEntry {
  pub FixupInstRVA: DWORD,
  pub NewInst: DWORD,
}
#[test]
fn bindgen_test_layout__ImageArchitectureEntry() {
  const UNINIT: ::std::mem::MaybeUninit<_ImageArchitectureEntry> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ImageArchitectureEntry>(),
    8usize,
    concat!("Size of: ", stringify!(_ImageArchitectureEntry))
  );
  assert_eq!(
    ::std::mem::align_of::<_ImageArchitectureEntry>(),
    4usize,
    concat!("Alignment of ", stringify!(_ImageArchitectureEntry))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FixupInstRVA) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ImageArchitectureEntry),
      "::",
      stringify!(FixupInstRVA)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NewInst) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ImageArchitectureEntry),
      "::",
      stringify!(NewInst)
    )
  );
}
pub type IMAGE_ARCHITECTURE_ENTRY = _ImageArchitectureEntry;
pub type PIMAGE_ARCHITECTURE_ENTRY = *mut _ImageArchitectureEntry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMPORT_OBJECT_HEADER {
  pub Sig1: WORD,
  pub Sig2: WORD,
  pub Version: WORD,
  pub Machine: WORD,
  pub TimeDateStamp: DWORD,
  pub SizeOfData: DWORD,
  pub __bindgen_anon_1: IMPORT_OBJECT_HEADER__bindgen_ty_1,
  pub _bitfield_align_1: [u16; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMPORT_OBJECT_HEADER__bindgen_ty_1 {
  pub Ordinal: WORD,
  pub Hint: WORD,
}
#[test]
fn bindgen_test_layout_IMPORT_OBJECT_HEADER__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<IMPORT_OBJECT_HEADER__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<IMPORT_OBJECT_HEADER__bindgen_ty_1>(),
    2usize,
    concat!("Size of: ", stringify!(IMPORT_OBJECT_HEADER__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<IMPORT_OBJECT_HEADER__bindgen_ty_1>(),
    2usize,
    concat!(
      "Alignment of ",
      stringify!(IMPORT_OBJECT_HEADER__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ordinal) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(IMPORT_OBJECT_HEADER__bindgen_ty_1),
      "::",
      stringify!(Ordinal)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Hint) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(IMPORT_OBJECT_HEADER__bindgen_ty_1),
      "::",
      stringify!(Hint)
    )
  );
}
#[test]
fn bindgen_test_layout_IMPORT_OBJECT_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<IMPORT_OBJECT_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<IMPORT_OBJECT_HEADER>(),
    20usize,
    concat!("Size of: ", stringify!(IMPORT_OBJECT_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<IMPORT_OBJECT_HEADER>(),
    4usize,
    concat!("Alignment of ", stringify!(IMPORT_OBJECT_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sig1) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(IMPORT_OBJECT_HEADER),
      "::",
      stringify!(Sig1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Sig2) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(IMPORT_OBJECT_HEADER),
      "::",
      stringify!(Sig2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(IMPORT_OBJECT_HEADER),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Machine) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(IMPORT_OBJECT_HEADER),
      "::",
      stringify!(Machine)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(IMPORT_OBJECT_HEADER),
      "::",
      stringify!(TimeDateStamp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SizeOfData) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(IMPORT_OBJECT_HEADER),
      "::",
      stringify!(SizeOfData)
    )
  );
}
impl IMPORT_OBJECT_HEADER {
  #[inline]
  pub fn Type(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
  }
  #[inline]
  pub fn set_Type(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 2u8, val as u64)
    }
  }
  #[inline]
  pub fn NameType(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u16) }
  }
  #[inline]
  pub fn set_NameType(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 3u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved(&self) -> WORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 11u8) as u16) }
  }
  #[inline]
  pub fn set_Reserved(&mut self, val: WORD) {
    unsafe {
      let val: u16 = ::std::mem::transmute(val);
      self._bitfield_1.set(5usize, 11u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    Type: WORD,
    NameType: WORD,
    Reserved: WORD,
  ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 2u8, {
      let Type: u16 = unsafe { ::std::mem::transmute(Type) };
      Type as u64
    });
    __bindgen_bitfield_unit.set(2usize, 3u8, {
      let NameType: u16 = unsafe { ::std::mem::transmute(NameType) };
      NameType as u64
    });
    __bindgen_bitfield_unit.set(5usize, 11u8, {
      let Reserved: u16 = unsafe { ::std::mem::transmute(Reserved) };
      Reserved as u64
    });
    __bindgen_bitfield_unit
  }
}
pub const IMPORT_OBJECT_TYPE_IMPORT_OBJECT_CODE: IMPORT_OBJECT_TYPE = 0;
pub const IMPORT_OBJECT_TYPE_IMPORT_OBJECT_DATA: IMPORT_OBJECT_TYPE = 1;
pub const IMPORT_OBJECT_TYPE_IMPORT_OBJECT_CONST: IMPORT_OBJECT_TYPE = 2;
pub type IMPORT_OBJECT_TYPE = ::std::os::raw::c_int;
pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_ORDINAL: IMPORT_OBJECT_NAME_TYPE = 0;
pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME: IMPORT_OBJECT_NAME_TYPE = 1;
pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME_NO_PREFIX: IMPORT_OBJECT_NAME_TYPE = 2;
pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME_UNDECORATE: IMPORT_OBJECT_NAME_TYPE = 3;
pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME_EXPORTAS: IMPORT_OBJECT_NAME_TYPE = 4;
pub type IMPORT_OBJECT_NAME_TYPE = ::std::os::raw::c_int;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_ILONLY: ReplacesCorHdrNumericDefines = 1;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_32BITREQUIRED: ReplacesCorHdrNumericDefines =
  2;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_IL_LIBRARY: ReplacesCorHdrNumericDefines = 4;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_STRONGNAMESIGNED:
  ReplacesCorHdrNumericDefines = 8;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_NATIVE_ENTRYPOINT:
  ReplacesCorHdrNumericDefines = 16;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_TRACKDEBUGDATA: ReplacesCorHdrNumericDefines =
  65536;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_32BITPREFERRED: ReplacesCorHdrNumericDefines =
  131072;
pub const ReplacesCorHdrNumericDefines_COR_VERSION_MAJOR_V2: ReplacesCorHdrNumericDefines = 2;
pub const ReplacesCorHdrNumericDefines_COR_VERSION_MAJOR: ReplacesCorHdrNumericDefines = 2;
pub const ReplacesCorHdrNumericDefines_COR_VERSION_MINOR: ReplacesCorHdrNumericDefines = 5;
pub const ReplacesCorHdrNumericDefines_COR_DELETED_NAME_LENGTH: ReplacesCorHdrNumericDefines = 8;
pub const ReplacesCorHdrNumericDefines_COR_VTABLEGAP_NAME_LENGTH: ReplacesCorHdrNumericDefines = 8;
pub const ReplacesCorHdrNumericDefines_NATIVE_TYPE_MAX_CB: ReplacesCorHdrNumericDefines = 1;
pub const ReplacesCorHdrNumericDefines_COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE:
  ReplacesCorHdrNumericDefines = 255;
pub const ReplacesCorHdrNumericDefines_IMAGE_COR_MIH_METHODRVA: ReplacesCorHdrNumericDefines = 1;
pub const ReplacesCorHdrNumericDefines_IMAGE_COR_MIH_EHRVA: ReplacesCorHdrNumericDefines = 2;
pub const ReplacesCorHdrNumericDefines_IMAGE_COR_MIH_BASICBLOCK: ReplacesCorHdrNumericDefines = 8;
pub const ReplacesCorHdrNumericDefines_COR_VTABLE_32BIT: ReplacesCorHdrNumericDefines = 1;
pub const ReplacesCorHdrNumericDefines_COR_VTABLE_64BIT: ReplacesCorHdrNumericDefines = 2;
pub const ReplacesCorHdrNumericDefines_COR_VTABLE_FROM_UNMANAGED: ReplacesCorHdrNumericDefines = 4;
pub const ReplacesCorHdrNumericDefines_COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN:
  ReplacesCorHdrNumericDefines = 8;
pub const ReplacesCorHdrNumericDefines_COR_VTABLE_CALL_MOST_DERIVED: ReplacesCorHdrNumericDefines =
  16;
pub const ReplacesCorHdrNumericDefines_IMAGE_COR_EATJ_THUNK_SIZE: ReplacesCorHdrNumericDefines = 32;
pub const ReplacesCorHdrNumericDefines_MAX_CLASS_NAME: ReplacesCorHdrNumericDefines = 1024;
pub const ReplacesCorHdrNumericDefines_MAX_PACKAGE_NAME: ReplacesCorHdrNumericDefines = 1024;
pub type ReplacesCorHdrNumericDefines = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMAGE_COR20_HEADER {
  pub cb: DWORD,
  pub MajorRuntimeVersion: WORD,
  pub MinorRuntimeVersion: WORD,
  pub MetaData: IMAGE_DATA_DIRECTORY,
  pub Flags: DWORD,
  pub __bindgen_anon_1: IMAGE_COR20_HEADER__bindgen_ty_1,
  pub Resources: IMAGE_DATA_DIRECTORY,
  pub StrongNameSignature: IMAGE_DATA_DIRECTORY,
  pub CodeManagerTable: IMAGE_DATA_DIRECTORY,
  pub VTableFixups: IMAGE_DATA_DIRECTORY,
  pub ExportAddressTableJumps: IMAGE_DATA_DIRECTORY,
  pub ManagedNativeHeader: IMAGE_DATA_DIRECTORY,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMAGE_COR20_HEADER__bindgen_ty_1 {
  pub EntryPointToken: DWORD,
  pub EntryPointRVA: DWORD,
}
#[test]
fn bindgen_test_layout_IMAGE_COR20_HEADER__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<IMAGE_COR20_HEADER__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<IMAGE_COR20_HEADER__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(IMAGE_COR20_HEADER__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<IMAGE_COR20_HEADER__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(IMAGE_COR20_HEADER__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EntryPointToken) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER__bindgen_ty_1),
      "::",
      stringify!(EntryPointToken)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EntryPointRVA) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER__bindgen_ty_1),
      "::",
      stringify!(EntryPointRVA)
    )
  );
}
#[test]
fn bindgen_test_layout_IMAGE_COR20_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<IMAGE_COR20_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<IMAGE_COR20_HEADER>(),
    72usize,
    concat!("Size of: ", stringify!(IMAGE_COR20_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<IMAGE_COR20_HEADER>(),
    4usize,
    concat!("Alignment of ", stringify!(IMAGE_COR20_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(cb)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorRuntimeVersion) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(MajorRuntimeVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorRuntimeVersion) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(MinorRuntimeVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MetaData) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(MetaData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Resources) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(Resources)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StrongNameSignature) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(StrongNameSignature)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CodeManagerTable) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(CodeManagerTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VTableFixups) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(VTableFixups)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ExportAddressTableJumps) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(ExportAddressTableJumps)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ManagedNativeHeader) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(IMAGE_COR20_HEADER),
      "::",
      stringify!(ManagedNativeHeader)
    )
  );
}
pub type PIMAGE_COR20_HEADER = *mut IMAGE_COR20_HEADER;
extern "C" {
  pub fn RtlCaptureStackBackTrace(
    FramesToSkip: DWORD,
    FramesToCapture: DWORD,
    BackTrace: *mut PVOID,
    BackTraceHash: PDWORD,
  ) -> WORD;
}
extern "C" {
  pub fn RtlCaptureContext(ContextRecord: PCONTEXT);
}
extern "C" {
  pub fn RtlCaptureContext2(ContextRecord: PCONTEXT);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UNWIND_HISTORY_TABLE_ENTRY {
  pub ImageBase: ULONG_PTR,
  pub FunctionEntry: PRUNTIME_FUNCTION,
}
#[test]
fn bindgen_test_layout__UNWIND_HISTORY_TABLE_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_UNWIND_HISTORY_TABLE_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_UNWIND_HISTORY_TABLE_ENTRY>(),
    16usize,
    concat!("Size of: ", stringify!(_UNWIND_HISTORY_TABLE_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_UNWIND_HISTORY_TABLE_ENTRY>(),
    8usize,
    concat!("Alignment of ", stringify!(_UNWIND_HISTORY_TABLE_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ImageBase) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_UNWIND_HISTORY_TABLE_ENTRY),
      "::",
      stringify!(ImageBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FunctionEntry) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_UNWIND_HISTORY_TABLE_ENTRY),
      "::",
      stringify!(FunctionEntry)
    )
  );
}
pub type UNWIND_HISTORY_TABLE_ENTRY = _UNWIND_HISTORY_TABLE_ENTRY;
pub type PUNWIND_HISTORY_TABLE_ENTRY = *mut _UNWIND_HISTORY_TABLE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UNWIND_HISTORY_TABLE {
  pub Count: DWORD,
  pub LocalHint: BYTE,
  pub GlobalHint: BYTE,
  pub Search: BYTE,
  pub Once: BYTE,
  pub LowAddress: ULONG_PTR,
  pub HighAddress: ULONG_PTR,
  pub Entry: [UNWIND_HISTORY_TABLE_ENTRY; 12usize],
}
#[test]
fn bindgen_test_layout__UNWIND_HISTORY_TABLE() {
  const UNINIT: ::std::mem::MaybeUninit<_UNWIND_HISTORY_TABLE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_UNWIND_HISTORY_TABLE>(),
    216usize,
    concat!("Size of: ", stringify!(_UNWIND_HISTORY_TABLE))
  );
  assert_eq!(
    ::std::mem::align_of::<_UNWIND_HISTORY_TABLE>(),
    8usize,
    concat!("Alignment of ", stringify!(_UNWIND_HISTORY_TABLE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_UNWIND_HISTORY_TABLE),
      "::",
      stringify!(Count)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LocalHint) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_UNWIND_HISTORY_TABLE),
      "::",
      stringify!(LocalHint)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).GlobalHint) as usize - ptr as usize },
    5usize,
    concat!(
      "Offset of field: ",
      stringify!(_UNWIND_HISTORY_TABLE),
      "::",
      stringify!(GlobalHint)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Search) as usize - ptr as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(_UNWIND_HISTORY_TABLE),
      "::",
      stringify!(Search)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Once) as usize - ptr as usize },
    7usize,
    concat!(
      "Offset of field: ",
      stringify!(_UNWIND_HISTORY_TABLE),
      "::",
      stringify!(Once)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LowAddress) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_UNWIND_HISTORY_TABLE),
      "::",
      stringify!(LowAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HighAddress) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_UNWIND_HISTORY_TABLE),
      "::",
      stringify!(HighAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Entry) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_UNWIND_HISTORY_TABLE),
      "::",
      stringify!(Entry)
    )
  );
}
pub type UNWIND_HISTORY_TABLE = _UNWIND_HISTORY_TABLE;
pub type PUNWIND_HISTORY_TABLE = *mut _UNWIND_HISTORY_TABLE;
extern "C" {
  pub fn RtlUnwind(
    TargetFrame: PVOID,
    TargetIp: PVOID,
    ExceptionRecord: PEXCEPTION_RECORD,
    ReturnValue: PVOID,
  );
}
extern "C" {
  pub fn RtlAddFunctionTable(
    FunctionTable: PRUNTIME_FUNCTION,
    EntryCount: DWORD,
    BaseAddress: DWORD64,
  ) -> BOOLEAN;
}
extern "C" {
  pub fn RtlDeleteFunctionTable(FunctionTable: PRUNTIME_FUNCTION) -> BOOLEAN;
}
extern "C" {
  pub fn RtlInstallFunctionTableCallback(
    TableIdentifier: DWORD64,
    BaseAddress: DWORD64,
    Length: DWORD,
    Callback: PGET_RUNTIME_FUNCTION_CALLBACK,
    Context: PVOID,
    OutOfProcessCallbackDll: PCWSTR,
  ) -> BOOLEAN;
}
extern "C" {
  pub fn RtlAddGrowableFunctionTable(
    DynamicTable: *mut PVOID,
    FunctionTable: PRUNTIME_FUNCTION,
    EntryCount: DWORD,
    MaximumEntryCount: DWORD,
    RangeBase: ULONG_PTR,
    RangeEnd: ULONG_PTR,
  ) -> DWORD;
}
extern "C" {
  pub fn RtlGrowFunctionTable(DynamicTable: PVOID, NewEntryCount: DWORD);
}
extern "C" {
  pub fn RtlDeleteGrowableFunctionTable(DynamicTable: PVOID);
}
extern "C" {
  pub fn RtlLookupFunctionEntry(
    ControlPc: DWORD64,
    ImageBase: PDWORD64,
    HistoryTable: PUNWIND_HISTORY_TABLE,
  ) -> PRUNTIME_FUNCTION;
}
extern "C" {
  pub fn RtlRestoreContext(ContextRecord: PCONTEXT, ExceptionRecord: *mut _EXCEPTION_RECORD);
}
extern "C" {
  pub fn RtlUnwindEx(
    TargetFrame: PVOID,
    TargetIp: PVOID,
    ExceptionRecord: PEXCEPTION_RECORD,
    ReturnValue: PVOID,
    ContextRecord: PCONTEXT,
    HistoryTable: PUNWIND_HISTORY_TABLE,
  );
}
extern "C" {
  pub fn RtlVirtualUnwind(
    HandlerType: DWORD,
    ImageBase: DWORD64,
    ControlPc: DWORD64,
    FunctionEntry: PRUNTIME_FUNCTION,
    ContextRecord: PCONTEXT,
    HandlerData: *mut PVOID,
    EstablisherFrame: PDWORD64,
    ContextPointers: PKNONVOLATILE_CONTEXT_POINTERS,
  ) -> PEXCEPTION_ROUTINE;
}
extern "C" {
  pub fn RtlRaiseException(ExceptionRecord: PEXCEPTION_RECORD);
}
extern "C" {
  pub fn RtlPcToFileHeader(PcValue: PVOID, BaseOfImage: *mut PVOID) -> PVOID;
}
extern "C" {
  pub fn RtlCompareMemory(
    Source1: *const ::std::os::raw::c_void,
    Source2: *const ::std::os::raw::c_void,
    Length: SIZE_T,
  ) -> SIZE_T;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SLIST_ENTRY {
  pub Next: *mut _SLIST_ENTRY,
}
#[test]
fn bindgen_test_layout__SLIST_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_SLIST_ENTRY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SLIST_ENTRY>(),
    16usize,
    concat!("Size of: ", stringify!(_SLIST_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_SLIST_ENTRY>(),
    16usize,
    concat!("Alignment of ", stringify!(_SLIST_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Next) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SLIST_ENTRY),
      "::",
      stringify!(Next)
    )
  );
}
pub type SLIST_ENTRY = _SLIST_ENTRY;
pub type PSLIST_ENTRY = *mut _SLIST_ENTRY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _SLIST_HEADER {
  pub __bindgen_anon_1: _SLIST_HEADER__bindgen_ty_1,
  pub HeaderX64: _SLIST_HEADER__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SLIST_HEADER__bindgen_ty_1 {
  pub Alignment: ULONGLONG,
  pub Region: ULONGLONG,
}
#[test]
fn bindgen_test_layout__SLIST_HEADER__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_SLIST_HEADER__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SLIST_HEADER__bindgen_ty_1>(),
    16usize,
    concat!("Size of: ", stringify!(_SLIST_HEADER__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_SLIST_HEADER__bindgen_ty_1>(),
    8usize,
    concat!("Alignment of ", stringify!(_SLIST_HEADER__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Alignment) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SLIST_HEADER__bindgen_ty_1),
      "::",
      stringify!(Alignment)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Region) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SLIST_HEADER__bindgen_ty_1),
      "::",
      stringify!(Region)
    )
  );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _SLIST_HEADER__bindgen_ty_2 {
  pub _bitfield_align_1: [u64; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize]>,
}
#[test]
fn bindgen_test_layout__SLIST_HEADER__bindgen_ty_2() {
  assert_eq!(
    ::std::mem::size_of::<_SLIST_HEADER__bindgen_ty_2>(),
    16usize,
    concat!("Size of: ", stringify!(_SLIST_HEADER__bindgen_ty_2))
  );
  assert_eq!(
    ::std::mem::align_of::<_SLIST_HEADER__bindgen_ty_2>(),
    8usize,
    concat!("Alignment of ", stringify!(_SLIST_HEADER__bindgen_ty_2))
  );
}
impl _SLIST_HEADER__bindgen_ty_2 {
  #[inline]
  pub fn Depth(&self) -> ULONGLONG {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
  }
  #[inline]
  pub fn set_Depth(&mut self, val: ULONGLONG) {
    unsafe {
      let val: u64 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 16u8, val as u64)
    }
  }
  #[inline]
  pub fn Sequence(&self) -> ULONGLONG {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 48u8) as u64) }
  }
  #[inline]
  pub fn set_Sequence(&mut self, val: ULONGLONG) {
    unsafe {
      let val: u64 = ::std::mem::transmute(val);
      self._bitfield_1.set(16usize, 48u8, val as u64)
    }
  }
  #[inline]
  pub fn Reserved(&self) -> ULONGLONG {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 4u8) as u64) }
  }
  #[inline]
  pub fn set_Reserved(&mut self, val: ULONGLONG) {
    unsafe {
      let val: u64 = ::std::mem::transmute(val);
      self._bitfield_1.set(64usize, 4u8, val as u64)
    }
  }
  #[inline]
  pub fn NextEntry(&self) -> ULONGLONG {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(68usize, 60u8) as u64) }
  }
  #[inline]
  pub fn set_NextEntry(&mut self, val: ULONGLONG) {
    unsafe {
      let val: u64 = ::std::mem::transmute(val);
      self._bitfield_1.set(68usize, 60u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    Depth: ULONGLONG,
    Sequence: ULONGLONG,
    Reserved: ULONGLONG,
    NextEntry: ULONGLONG,
  ) -> __BindgenBitfieldUnit<[u8; 16usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 16usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 16u8, {
      let Depth: u64 = unsafe { ::std::mem::transmute(Depth) };
      Depth as u64
    });
    __bindgen_bitfield_unit.set(16usize, 48u8, {
      let Sequence: u64 = unsafe { ::std::mem::transmute(Sequence) };
      Sequence as u64
    });
    __bindgen_bitfield_unit.set(64usize, 4u8, {
      let Reserved: u64 = unsafe { ::std::mem::transmute(Reserved) };
      Reserved as u64
    });
    __bindgen_bitfield_unit.set(68usize, 60u8, {
      let NextEntry: u64 = unsafe { ::std::mem::transmute(NextEntry) };
      NextEntry as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__SLIST_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_SLIST_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SLIST_HEADER>(),
    16usize,
    concat!("Size of: ", stringify!(_SLIST_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_SLIST_HEADER>(),
    16usize,
    concat!("Alignment of ", stringify!(_SLIST_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HeaderX64) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SLIST_HEADER),
      "::",
      stringify!(HeaderX64)
    )
  );
}
pub type SLIST_HEADER = _SLIST_HEADER;
pub type PSLIST_HEADER = *mut _SLIST_HEADER;
extern "C" {
  pub fn RtlInitializeSListHead(ListHead: PSLIST_HEADER);
}
extern "C" {
  pub fn RtlFirstEntrySList(ListHead: *const SLIST_HEADER) -> PSLIST_ENTRY;
}
extern "C" {
  pub fn RtlInterlockedPopEntrySList(ListHead: PSLIST_HEADER) -> PSLIST_ENTRY;
}
extern "C" {
  pub fn RtlInterlockedPushEntrySList(
    ListHead: PSLIST_HEADER,
    ListEntry: PSLIST_ENTRY,
  ) -> PSLIST_ENTRY;
}
extern "C" {
  pub fn RtlInterlockedPushListSListEx(
    ListHead: PSLIST_HEADER,
    List: PSLIST_ENTRY,
    ListEnd: PSLIST_ENTRY,
    Count: DWORD,
  ) -> PSLIST_ENTRY;
}
extern "C" {
  pub fn RtlInterlockedFlushSList(ListHead: PSLIST_HEADER) -> PSLIST_ENTRY;
}
extern "C" {
  pub fn RtlQueryDepthSList(ListHead: PSLIST_HEADER) -> WORD;
}
extern "C" {
  pub fn RtlGetReturnAddressHijackTarget() -> ULONG_PTR;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _RTL_RUN_ONCE {
  pub Ptr: PVOID,
}
#[test]
fn bindgen_test_layout__RTL_RUN_ONCE() {
  const UNINIT: ::std::mem::MaybeUninit<_RTL_RUN_ONCE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_RTL_RUN_ONCE>(),
    8usize,
    concat!("Size of: ", stringify!(_RTL_RUN_ONCE))
  );
  assert_eq!(
    ::std::mem::align_of::<_RTL_RUN_ONCE>(),
    8usize,
    concat!("Alignment of ", stringify!(_RTL_RUN_ONCE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ptr) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_RUN_ONCE),
      "::",
      stringify!(Ptr)
    )
  );
}
pub type RTL_RUN_ONCE = _RTL_RUN_ONCE;
pub type PRTL_RUN_ONCE = *mut _RTL_RUN_ONCE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_BARRIER {
  pub Reserved1: DWORD,
  pub Reserved2: DWORD,
  pub Reserved3: [ULONG_PTR; 2usize],
  pub Reserved4: DWORD,
  pub Reserved5: DWORD,
}
#[test]
fn bindgen_test_layout__RTL_BARRIER() {
  const UNINIT: ::std::mem::MaybeUninit<_RTL_BARRIER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_RTL_BARRIER>(),
    32usize,
    concat!("Size of: ", stringify!(_RTL_BARRIER))
  );
  assert_eq!(
    ::std::mem::align_of::<_RTL_BARRIER>(),
    8usize,
    concat!("Alignment of ", stringify!(_RTL_BARRIER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved1) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_BARRIER),
      "::",
      stringify!(Reserved1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved2) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_BARRIER),
      "::",
      stringify!(Reserved2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved3) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_BARRIER),
      "::",
      stringify!(Reserved3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved4) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_BARRIER),
      "::",
      stringify!(Reserved4)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved5) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_BARRIER),
      "::",
      stringify!(Reserved5)
    )
  );
}
pub type RTL_BARRIER = _RTL_BARRIER;
pub type PRTL_BARRIER = *mut _RTL_BARRIER;
extern "C" {
  pub fn __fastfail(Code: ::std::os::raw::c_uint) -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MESSAGE_RESOURCE_ENTRY {
  pub Length: WORD,
  pub Flags: WORD,
  pub Text: [BYTE; 1usize],
}
#[test]
fn bindgen_test_layout__MESSAGE_RESOURCE_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_MESSAGE_RESOURCE_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_MESSAGE_RESOURCE_ENTRY>(),
    6usize,
    concat!("Size of: ", stringify!(_MESSAGE_RESOURCE_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_MESSAGE_RESOURCE_ENTRY>(),
    2usize,
    concat!("Alignment of ", stringify!(_MESSAGE_RESOURCE_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_MESSAGE_RESOURCE_ENTRY),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_MESSAGE_RESOURCE_ENTRY),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Text) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_MESSAGE_RESOURCE_ENTRY),
      "::",
      stringify!(Text)
    )
  );
}
pub type MESSAGE_RESOURCE_ENTRY = _MESSAGE_RESOURCE_ENTRY;
pub type PMESSAGE_RESOURCE_ENTRY = *mut _MESSAGE_RESOURCE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MESSAGE_RESOURCE_BLOCK {
  pub LowId: DWORD,
  pub HighId: DWORD,
  pub OffsetToEntries: DWORD,
}
#[test]
fn bindgen_test_layout__MESSAGE_RESOURCE_BLOCK() {
  const UNINIT: ::std::mem::MaybeUninit<_MESSAGE_RESOURCE_BLOCK> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_MESSAGE_RESOURCE_BLOCK>(),
    12usize,
    concat!("Size of: ", stringify!(_MESSAGE_RESOURCE_BLOCK))
  );
  assert_eq!(
    ::std::mem::align_of::<_MESSAGE_RESOURCE_BLOCK>(),
    4usize,
    concat!("Alignment of ", stringify!(_MESSAGE_RESOURCE_BLOCK))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LowId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_MESSAGE_RESOURCE_BLOCK),
      "::",
      stringify!(LowId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HighId) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_MESSAGE_RESOURCE_BLOCK),
      "::",
      stringify!(HighId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OffsetToEntries) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_MESSAGE_RESOURCE_BLOCK),
      "::",
      stringify!(OffsetToEntries)
    )
  );
}
pub type MESSAGE_RESOURCE_BLOCK = _MESSAGE_RESOURCE_BLOCK;
pub type PMESSAGE_RESOURCE_BLOCK = *mut _MESSAGE_RESOURCE_BLOCK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MESSAGE_RESOURCE_DATA {
  pub NumberOfBlocks: DWORD,
  pub Blocks: [MESSAGE_RESOURCE_BLOCK; 1usize],
}
#[test]
fn bindgen_test_layout__MESSAGE_RESOURCE_DATA() {
  const UNINIT: ::std::mem::MaybeUninit<_MESSAGE_RESOURCE_DATA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_MESSAGE_RESOURCE_DATA>(),
    16usize,
    concat!("Size of: ", stringify!(_MESSAGE_RESOURCE_DATA))
  );
  assert_eq!(
    ::std::mem::align_of::<_MESSAGE_RESOURCE_DATA>(),
    4usize,
    concat!("Alignment of ", stringify!(_MESSAGE_RESOURCE_DATA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfBlocks) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_MESSAGE_RESOURCE_DATA),
      "::",
      stringify!(NumberOfBlocks)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Blocks) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_MESSAGE_RESOURCE_DATA),
      "::",
      stringify!(Blocks)
    )
  );
}
pub type MESSAGE_RESOURCE_DATA = _MESSAGE_RESOURCE_DATA;
pub type PMESSAGE_RESOURCE_DATA = *mut _MESSAGE_RESOURCE_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OSVERSIONINFOA {
  pub dwOSVersionInfoSize: DWORD,
  pub dwMajorVersion: DWORD,
  pub dwMinorVersion: DWORD,
  pub dwBuildNumber: DWORD,
  pub dwPlatformId: DWORD,
  pub szCSDVersion: [CHAR; 128usize],
}
#[test]
fn bindgen_test_layout__OSVERSIONINFOA() {
  const UNINIT: ::std::mem::MaybeUninit<_OSVERSIONINFOA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_OSVERSIONINFOA>(),
    148usize,
    concat!("Size of: ", stringify!(_OSVERSIONINFOA))
  );
  assert_eq!(
    ::std::mem::align_of::<_OSVERSIONINFOA>(),
    4usize,
    concat!("Alignment of ", stringify!(_OSVERSIONINFOA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwOSVersionInfoSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOA),
      "::",
      stringify!(dwOSVersionInfoSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMajorVersion) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOA),
      "::",
      stringify!(dwMajorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMinorVersion) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOA),
      "::",
      stringify!(dwMinorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwBuildNumber) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOA),
      "::",
      stringify!(dwBuildNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwPlatformId) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOA),
      "::",
      stringify!(dwPlatformId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).szCSDVersion) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOA),
      "::",
      stringify!(szCSDVersion)
    )
  );
}
pub type OSVERSIONINFOA = _OSVERSIONINFOA;
pub type POSVERSIONINFOA = *mut _OSVERSIONINFOA;
pub type LPOSVERSIONINFOA = *mut _OSVERSIONINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OSVERSIONINFOW {
  pub dwOSVersionInfoSize: DWORD,
  pub dwMajorVersion: DWORD,
  pub dwMinorVersion: DWORD,
  pub dwBuildNumber: DWORD,
  pub dwPlatformId: DWORD,
  pub szCSDVersion: [WCHAR; 128usize],
}
#[test]
fn bindgen_test_layout__OSVERSIONINFOW() {
  const UNINIT: ::std::mem::MaybeUninit<_OSVERSIONINFOW> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_OSVERSIONINFOW>(),
    276usize,
    concat!("Size of: ", stringify!(_OSVERSIONINFOW))
  );
  assert_eq!(
    ::std::mem::align_of::<_OSVERSIONINFOW>(),
    4usize,
    concat!("Alignment of ", stringify!(_OSVERSIONINFOW))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwOSVersionInfoSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOW),
      "::",
      stringify!(dwOSVersionInfoSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMajorVersion) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOW),
      "::",
      stringify!(dwMajorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMinorVersion) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOW),
      "::",
      stringify!(dwMinorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwBuildNumber) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOW),
      "::",
      stringify!(dwBuildNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwPlatformId) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOW),
      "::",
      stringify!(dwPlatformId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).szCSDVersion) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOW),
      "::",
      stringify!(szCSDVersion)
    )
  );
}
pub type OSVERSIONINFOW = _OSVERSIONINFOW;
pub type POSVERSIONINFOW = *mut _OSVERSIONINFOW;
pub type LPOSVERSIONINFOW = *mut _OSVERSIONINFOW;
pub type RTL_OSVERSIONINFOW = _OSVERSIONINFOW;
pub type PRTL_OSVERSIONINFOW = *mut _OSVERSIONINFOW;
pub type OSVERSIONINFO = OSVERSIONINFOA;
pub type POSVERSIONINFO = POSVERSIONINFOA;
pub type LPOSVERSIONINFO = LPOSVERSIONINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OSVERSIONINFOEXA {
  pub dwOSVersionInfoSize: DWORD,
  pub dwMajorVersion: DWORD,
  pub dwMinorVersion: DWORD,
  pub dwBuildNumber: DWORD,
  pub dwPlatformId: DWORD,
  pub szCSDVersion: [CHAR; 128usize],
  pub wServicePackMajor: WORD,
  pub wServicePackMinor: WORD,
  pub wSuiteMask: WORD,
  pub wProductType: BYTE,
  pub wReserved: BYTE,
}
#[test]
fn bindgen_test_layout__OSVERSIONINFOEXA() {
  const UNINIT: ::std::mem::MaybeUninit<_OSVERSIONINFOEXA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_OSVERSIONINFOEXA>(),
    156usize,
    concat!("Size of: ", stringify!(_OSVERSIONINFOEXA))
  );
  assert_eq!(
    ::std::mem::align_of::<_OSVERSIONINFOEXA>(),
    4usize,
    concat!("Alignment of ", stringify!(_OSVERSIONINFOEXA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwOSVersionInfoSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(dwOSVersionInfoSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMajorVersion) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(dwMajorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMinorVersion) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(dwMinorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwBuildNumber) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(dwBuildNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwPlatformId) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(dwPlatformId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).szCSDVersion) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(szCSDVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wServicePackMajor) as usize - ptr as usize },
    148usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(wServicePackMajor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wServicePackMinor) as usize - ptr as usize },
    150usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(wServicePackMinor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wSuiteMask) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(wSuiteMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wProductType) as usize - ptr as usize },
    154usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(wProductType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wReserved) as usize - ptr as usize },
    155usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXA),
      "::",
      stringify!(wReserved)
    )
  );
}
pub type OSVERSIONINFOEXA = _OSVERSIONINFOEXA;
pub type POSVERSIONINFOEXA = *mut _OSVERSIONINFOEXA;
pub type LPOSVERSIONINFOEXA = *mut _OSVERSIONINFOEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OSVERSIONINFOEXW {
  pub dwOSVersionInfoSize: DWORD,
  pub dwMajorVersion: DWORD,
  pub dwMinorVersion: DWORD,
  pub dwBuildNumber: DWORD,
  pub dwPlatformId: DWORD,
  pub szCSDVersion: [WCHAR; 128usize],
  pub wServicePackMajor: WORD,
  pub wServicePackMinor: WORD,
  pub wSuiteMask: WORD,
  pub wProductType: BYTE,
  pub wReserved: BYTE,
}
#[test]
fn bindgen_test_layout__OSVERSIONINFOEXW() {
  const UNINIT: ::std::mem::MaybeUninit<_OSVERSIONINFOEXW> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_OSVERSIONINFOEXW>(),
    284usize,
    concat!("Size of: ", stringify!(_OSVERSIONINFOEXW))
  );
  assert_eq!(
    ::std::mem::align_of::<_OSVERSIONINFOEXW>(),
    4usize,
    concat!("Alignment of ", stringify!(_OSVERSIONINFOEXW))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwOSVersionInfoSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(dwOSVersionInfoSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMajorVersion) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(dwMajorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMinorVersion) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(dwMinorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwBuildNumber) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(dwBuildNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwPlatformId) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(dwPlatformId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).szCSDVersion) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(szCSDVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wServicePackMajor) as usize - ptr as usize },
    276usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(wServicePackMajor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wServicePackMinor) as usize - ptr as usize },
    278usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(wServicePackMinor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wSuiteMask) as usize - ptr as usize },
    280usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(wSuiteMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wProductType) as usize - ptr as usize },
    282usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(wProductType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wReserved) as usize - ptr as usize },
    283usize,
    concat!(
      "Offset of field: ",
      stringify!(_OSVERSIONINFOEXW),
      "::",
      stringify!(wReserved)
    )
  );
}
pub type OSVERSIONINFOEXW = _OSVERSIONINFOEXW;
pub type POSVERSIONINFOEXW = *mut _OSVERSIONINFOEXW;
pub type LPOSVERSIONINFOEXW = *mut _OSVERSIONINFOEXW;
pub type RTL_OSVERSIONINFOEXW = _OSVERSIONINFOEXW;
pub type PRTL_OSVERSIONINFOEXW = *mut _OSVERSIONINFOEXW;
pub type OSVERSIONINFOEX = OSVERSIONINFOEXA;
pub type POSVERSIONINFOEX = POSVERSIONINFOEXA;
pub type LPOSVERSIONINFOEX = LPOSVERSIONINFOEXA;
extern "C" {
  pub fn VerSetConditionMask(
    ConditionMask: ULONGLONG,
    TypeMask: DWORD,
    Condition: BYTE,
  ) -> ULONGLONG;
}
extern "C" {
  pub fn RtlGetProductInfo(
    OSMajorVersion: DWORD,
    OSMinorVersion: DWORD,
    SpMajorVersion: DWORD,
    SpMinorVersion: DWORD,
    ReturnedProductType: PDWORD,
  ) -> BOOLEAN;
}
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadInvalidInfoClass: _RTL_UMS_THREAD_INFO_CLASS = 0;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadUserContext: _RTL_UMS_THREAD_INFO_CLASS = 1;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadPriority: _RTL_UMS_THREAD_INFO_CLASS = 2;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadAffinity: _RTL_UMS_THREAD_INFO_CLASS = 3;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadTeb: _RTL_UMS_THREAD_INFO_CLASS = 4;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadIsSuspended: _RTL_UMS_THREAD_INFO_CLASS = 5;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadIsTerminated: _RTL_UMS_THREAD_INFO_CLASS = 6;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadMaxInfoClass: _RTL_UMS_THREAD_INFO_CLASS = 7;
pub type _RTL_UMS_THREAD_INFO_CLASS = ::std::os::raw::c_int;
pub use self::_RTL_UMS_THREAD_INFO_CLASS as RTL_UMS_THREAD_INFO_CLASS;
pub type PRTL_UMS_THREAD_INFO_CLASS = *mut _RTL_UMS_THREAD_INFO_CLASS;
pub const _RTL_UMS_SCHEDULER_REASON_UmsSchedulerStartup: _RTL_UMS_SCHEDULER_REASON = 0;
pub const _RTL_UMS_SCHEDULER_REASON_UmsSchedulerThreadBlocked: _RTL_UMS_SCHEDULER_REASON = 1;
pub const _RTL_UMS_SCHEDULER_REASON_UmsSchedulerThreadYield: _RTL_UMS_SCHEDULER_REASON = 2;
pub type _RTL_UMS_SCHEDULER_REASON = ::std::os::raw::c_int;
pub use self::_RTL_UMS_SCHEDULER_REASON as RTL_UMS_SCHEDULER_REASON;
pub type PRTL_UMS_SCHEDULER_REASON = *mut _RTL_UMS_SCHEDULER_REASON;
pub type PRTL_UMS_SCHEDULER_ENTRY_POINT = ::std::option::Option<
  unsafe extern "C" fn(arg1: RTL_UMS_SCHEDULER_REASON, arg2: ULONG_PTR, arg3: PVOID),
>;
extern "C" {
  pub fn RtlCrc32(Buffer: *const ::std::os::raw::c_void, Size: usize, InitialCrc: DWORD) -> DWORD;
}
extern "C" {
  pub fn RtlCrc64(
    Buffer: *const ::std::os::raw::c_void,
    Size: usize,
    InitialCrc: ULONGLONG,
  ) -> ULONGLONG;
}
pub const _OS_DEPLOYEMENT_STATE_VALUES_OS_DEPLOYMENT_STANDARD: _OS_DEPLOYEMENT_STATE_VALUES = 1;
pub const _OS_DEPLOYEMENT_STATE_VALUES_OS_DEPLOYMENT_COMPACT: _OS_DEPLOYEMENT_STATE_VALUES = 2;
pub type _OS_DEPLOYEMENT_STATE_VALUES = ::std::os::raw::c_int;
pub use self::_OS_DEPLOYEMENT_STATE_VALUES as OS_DEPLOYEMENT_STATE_VALUES;
extern "C" {
  pub fn RtlOsDeploymentState(Flags: DWORD) -> OS_DEPLOYEMENT_STATE_VALUES;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NV_MEMORY_RANGE {
  pub BaseAddress: *mut ::std::os::raw::c_void,
  pub Length: SIZE_T,
}
#[test]
fn bindgen_test_layout__NV_MEMORY_RANGE() {
  const UNINIT: ::std::mem::MaybeUninit<_NV_MEMORY_RANGE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_NV_MEMORY_RANGE>(),
    16usize,
    concat!("Size of: ", stringify!(_NV_MEMORY_RANGE))
  );
  assert_eq!(
    ::std::mem::align_of::<_NV_MEMORY_RANGE>(),
    8usize,
    concat!("Alignment of ", stringify!(_NV_MEMORY_RANGE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BaseAddress) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NV_MEMORY_RANGE),
      "::",
      stringify!(BaseAddress)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_NV_MEMORY_RANGE),
      "::",
      stringify!(Length)
    )
  );
}
pub type NV_MEMORY_RANGE = _NV_MEMORY_RANGE;
pub type PNV_MEMORY_RANGE = *mut _NV_MEMORY_RANGE;
extern "C" {
  pub fn RtlGetNonVolatileToken(NvBuffer: PVOID, Size: SIZE_T, NvToken: *mut PVOID) -> DWORD;
}
extern "C" {
  pub fn RtlFreeNonVolatileToken(NvToken: PVOID) -> DWORD;
}
extern "C" {
  pub fn RtlFlushNonVolatileMemory(
    NvToken: PVOID,
    NvBuffer: PVOID,
    Size: SIZE_T,
    Flags: DWORD,
  ) -> DWORD;
}
extern "C" {
  pub fn RtlDrainNonVolatileFlush(NvToken: PVOID) -> DWORD;
}
extern "C" {
  pub fn RtlWriteNonVolatileMemory(
    NvToken: PVOID,
    NvDestination: *mut ::std::os::raw::c_void,
    Source: *const ::std::os::raw::c_void,
    Size: SIZE_T,
    Flags: DWORD,
  ) -> DWORD;
}
extern "C" {
  pub fn RtlFillNonVolatileMemory(
    NvToken: PVOID,
    NvDestination: *mut ::std::os::raw::c_void,
    Size: SIZE_T,
    Value: BYTE,
    Flags: DWORD,
  ) -> DWORD;
}
extern "C" {
  pub fn RtlFlushNonVolatileMemoryRanges(
    NvToken: PVOID,
    NvRanges: PNV_MEMORY_RANGE,
    NumRanges: SIZE_T,
    Flags: DWORD,
  ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CORRELATION_VECTOR {
  pub Version: CHAR,
  pub Vector: [CHAR; 129usize],
}
#[test]
fn bindgen_test_layout_CORRELATION_VECTOR() {
  const UNINIT: ::std::mem::MaybeUninit<CORRELATION_VECTOR> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<CORRELATION_VECTOR>(),
    130usize,
    concat!("Size of: ", stringify!(CORRELATION_VECTOR))
  );
  assert_eq!(
    ::std::mem::align_of::<CORRELATION_VECTOR>(),
    1usize,
    concat!("Alignment of ", stringify!(CORRELATION_VECTOR))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(CORRELATION_VECTOR),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Vector) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(CORRELATION_VECTOR),
      "::",
      stringify!(Vector)
    )
  );
}
pub type PCORRELATION_VECTOR = *mut CORRELATION_VECTOR;
extern "C" {
  pub fn RtlInitializeCorrelationVector(
    CorrelationVector: PCORRELATION_VECTOR,
    Version: ::std::os::raw::c_int,
    Guid: *const GUID,
  ) -> DWORD;
}
extern "C" {
  pub fn RtlIncrementCorrelationVector(CorrelationVector: PCORRELATION_VECTOR) -> DWORD;
}
extern "C" {
  pub fn RtlExtendCorrelationVector(CorrelationVector: PCORRELATION_VECTOR) -> DWORD;
}
extern "C" {
  pub fn RtlValidateCorrelationVector(Vector: PCORRELATION_VECTOR) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
  pub Size: DWORD,
  pub TriggerId: PCWSTR,
}
#[test]
fn bindgen_test_layout__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG() {
  const UNINIT: ::std::mem::MaybeUninit<_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG>(),
    16usize,
    concat!("Size of: ", stringify!(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG))
  );
  assert_eq!(
    ::std::mem::align_of::<_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TriggerId) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG),
      "::",
      stringify!(TriggerId)
    )
  );
}
pub type CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
pub type PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = *mut _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
extern "C" {
  pub fn RtlRaiseCustomSystemEventTrigger(
    TriggerConfig: PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG,
  ) -> DWORD;
}
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeNone: _IMAGE_POLICY_ENTRY_TYPE = 0;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeBool: _IMAGE_POLICY_ENTRY_TYPE = 1;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt8: _IMAGE_POLICY_ENTRY_TYPE = 2;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt8: _IMAGE_POLICY_ENTRY_TYPE = 3;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt16: _IMAGE_POLICY_ENTRY_TYPE = 4;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt16: _IMAGE_POLICY_ENTRY_TYPE = 5;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt32: _IMAGE_POLICY_ENTRY_TYPE = 6;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt32: _IMAGE_POLICY_ENTRY_TYPE = 7;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt64: _IMAGE_POLICY_ENTRY_TYPE = 8;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt64: _IMAGE_POLICY_ENTRY_TYPE = 9;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeAnsiString: _IMAGE_POLICY_ENTRY_TYPE = 10;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUnicodeString: _IMAGE_POLICY_ENTRY_TYPE = 11;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeOverride: _IMAGE_POLICY_ENTRY_TYPE = 12;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeMaximum: _IMAGE_POLICY_ENTRY_TYPE = 13;
pub type _IMAGE_POLICY_ENTRY_TYPE = ::std::os::raw::c_int;
pub use self::_IMAGE_POLICY_ENTRY_TYPE as IMAGE_POLICY_ENTRY_TYPE;
pub const _IMAGE_POLICY_ID_ImagePolicyIdNone: _IMAGE_POLICY_ID = 0;
pub const _IMAGE_POLICY_ID_ImagePolicyIdEtw: _IMAGE_POLICY_ID = 1;
pub const _IMAGE_POLICY_ID_ImagePolicyIdDebug: _IMAGE_POLICY_ID = 2;
pub const _IMAGE_POLICY_ID_ImagePolicyIdCrashDump: _IMAGE_POLICY_ID = 3;
pub const _IMAGE_POLICY_ID_ImagePolicyIdCrashDumpKey: _IMAGE_POLICY_ID = 4;
pub const _IMAGE_POLICY_ID_ImagePolicyIdCrashDumpKeyGuid: _IMAGE_POLICY_ID = 5;
pub const _IMAGE_POLICY_ID_ImagePolicyIdParentSd: _IMAGE_POLICY_ID = 6;
pub const _IMAGE_POLICY_ID_ImagePolicyIdParentSdRev: _IMAGE_POLICY_ID = 7;
pub const _IMAGE_POLICY_ID_ImagePolicyIdSvn: _IMAGE_POLICY_ID = 8;
pub const _IMAGE_POLICY_ID_ImagePolicyIdDeviceId: _IMAGE_POLICY_ID = 9;
pub const _IMAGE_POLICY_ID_ImagePolicyIdCapability: _IMAGE_POLICY_ID = 10;
pub const _IMAGE_POLICY_ID_ImagePolicyIdScenarioId: _IMAGE_POLICY_ID = 11;
pub const _IMAGE_POLICY_ID_ImagePolicyIdMaximum: _IMAGE_POLICY_ID = 12;
pub type _IMAGE_POLICY_ID = ::std::os::raw::c_int;
pub use self::_IMAGE_POLICY_ID as IMAGE_POLICY_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_POLICY_ENTRY {
  pub Type: IMAGE_POLICY_ENTRY_TYPE,
  pub PolicyId: IMAGE_POLICY_ID,
  pub u: _IMAGE_POLICY_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_POLICY_ENTRY__bindgen_ty_1 {
  pub None: *const ::std::os::raw::c_void,
  pub BoolValue: BOOLEAN,
  pub Int8Value: INT8,
  pub UInt8Value: UINT8,
  pub Int16Value: INT16,
  pub UInt16Value: UINT16,
  pub Int32Value: INT32,
  pub UInt32Value: UINT32,
  pub Int64Value: INT64,
  pub UInt64Value: UINT64,
  pub AnsiStringValue: PCSTR,
  pub UnicodeStringValue: PCWSTR,
}
#[test]
fn bindgen_test_layout__IMAGE_POLICY_ENTRY__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_POLICY_ENTRY__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_POLICY_ENTRY__bindgen_ty_1>(),
    8usize,
    concat!("Size of: ", stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_POLICY_ENTRY__bindgen_ty_1>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).None) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(None)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BoolValue) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(BoolValue)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Int8Value) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(Int8Value)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UInt8Value) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(UInt8Value)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Int16Value) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(Int16Value)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UInt16Value) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(UInt16Value)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Int32Value) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(Int32Value)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UInt32Value) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(UInt32Value)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Int64Value) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(Int64Value)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UInt64Value) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(UInt64Value)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AnsiStringValue) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(AnsiStringValue)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UnicodeStringValue) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY__bindgen_ty_1),
      "::",
      stringify!(UnicodeStringValue)
    )
  );
}
#[test]
fn bindgen_test_layout__IMAGE_POLICY_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_POLICY_ENTRY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_POLICY_ENTRY>(),
    16usize,
    concat!("Size of: ", stringify!(_IMAGE_POLICY_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_POLICY_ENTRY>(),
    8usize,
    concat!("Alignment of ", stringify!(_IMAGE_POLICY_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PolicyId) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY),
      "::",
      stringify!(PolicyId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_ENTRY),
      "::",
      stringify!(u)
    )
  );
}
pub type IMAGE_POLICY_ENTRY = _IMAGE_POLICY_ENTRY;
pub type PCIMAGE_POLICY_ENTRY = *const IMAGE_POLICY_ENTRY;
#[repr(C)]
pub struct _IMAGE_POLICY_METADATA {
  pub Version: BYTE,
  pub Reserved0: [BYTE; 7usize],
  pub ApplicationId: ULONGLONG,
  pub Policies: __IncompleteArrayField<IMAGE_POLICY_ENTRY>,
}
#[test]
fn bindgen_test_layout__IMAGE_POLICY_METADATA() {
  const UNINIT: ::std::mem::MaybeUninit<_IMAGE_POLICY_METADATA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_IMAGE_POLICY_METADATA>(),
    16usize,
    concat!("Size of: ", stringify!(_IMAGE_POLICY_METADATA))
  );
  assert_eq!(
    ::std::mem::align_of::<_IMAGE_POLICY_METADATA>(),
    8usize,
    concat!("Alignment of ", stringify!(_IMAGE_POLICY_METADATA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_METADATA),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved0) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_METADATA),
      "::",
      stringify!(Reserved0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ApplicationId) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_METADATA),
      "::",
      stringify!(ApplicationId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Policies) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IMAGE_POLICY_METADATA),
      "::",
      stringify!(Policies)
    )
  );
}
pub type IMAGE_POLICY_METADATA = _IMAGE_POLICY_METADATA;
pub type PCIMAGE_POLICY_METADATA = *const IMAGE_POLICY_METADATA;
extern "C" {
  pub fn RtlIsZeroMemory(Buffer: PVOID, Length: SIZE_T) -> BOOLEAN;
}
extern "C" {
  pub fn RtlNormalizeSecurityDescriptor(
    SecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
    SecurityDescriptorLength: DWORD,
    NewSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
    NewSecurityDescriptorLength: PDWORD,
    CheckOnly: BOOLEAN,
  ) -> BOOLEAN;
}
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdUnknown: _RTL_SYSTEM_GLOBAL_DATA_ID = 0;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdRngSeedVersion: _RTL_SYSTEM_GLOBAL_DATA_ID = 1;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdInterruptTime: _RTL_SYSTEM_GLOBAL_DATA_ID = 2;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdTimeZoneBias: _RTL_SYSTEM_GLOBAL_DATA_ID = 3;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdImageNumberLow: _RTL_SYSTEM_GLOBAL_DATA_ID = 4;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdImageNumberHigh: _RTL_SYSTEM_GLOBAL_DATA_ID = 5;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdTimeZoneId: _RTL_SYSTEM_GLOBAL_DATA_ID = 6;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdNtMajorVersion: _RTL_SYSTEM_GLOBAL_DATA_ID = 7;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdNtMinorVersion: _RTL_SYSTEM_GLOBAL_DATA_ID = 8;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdSystemExpirationDate: _RTL_SYSTEM_GLOBAL_DATA_ID =
  9;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdKdDebuggerEnabled: _RTL_SYSTEM_GLOBAL_DATA_ID = 10;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdCyclesPerYield: _RTL_SYSTEM_GLOBAL_DATA_ID = 11;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdSafeBootMode: _RTL_SYSTEM_GLOBAL_DATA_ID = 12;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdLastSystemRITEventTickCount:
  _RTL_SYSTEM_GLOBAL_DATA_ID = 13;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdConsoleSharedDataFlags:
  _RTL_SYSTEM_GLOBAL_DATA_ID = 14;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdNtSystemRootDrive: _RTL_SYSTEM_GLOBAL_DATA_ID = 15;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdQpcShift: _RTL_SYSTEM_GLOBAL_DATA_ID = 16;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdQpcBypassEnabled: _RTL_SYSTEM_GLOBAL_DATA_ID = 17;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdQpcData: _RTL_SYSTEM_GLOBAL_DATA_ID = 18;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdQpcBias: _RTL_SYSTEM_GLOBAL_DATA_ID = 19;
pub type _RTL_SYSTEM_GLOBAL_DATA_ID = ::std::os::raw::c_int;
pub use self::_RTL_SYSTEM_GLOBAL_DATA_ID as RTL_SYSTEM_GLOBAL_DATA_ID;
pub type PRTL_SYSTEM_GLOBAL_DATA_ID = *mut _RTL_SYSTEM_GLOBAL_DATA_ID;
extern "C" {
  pub fn RtlGetSystemGlobalData(
    DataId: RTL_SYSTEM_GLOBAL_DATA_ID,
    Buffer: PVOID,
    Size: DWORD,
  ) -> DWORD;
}
extern "C" {
  pub fn RtlSetSystemGlobalData(
    DataId: RTL_SYSTEM_GLOBAL_DATA_ID,
    Buffer: PVOID,
    Size: DWORD,
  ) -> DWORD;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _RTL_CRITICAL_SECTION_DEBUG {
  pub Type: WORD,
  pub CreatorBackTraceIndex: WORD,
  pub CriticalSection: *mut _RTL_CRITICAL_SECTION,
  pub ProcessLocksList: LIST_ENTRY,
  pub EntryCount: DWORD,
  pub ContentionCount: DWORD,
  pub Flags: DWORD,
  pub CreatorBackTraceIndexHigh: WORD,
  pub Identifier: WORD,
}
#[test]
fn bindgen_test_layout__RTL_CRITICAL_SECTION_DEBUG() {
  const UNINIT: ::std::mem::MaybeUninit<_RTL_CRITICAL_SECTION_DEBUG> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_RTL_CRITICAL_SECTION_DEBUG>(),
    48usize,
    concat!("Size of: ", stringify!(_RTL_CRITICAL_SECTION_DEBUG))
  );
  assert_eq!(
    ::std::mem::align_of::<_RTL_CRITICAL_SECTION_DEBUG>(),
    8usize,
    concat!("Alignment of ", stringify!(_RTL_CRITICAL_SECTION_DEBUG))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION_DEBUG),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CreatorBackTraceIndex) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION_DEBUG),
      "::",
      stringify!(CreatorBackTraceIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CriticalSection) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION_DEBUG),
      "::",
      stringify!(CriticalSection)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProcessLocksList) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION_DEBUG),
      "::",
      stringify!(ProcessLocksList)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EntryCount) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION_DEBUG),
      "::",
      stringify!(EntryCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ContentionCount) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION_DEBUG),
      "::",
      stringify!(ContentionCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION_DEBUG),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CreatorBackTraceIndexHigh) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION_DEBUG),
      "::",
      stringify!(CreatorBackTraceIndexHigh)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Identifier) as usize - ptr as usize },
    46usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION_DEBUG),
      "::",
      stringify!(Identifier)
    )
  );
}
pub type RTL_CRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG;
pub type PRTL_CRITICAL_SECTION_DEBUG = *mut _RTL_CRITICAL_SECTION_DEBUG;
pub type RTL_RESOURCE_DEBUG = _RTL_CRITICAL_SECTION_DEBUG;
pub type PRTL_RESOURCE_DEBUG = *mut _RTL_CRITICAL_SECTION_DEBUG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_CRITICAL_SECTION {
  pub DebugInfo: PRTL_CRITICAL_SECTION_DEBUG,
  pub LockCount: LONG,
  pub RecursionCount: LONG,
  pub OwningThread: HANDLE,
  pub LockSemaphore: HANDLE,
  pub SpinCount: ULONG_PTR,
}
#[test]
fn bindgen_test_layout__RTL_CRITICAL_SECTION() {
  const UNINIT: ::std::mem::MaybeUninit<_RTL_CRITICAL_SECTION> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_RTL_CRITICAL_SECTION>(),
    40usize,
    concat!("Size of: ", stringify!(_RTL_CRITICAL_SECTION))
  );
  assert_eq!(
    ::std::mem::align_of::<_RTL_CRITICAL_SECTION>(),
    8usize,
    concat!("Alignment of ", stringify!(_RTL_CRITICAL_SECTION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DebugInfo) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION),
      "::",
      stringify!(DebugInfo)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LockCount) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION),
      "::",
      stringify!(LockCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RecursionCount) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION),
      "::",
      stringify!(RecursionCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OwningThread) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION),
      "::",
      stringify!(OwningThread)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LockSemaphore) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION),
      "::",
      stringify!(LockSemaphore)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SpinCount) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CRITICAL_SECTION),
      "::",
      stringify!(SpinCount)
    )
  );
}
pub type RTL_CRITICAL_SECTION = _RTL_CRITICAL_SECTION;
pub type PRTL_CRITICAL_SECTION = *mut _RTL_CRITICAL_SECTION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_SRWLOCK {
  pub Ptr: PVOID,
}
#[test]
fn bindgen_test_layout__RTL_SRWLOCK() {
  const UNINIT: ::std::mem::MaybeUninit<_RTL_SRWLOCK> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_RTL_SRWLOCK>(),
    8usize,
    concat!("Size of: ", stringify!(_RTL_SRWLOCK))
  );
  assert_eq!(
    ::std::mem::align_of::<_RTL_SRWLOCK>(),
    8usize,
    concat!("Alignment of ", stringify!(_RTL_SRWLOCK))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ptr) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_SRWLOCK),
      "::",
      stringify!(Ptr)
    )
  );
}
pub type RTL_SRWLOCK = _RTL_SRWLOCK;
pub type PRTL_SRWLOCK = *mut _RTL_SRWLOCK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_CONDITION_VARIABLE {
  pub Ptr: PVOID,
}
#[test]
fn bindgen_test_layout__RTL_CONDITION_VARIABLE() {
  const UNINIT: ::std::mem::MaybeUninit<_RTL_CONDITION_VARIABLE> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_RTL_CONDITION_VARIABLE>(),
    8usize,
    concat!("Size of: ", stringify!(_RTL_CONDITION_VARIABLE))
  );
  assert_eq!(
    ::std::mem::align_of::<_RTL_CONDITION_VARIABLE>(),
    8usize,
    concat!("Alignment of ", stringify!(_RTL_CONDITION_VARIABLE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Ptr) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_RTL_CONDITION_VARIABLE),
      "::",
      stringify!(Ptr)
    )
  );
}
pub type RTL_CONDITION_VARIABLE = _RTL_CONDITION_VARIABLE;
pub type PRTL_CONDITION_VARIABLE = *mut _RTL_CONDITION_VARIABLE;
pub type PAPCFUNC = ::std::option::Option<unsafe extern "C" fn(Parameter: ULONG_PTR)>;
pub type PVECTORED_EXCEPTION_HANDLER =
  ::std::option::Option<unsafe extern "C" fn(ExceptionInfo: *mut _EXCEPTION_POINTERS) -> LONG>;
pub const _HEAP_INFORMATION_CLASS_HeapCompatibilityInformation: _HEAP_INFORMATION_CLASS = 0;
pub const _HEAP_INFORMATION_CLASS_HeapEnableTerminationOnCorruption: _HEAP_INFORMATION_CLASS = 1;
pub const _HEAP_INFORMATION_CLASS_HeapOptimizeResources: _HEAP_INFORMATION_CLASS = 3;
pub const _HEAP_INFORMATION_CLASS_HeapTag: _HEAP_INFORMATION_CLASS = 7;
pub type _HEAP_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_HEAP_INFORMATION_CLASS as HEAP_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION {
  pub Version: DWORD,
  pub Flags: DWORD,
}
#[test]
fn bindgen_test_layout__HEAP_OPTIMIZE_RESOURCES_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_HEAP_OPTIMIZE_RESOURCES_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_HEAP_OPTIMIZE_RESOURCES_INFORMATION>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_HEAP_OPTIMIZE_RESOURCES_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_HEAP_OPTIMIZE_RESOURCES_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_HEAP_OPTIMIZE_RESOURCES_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_HEAP_OPTIMIZE_RESOURCES_INFORMATION),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_HEAP_OPTIMIZE_RESOURCES_INFORMATION),
      "::",
      stringify!(Flags)
    )
  );
}
pub type HEAP_OPTIMIZE_RESOURCES_INFORMATION = _HEAP_OPTIMIZE_RESOURCES_INFORMATION;
pub type PHEAP_OPTIMIZE_RESOURCES_INFORMATION = *mut _HEAP_OPTIMIZE_RESOURCES_INFORMATION;
pub type WAITORTIMERCALLBACKFUNC =
  ::std::option::Option<unsafe extern "C" fn(arg1: PVOID, arg2: BOOLEAN)>;
pub type WORKERCALLBACKFUNC = ::std::option::Option<unsafe extern "C" fn(arg1: PVOID)>;
pub type APC_CALLBACK_FUNCTION =
  ::std::option::Option<unsafe extern "C" fn(arg1: DWORD, arg2: PVOID, arg3: PVOID)>;
pub type WAITORTIMERCALLBACK = WAITORTIMERCALLBACKFUNC;
pub type PFLS_CALLBACK_FUNCTION = ::std::option::Option<unsafe extern "C" fn(lpFlsData: PVOID)>;
pub type PSECURE_MEMORY_CACHE_CALLBACK =
  ::std::option::Option<unsafe extern "C" fn(Addr: PVOID, Range: SIZE_T) -> BOOLEAN>;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_ActivationContextBasicInformation:
  _ACTIVATION_CONTEXT_INFO_CLASS = 1;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_ActivationContextDetailedInformation:
  _ACTIVATION_CONTEXT_INFO_CLASS = 2;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_AssemblyDetailedInformationInActivationContext:
  _ACTIVATION_CONTEXT_INFO_CLASS = 3;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_FileInformationInAssemblyOfAssemblyInActivationContext:
  _ACTIVATION_CONTEXT_INFO_CLASS = 4;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_RunlevelInformationInActivationContext:
  _ACTIVATION_CONTEXT_INFO_CLASS = 5;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_CompatibilityInformationInActivationContext:
  _ACTIVATION_CONTEXT_INFO_CLASS = 6;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_ActivationContextManifestResourceName:
  _ACTIVATION_CONTEXT_INFO_CLASS = 7;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_MaxActivationContextInfoClass:
  _ACTIVATION_CONTEXT_INFO_CLASS = 8;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_AssemblyDetailedInformationInActivationContxt:
  _ACTIVATION_CONTEXT_INFO_CLASS = 3;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_FileInformationInAssemblyOfAssemblyInActivationContxt:
  _ACTIVATION_CONTEXT_INFO_CLASS = 4;
pub type _ACTIVATION_CONTEXT_INFO_CLASS = ::std::os::raw::c_int;
pub use self::_ACTIVATION_CONTEXT_INFO_CLASS as ACTIVATION_CONTEXT_INFO_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACTIVATION_CONTEXT_QUERY_INDEX {
  pub ulAssemblyIndex: DWORD,
  pub ulFileIndexInAssembly: DWORD,
}
#[test]
fn bindgen_test_layout__ACTIVATION_CONTEXT_QUERY_INDEX() {
  const UNINIT: ::std::mem::MaybeUninit<_ACTIVATION_CONTEXT_QUERY_INDEX> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACTIVATION_CONTEXT_QUERY_INDEX>(),
    8usize,
    concat!("Size of: ", stringify!(_ACTIVATION_CONTEXT_QUERY_INDEX))
  );
  assert_eq!(
    ::std::mem::align_of::<_ACTIVATION_CONTEXT_QUERY_INDEX>(),
    4usize,
    concat!("Alignment of ", stringify!(_ACTIVATION_CONTEXT_QUERY_INDEX))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulAssemblyIndex) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_QUERY_INDEX),
      "::",
      stringify!(ulAssemblyIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulFileIndexInAssembly) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_QUERY_INDEX),
      "::",
      stringify!(ulFileIndexInAssembly)
    )
  );
}
pub type ACTIVATION_CONTEXT_QUERY_INDEX = _ACTIVATION_CONTEXT_QUERY_INDEX;
pub type PACTIVATION_CONTEXT_QUERY_INDEX = *mut _ACTIVATION_CONTEXT_QUERY_INDEX;
pub type PCACTIVATION_CONTEXT_QUERY_INDEX = *const _ACTIVATION_CONTEXT_QUERY_INDEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
  pub ulFlags: DWORD,
  pub ulFilenameLength: DWORD,
  pub ulPathLength: DWORD,
  pub lpFileName: PCWSTR,
  pub lpFilePath: PCWSTR,
}
#[test]
fn bindgen_test_layout__ASSEMBLY_FILE_DETAILED_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_ASSEMBLY_FILE_DETAILED_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ASSEMBLY_FILE_DETAILED_INFORMATION>(),
    32usize,
    concat!("Size of: ", stringify!(_ASSEMBLY_FILE_DETAILED_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_ASSEMBLY_FILE_DETAILED_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_ASSEMBLY_FILE_DETAILED_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ASSEMBLY_FILE_DETAILED_INFORMATION),
      "::",
      stringify!(ulFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulFilenameLength) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ASSEMBLY_FILE_DETAILED_INFORMATION),
      "::",
      stringify!(ulFilenameLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulPathLength) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ASSEMBLY_FILE_DETAILED_INFORMATION),
      "::",
      stringify!(ulPathLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).lpFileName) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ASSEMBLY_FILE_DETAILED_INFORMATION),
      "::",
      stringify!(lpFileName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).lpFilePath) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_ASSEMBLY_FILE_DETAILED_INFORMATION),
      "::",
      stringify!(lpFilePath)
    )
  );
}
pub type ASSEMBLY_FILE_DETAILED_INFORMATION = _ASSEMBLY_FILE_DETAILED_INFORMATION;
pub type PASSEMBLY_FILE_DETAILED_INFORMATION = *mut _ASSEMBLY_FILE_DETAILED_INFORMATION;
pub type PCASSEMBLY_FILE_DETAILED_INFORMATION = *const ASSEMBLY_FILE_DETAILED_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
  pub ulFlags: DWORD,
  pub ulEncodedAssemblyIdentityLength: DWORD,
  pub ulManifestPathType: DWORD,
  pub ulManifestPathLength: DWORD,
  pub liManifestLastWriteTime: LARGE_INTEGER,
  pub ulPolicyPathType: DWORD,
  pub ulPolicyPathLength: DWORD,
  pub liPolicyLastWriteTime: LARGE_INTEGER,
  pub ulMetadataSatelliteRosterIndex: DWORD,
  pub ulManifestVersionMajor: DWORD,
  pub ulManifestVersionMinor: DWORD,
  pub ulPolicyVersionMajor: DWORD,
  pub ulPolicyVersionMinor: DWORD,
  pub ulAssemblyDirectoryNameLength: DWORD,
  pub lpAssemblyEncodedAssemblyIdentity: PCWSTR,
  pub lpAssemblyManifestPath: PCWSTR,
  pub lpAssemblyPolicyPath: PCWSTR,
  pub lpAssemblyDirectoryName: PCWSTR,
  pub ulFileCount: DWORD,
}
#[test]
fn bindgen_test_layout__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION>(),
    104usize,
    concat!(
      "Size of: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulEncodedAssemblyIdentityLength) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulEncodedAssemblyIdentityLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulManifestPathType) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulManifestPathType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulManifestPathLength) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulManifestPathLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).liManifestLastWriteTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(liManifestLastWriteTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulPolicyPathType) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulPolicyPathType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulPolicyPathLength) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulPolicyPathLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).liPolicyLastWriteTime) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(liPolicyLastWriteTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulMetadataSatelliteRosterIndex) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulMetadataSatelliteRosterIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulManifestVersionMajor) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulManifestVersionMajor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulManifestVersionMinor) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulManifestVersionMinor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulPolicyVersionMajor) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulPolicyVersionMajor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulPolicyVersionMinor) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulPolicyVersionMinor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulAssemblyDirectoryNameLength) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulAssemblyDirectoryNameLength)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).lpAssemblyEncodedAssemblyIdentity) as usize - ptr as usize
    },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(lpAssemblyEncodedAssemblyIdentity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).lpAssemblyManifestPath) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(lpAssemblyManifestPath)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).lpAssemblyPolicyPath) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(lpAssemblyPolicyPath)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).lpAssemblyDirectoryName) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(lpAssemblyDirectoryName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulFileCount) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION),
      "::",
      stringify!(ulFileCount)
    )
  );
}
pub type ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION =
  _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
pub type PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION =
  *mut _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
pub type PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION =
  *const _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_UNSPECIFIED: ACTCTX_REQUESTED_RUN_LEVEL = 0;
pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_AS_INVOKER: ACTCTX_REQUESTED_RUN_LEVEL = 1;
pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE:
  ACTCTX_REQUESTED_RUN_LEVEL = 2;
pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_REQUIRE_ADMIN: ACTCTX_REQUESTED_RUN_LEVEL = 3;
pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_NUMBERS: ACTCTX_REQUESTED_RUN_LEVEL = 4;
pub type ACTCTX_REQUESTED_RUN_LEVEL = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
  pub ulFlags: DWORD,
  pub RunLevel: ACTCTX_REQUESTED_RUN_LEVEL,
  pub UiAccess: DWORD,
}
#[test]
fn bindgen_test_layout__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION>(),
    12usize,
    concat!(
      "Size of: ",
      stringify!(_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION),
      "::",
      stringify!(ulFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RunLevel) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION),
      "::",
      stringify!(RunLevel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UiAccess) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION),
      "::",
      stringify!(UiAccess)
    )
  );
}
pub type ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
pub type PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = *mut _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
pub type PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION =
  *const _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN:
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 0;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS:
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 1;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION:
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 2;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED:
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 3;
pub type ACTCTX_COMPATIBILITY_ELEMENT_TYPE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COMPATIBILITY_CONTEXT_ELEMENT {
  pub Id: GUID,
  pub Type: ACTCTX_COMPATIBILITY_ELEMENT_TYPE,
  pub MaxVersionTested: ULONGLONG,
}
#[test]
fn bindgen_test_layout__COMPATIBILITY_CONTEXT_ELEMENT() {
  const UNINIT: ::std::mem::MaybeUninit<_COMPATIBILITY_CONTEXT_ELEMENT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_COMPATIBILITY_CONTEXT_ELEMENT>(),
    32usize,
    concat!("Size of: ", stringify!(_COMPATIBILITY_CONTEXT_ELEMENT))
  );
  assert_eq!(
    ::std::mem::align_of::<_COMPATIBILITY_CONTEXT_ELEMENT>(),
    8usize,
    concat!("Alignment of ", stringify!(_COMPATIBILITY_CONTEXT_ELEMENT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Id) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_COMPATIBILITY_CONTEXT_ELEMENT),
      "::",
      stringify!(Id)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_COMPATIBILITY_CONTEXT_ELEMENT),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxVersionTested) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_COMPATIBILITY_CONTEXT_ELEMENT),
      "::",
      stringify!(MaxVersionTested)
    )
  );
}
pub type COMPATIBILITY_CONTEXT_ELEMENT = _COMPATIBILITY_CONTEXT_ELEMENT;
pub type PCOMPATIBILITY_CONTEXT_ELEMENT = *mut _COMPATIBILITY_CONTEXT_ELEMENT;
pub type PCCOMPATIBILITY_CONTEXT_ELEMENT = *const _COMPATIBILITY_CONTEXT_ELEMENT;
#[repr(C)]
#[derive(Debug)]
pub struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
  pub ElementCount: DWORD,
  pub Elements: __IncompleteArrayField<COMPATIBILITY_CONTEXT_ELEMENT>,
}
#[test]
fn bindgen_test_layout__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ElementCount) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION),
      "::",
      stringify!(ElementCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Elements) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION),
      "::",
      stringify!(Elements)
    )
  );
}
pub type ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION =
  _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
pub type PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION =
  *mut _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
pub type PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION =
  *const _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUPPORTED_OS_INFO {
  pub MajorVersion: WORD,
  pub MinorVersion: WORD,
}
#[test]
fn bindgen_test_layout__SUPPORTED_OS_INFO() {
  const UNINIT: ::std::mem::MaybeUninit<_SUPPORTED_OS_INFO> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SUPPORTED_OS_INFO>(),
    4usize,
    concat!("Size of: ", stringify!(_SUPPORTED_OS_INFO))
  );
  assert_eq!(
    ::std::mem::align_of::<_SUPPORTED_OS_INFO>(),
    2usize,
    concat!("Alignment of ", stringify!(_SUPPORTED_OS_INFO))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MajorVersion) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SUPPORTED_OS_INFO),
      "::",
      stringify!(MajorVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinorVersion) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_SUPPORTED_OS_INFO),
      "::",
      stringify!(MinorVersion)
    )
  );
}
pub type SUPPORTED_OS_INFO = _SUPPORTED_OS_INFO;
pub type PSUPPORTED_OS_INFO = *mut _SUPPORTED_OS_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MAXVERSIONTESTED_INFO {
  pub MaxVersionTested: ULONGLONG,
}
#[test]
fn bindgen_test_layout__MAXVERSIONTESTED_INFO() {
  const UNINIT: ::std::mem::MaybeUninit<_MAXVERSIONTESTED_INFO> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_MAXVERSIONTESTED_INFO>(),
    8usize,
    concat!("Size of: ", stringify!(_MAXVERSIONTESTED_INFO))
  );
  assert_eq!(
    ::std::mem::align_of::<_MAXVERSIONTESTED_INFO>(),
    8usize,
    concat!("Alignment of ", stringify!(_MAXVERSIONTESTED_INFO))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaxVersionTested) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_MAXVERSIONTESTED_INFO),
      "::",
      stringify!(MaxVersionTested)
    )
  );
}
pub type MAXVERSIONTESTED_INFO = _MAXVERSIONTESTED_INFO;
pub type PMAXVERSIONTESTED_INFO = *mut _MAXVERSIONTESTED_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
  pub dwFlags: DWORD,
  pub ulFormatVersion: DWORD,
  pub ulAssemblyCount: DWORD,
  pub ulRootManifestPathType: DWORD,
  pub ulRootManifestPathChars: DWORD,
  pub ulRootConfigurationPathType: DWORD,
  pub ulRootConfigurationPathChars: DWORD,
  pub ulAppDirPathType: DWORD,
  pub ulAppDirPathChars: DWORD,
  pub lpRootManifestPath: PCWSTR,
  pub lpRootConfigurationPath: PCWSTR,
  pub lpAppDirPath: PCWSTR,
}
#[test]
fn bindgen_test_layout__ACTIVATION_CONTEXT_DETAILED_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_ACTIVATION_CONTEXT_DETAILED_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ACTIVATION_CONTEXT_DETAILED_INFORMATION>(),
    64usize,
    concat!(
      "Size of: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_ACTIVATION_CONTEXT_DETAILED_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFlags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(dwFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulFormatVersion) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(ulFormatVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulAssemblyCount) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(ulAssemblyCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulRootManifestPathType) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(ulRootManifestPathType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulRootManifestPathChars) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(ulRootManifestPathChars)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulRootConfigurationPathType) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(ulRootConfigurationPathType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulRootConfigurationPathChars) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(ulRootConfigurationPathChars)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulAppDirPathType) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(ulAppDirPathType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulAppDirPathChars) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(ulAppDirPathChars)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).lpRootManifestPath) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(lpRootManifestPath)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).lpRootConfigurationPath) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(lpRootConfigurationPath)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).lpAppDirPath) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION),
      "::",
      stringify!(lpAppDirPath)
    )
  );
}
pub type ACTIVATION_CONTEXT_DETAILED_INFORMATION = _ACTIVATION_CONTEXT_DETAILED_INFORMATION;
pub type PACTIVATION_CONTEXT_DETAILED_INFORMATION = *mut _ACTIVATION_CONTEXT_DETAILED_INFORMATION;
pub type PCACTIVATION_CONTEXT_DETAILED_INFORMATION =
  *const _ACTIVATION_CONTEXT_DETAILED_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HARDWARE_COUNTER_DATA {
  pub Type: HARDWARE_COUNTER_TYPE,
  pub Reserved: DWORD,
  pub Value: DWORD64,
}
#[test]
fn bindgen_test_layout__HARDWARE_COUNTER_DATA() {
  const UNINIT: ::std::mem::MaybeUninit<_HARDWARE_COUNTER_DATA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_HARDWARE_COUNTER_DATA>(),
    16usize,
    concat!("Size of: ", stringify!(_HARDWARE_COUNTER_DATA))
  );
  assert_eq!(
    ::std::mem::align_of::<_HARDWARE_COUNTER_DATA>(),
    8usize,
    concat!("Alignment of ", stringify!(_HARDWARE_COUNTER_DATA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_HARDWARE_COUNTER_DATA),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_HARDWARE_COUNTER_DATA),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_HARDWARE_COUNTER_DATA),
      "::",
      stringify!(Value)
    )
  );
}
pub type HARDWARE_COUNTER_DATA = _HARDWARE_COUNTER_DATA;
pub type PHARDWARE_COUNTER_DATA = *mut _HARDWARE_COUNTER_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PERFORMANCE_DATA {
  pub Size: WORD,
  pub Version: BYTE,
  pub HwCountersCount: BYTE,
  pub ContextSwitchCount: DWORD,
  pub WaitReasonBitMap: DWORD64,
  pub CycleTime: DWORD64,
  pub RetryCount: DWORD,
  pub Reserved: DWORD,
  pub HwCounters: [HARDWARE_COUNTER_DATA; 16usize],
}
#[test]
fn bindgen_test_layout__PERFORMANCE_DATA() {
  const UNINIT: ::std::mem::MaybeUninit<_PERFORMANCE_DATA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PERFORMANCE_DATA>(),
    288usize,
    concat!("Size of: ", stringify!(_PERFORMANCE_DATA))
  );
  assert_eq!(
    ::std::mem::align_of::<_PERFORMANCE_DATA>(),
    8usize,
    concat!("Alignment of ", stringify!(_PERFORMANCE_DATA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PERFORMANCE_DATA),
      "::",
      stringify!(Size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_PERFORMANCE_DATA),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HwCountersCount) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(_PERFORMANCE_DATA),
      "::",
      stringify!(HwCountersCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ContextSwitchCount) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_PERFORMANCE_DATA),
      "::",
      stringify!(ContextSwitchCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).WaitReasonBitMap) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_PERFORMANCE_DATA),
      "::",
      stringify!(WaitReasonBitMap)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CycleTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_PERFORMANCE_DATA),
      "::",
      stringify!(CycleTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RetryCount) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_PERFORMANCE_DATA),
      "::",
      stringify!(RetryCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_PERFORMANCE_DATA),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HwCounters) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_PERFORMANCE_DATA),
      "::",
      stringify!(HwCounters)
    )
  );
}
pub type PERFORMANCE_DATA = _PERFORMANCE_DATA;
pub type PPERFORMANCE_DATA = *mut _PERFORMANCE_DATA;
extern "C" {
  pub fn RtlGetDeviceFamilyInfoEnum(
    pullUAPInfo: *mut ULONGLONG,
    pulDeviceFamily: *mut DWORD,
    pulDeviceForm: *mut DWORD,
  );
}
extern "C" {
  pub fn RtlConvertDeviceFamilyInfoToString(
    pulDeviceFamilyBufferSize: PDWORD,
    pulDeviceFormBufferSize: PDWORD,
    DeviceFamily: PWSTR,
    DeviceForm: PWSTR,
  ) -> DWORD;
}
extern "C" {
  pub fn RtlSwitchedVVI(
    VersionInfo: PRTL_OSVERSIONINFOEXW,
    TypeMask: DWORD,
    ConditionMask: ULONGLONG,
  ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EVENTLOGRECORD {
  pub Length: DWORD,
  pub Reserved: DWORD,
  pub RecordNumber: DWORD,
  pub TimeGenerated: DWORD,
  pub TimeWritten: DWORD,
  pub EventID: DWORD,
  pub EventType: WORD,
  pub NumStrings: WORD,
  pub EventCategory: WORD,
  pub ReservedFlags: WORD,
  pub ClosingRecordNumber: DWORD,
  pub StringOffset: DWORD,
  pub UserSidLength: DWORD,
  pub UserSidOffset: DWORD,
  pub DataLength: DWORD,
  pub DataOffset: DWORD,
}
#[test]
fn bindgen_test_layout__EVENTLOGRECORD() {
  const UNINIT: ::std::mem::MaybeUninit<_EVENTLOGRECORD> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_EVENTLOGRECORD>(),
    56usize,
    concat!("Size of: ", stringify!(_EVENTLOGRECORD))
  );
  assert_eq!(
    ::std::mem::align_of::<_EVENTLOGRECORD>(),
    4usize,
    concat!("Alignment of ", stringify!(_EVENTLOGRECORD))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(Length)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(Reserved)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RecordNumber) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(RecordNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeGenerated) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(TimeGenerated)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TimeWritten) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(TimeWritten)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EventID) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(EventID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EventType) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(EventType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumStrings) as usize - ptr as usize },
    26usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(NumStrings)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EventCategory) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(EventCategory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReservedFlags) as usize - ptr as usize },
    30usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(ReservedFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ClosingRecordNumber) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(ClosingRecordNumber)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StringOffset) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(StringOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UserSidLength) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(UserSidLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UserSidOffset) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(UserSidOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataLength) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(DataLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataOffset) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTLOGRECORD),
      "::",
      stringify!(DataOffset)
    )
  );
}
pub type EVENTLOGRECORD = _EVENTLOGRECORD;
pub type PEVENTLOGRECORD = *mut _EVENTLOGRECORD;
pub type EVENTSFORLOGFILE = _EVENTSFORLOGFILE;
pub type PEVENTSFORLOGFILE = *mut _EVENTSFORLOGFILE;
pub type PACKEDEVENTINFO = _PACKEDEVENTINFO;
pub type PPACKEDEVENTINFO = *mut _PACKEDEVENTINFO;
#[repr(C)]
#[derive(Debug)]
pub struct _EVENTSFORLOGFILE {
  pub ulSize: DWORD,
  pub szLogicalLogFile: [WCHAR; 256usize],
  pub ulNumRecords: DWORD,
  pub pEventLogRecords: __IncompleteArrayField<EVENTLOGRECORD>,
}
#[test]
fn bindgen_test_layout__EVENTSFORLOGFILE() {
  const UNINIT: ::std::mem::MaybeUninit<_EVENTSFORLOGFILE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_EVENTSFORLOGFILE>(),
    520usize,
    concat!("Size of: ", stringify!(_EVENTSFORLOGFILE))
  );
  assert_eq!(
    ::std::mem::align_of::<_EVENTSFORLOGFILE>(),
    4usize,
    concat!("Alignment of ", stringify!(_EVENTSFORLOGFILE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTSFORLOGFILE),
      "::",
      stringify!(ulSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).szLogicalLogFile) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTSFORLOGFILE),
      "::",
      stringify!(szLogicalLogFile)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulNumRecords) as usize - ptr as usize },
    516usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTSFORLOGFILE),
      "::",
      stringify!(ulNumRecords)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pEventLogRecords) as usize - ptr as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_EVENTSFORLOGFILE),
      "::",
      stringify!(pEventLogRecords)
    )
  );
}
#[repr(C)]
#[derive(Debug)]
pub struct _PACKEDEVENTINFO {
  pub ulSize: DWORD,
  pub ulNumEventsForLogFile: DWORD,
  pub ulOffsets: __IncompleteArrayField<DWORD>,
}
#[test]
fn bindgen_test_layout__PACKEDEVENTINFO() {
  const UNINIT: ::std::mem::MaybeUninit<_PACKEDEVENTINFO> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_PACKEDEVENTINFO>(),
    8usize,
    concat!("Size of: ", stringify!(_PACKEDEVENTINFO))
  );
  assert_eq!(
    ::std::mem::align_of::<_PACKEDEVENTINFO>(),
    4usize,
    concat!("Alignment of ", stringify!(_PACKEDEVENTINFO))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PACKEDEVENTINFO),
      "::",
      stringify!(ulSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulNumEventsForLogFile) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_PACKEDEVENTINFO),
      "::",
      stringify!(ulNumEventsForLogFile)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ulOffsets) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_PACKEDEVENTINFO),
      "::",
      stringify!(ulOffsets)
    )
  );
}
pub const _CM_SERVICE_NODE_TYPE_DriverType: _CM_SERVICE_NODE_TYPE = 1;
pub const _CM_SERVICE_NODE_TYPE_FileSystemType: _CM_SERVICE_NODE_TYPE = 2;
pub const _CM_SERVICE_NODE_TYPE_Win32ServiceOwnProcess: _CM_SERVICE_NODE_TYPE = 16;
pub const _CM_SERVICE_NODE_TYPE_Win32ServiceShareProcess: _CM_SERVICE_NODE_TYPE = 32;
pub const _CM_SERVICE_NODE_TYPE_AdapterType: _CM_SERVICE_NODE_TYPE = 4;
pub const _CM_SERVICE_NODE_TYPE_RecognizerType: _CM_SERVICE_NODE_TYPE = 8;
pub type _CM_SERVICE_NODE_TYPE = ::std::os::raw::c_int;
pub use self::_CM_SERVICE_NODE_TYPE as SERVICE_NODE_TYPE;
pub const _CM_SERVICE_LOAD_TYPE_BootLoad: _CM_SERVICE_LOAD_TYPE = 0;
pub const _CM_SERVICE_LOAD_TYPE_SystemLoad: _CM_SERVICE_LOAD_TYPE = 1;
pub const _CM_SERVICE_LOAD_TYPE_AutoLoad: _CM_SERVICE_LOAD_TYPE = 2;
pub const _CM_SERVICE_LOAD_TYPE_DemandLoad: _CM_SERVICE_LOAD_TYPE = 3;
pub const _CM_SERVICE_LOAD_TYPE_DisableLoad: _CM_SERVICE_LOAD_TYPE = 4;
pub type _CM_SERVICE_LOAD_TYPE = ::std::os::raw::c_int;
pub use self::_CM_SERVICE_LOAD_TYPE as SERVICE_LOAD_TYPE;
pub const _CM_ERROR_CONTROL_TYPE_IgnoreError: _CM_ERROR_CONTROL_TYPE = 0;
pub const _CM_ERROR_CONTROL_TYPE_NormalError: _CM_ERROR_CONTROL_TYPE = 1;
pub const _CM_ERROR_CONTROL_TYPE_SevereError: _CM_ERROR_CONTROL_TYPE = 2;
pub const _CM_ERROR_CONTROL_TYPE_CriticalError: _CM_ERROR_CONTROL_TYPE = 3;
pub type _CM_ERROR_CONTROL_TYPE = ::std::os::raw::c_int;
pub use self::_CM_ERROR_CONTROL_TYPE as SERVICE_ERROR_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_ERASE {
  pub Type: DWORD,
  pub Immediate: BOOLEAN,
}
#[test]
fn bindgen_test_layout__TAPE_ERASE() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_ERASE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_ERASE>(),
    8usize,
    concat!("Size of: ", stringify!(_TAPE_ERASE))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_ERASE>(),
    4usize,
    concat!("Alignment of ", stringify!(_TAPE_ERASE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_ERASE),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Immediate) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_ERASE),
      "::",
      stringify!(Immediate)
    )
  );
}
pub type TAPE_ERASE = _TAPE_ERASE;
pub type PTAPE_ERASE = *mut _TAPE_ERASE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_PREPARE {
  pub Operation: DWORD,
  pub Immediate: BOOLEAN,
}
#[test]
fn bindgen_test_layout__TAPE_PREPARE() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_PREPARE> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_PREPARE>(),
    8usize,
    concat!("Size of: ", stringify!(_TAPE_PREPARE))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_PREPARE>(),
    4usize,
    concat!("Alignment of ", stringify!(_TAPE_PREPARE))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Operation) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_PREPARE),
      "::",
      stringify!(Operation)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Immediate) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_PREPARE),
      "::",
      stringify!(Immediate)
    )
  );
}
pub type TAPE_PREPARE = _TAPE_PREPARE;
pub type PTAPE_PREPARE = *mut _TAPE_PREPARE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_WRITE_MARKS {
  pub Type: DWORD,
  pub Count: DWORD,
  pub Immediate: BOOLEAN,
}
#[test]
fn bindgen_test_layout__TAPE_WRITE_MARKS() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_WRITE_MARKS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_WRITE_MARKS>(),
    12usize,
    concat!("Size of: ", stringify!(_TAPE_WRITE_MARKS))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_WRITE_MARKS>(),
    4usize,
    concat!("Alignment of ", stringify!(_TAPE_WRITE_MARKS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_WRITE_MARKS),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_WRITE_MARKS),
      "::",
      stringify!(Count)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Immediate) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_WRITE_MARKS),
      "::",
      stringify!(Immediate)
    )
  );
}
pub type TAPE_WRITE_MARKS = _TAPE_WRITE_MARKS;
pub type PTAPE_WRITE_MARKS = *mut _TAPE_WRITE_MARKS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TAPE_GET_POSITION {
  pub Type: DWORD,
  pub Partition: DWORD,
  pub Offset: LARGE_INTEGER,
}
#[test]
fn bindgen_test_layout__TAPE_GET_POSITION() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_GET_POSITION> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_GET_POSITION>(),
    16usize,
    concat!("Size of: ", stringify!(_TAPE_GET_POSITION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_GET_POSITION>(),
    8usize,
    concat!("Alignment of ", stringify!(_TAPE_GET_POSITION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_POSITION),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Partition) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_POSITION),
      "::",
      stringify!(Partition)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_POSITION),
      "::",
      stringify!(Offset)
    )
  );
}
pub type TAPE_GET_POSITION = _TAPE_GET_POSITION;
pub type PTAPE_GET_POSITION = *mut _TAPE_GET_POSITION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TAPE_SET_POSITION {
  pub Method: DWORD,
  pub Partition: DWORD,
  pub Offset: LARGE_INTEGER,
  pub Immediate: BOOLEAN,
}
#[test]
fn bindgen_test_layout__TAPE_SET_POSITION() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_SET_POSITION> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_SET_POSITION>(),
    24usize,
    concat!("Size of: ", stringify!(_TAPE_SET_POSITION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_SET_POSITION>(),
    8usize,
    concat!("Alignment of ", stringify!(_TAPE_SET_POSITION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Method) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_SET_POSITION),
      "::",
      stringify!(Method)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Partition) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_SET_POSITION),
      "::",
      stringify!(Partition)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_SET_POSITION),
      "::",
      stringify!(Offset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Immediate) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_SET_POSITION),
      "::",
      stringify!(Immediate)
    )
  );
}
pub type TAPE_SET_POSITION = _TAPE_SET_POSITION;
pub type PTAPE_SET_POSITION = *mut _TAPE_SET_POSITION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_GET_DRIVE_PARAMETERS {
  pub ECC: BOOLEAN,
  pub Compression: BOOLEAN,
  pub DataPadding: BOOLEAN,
  pub ReportSetmarks: BOOLEAN,
  pub DefaultBlockSize: DWORD,
  pub MaximumBlockSize: DWORD,
  pub MinimumBlockSize: DWORD,
  pub MaximumPartitionCount: DWORD,
  pub FeaturesLow: DWORD,
  pub FeaturesHigh: DWORD,
  pub EOTWarningZoneSize: DWORD,
}
#[test]
fn bindgen_test_layout__TAPE_GET_DRIVE_PARAMETERS() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_GET_DRIVE_PARAMETERS> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_GET_DRIVE_PARAMETERS>(),
    32usize,
    concat!("Size of: ", stringify!(_TAPE_GET_DRIVE_PARAMETERS))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_GET_DRIVE_PARAMETERS>(),
    4usize,
    concat!("Alignment of ", stringify!(_TAPE_GET_DRIVE_PARAMETERS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ECC) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(ECC)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Compression) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(Compression)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataPadding) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(DataPadding)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReportSetmarks) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(ReportSetmarks)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DefaultBlockSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(DefaultBlockSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumBlockSize) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(MaximumBlockSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MinimumBlockSize) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(MinimumBlockSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MaximumPartitionCount) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(MaximumPartitionCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FeaturesLow) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(FeaturesLow)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FeaturesHigh) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(FeaturesHigh)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EOTWarningZoneSize) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_DRIVE_PARAMETERS),
      "::",
      stringify!(EOTWarningZoneSize)
    )
  );
}
pub type TAPE_GET_DRIVE_PARAMETERS = _TAPE_GET_DRIVE_PARAMETERS;
pub type PTAPE_GET_DRIVE_PARAMETERS = *mut _TAPE_GET_DRIVE_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_SET_DRIVE_PARAMETERS {
  pub ECC: BOOLEAN,
  pub Compression: BOOLEAN,
  pub DataPadding: BOOLEAN,
  pub ReportSetmarks: BOOLEAN,
  pub EOTWarningZoneSize: DWORD,
}
#[test]
fn bindgen_test_layout__TAPE_SET_DRIVE_PARAMETERS() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_SET_DRIVE_PARAMETERS> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_SET_DRIVE_PARAMETERS>(),
    8usize,
    concat!("Size of: ", stringify!(_TAPE_SET_DRIVE_PARAMETERS))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_SET_DRIVE_PARAMETERS>(),
    4usize,
    concat!("Alignment of ", stringify!(_TAPE_SET_DRIVE_PARAMETERS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ECC) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_SET_DRIVE_PARAMETERS),
      "::",
      stringify!(ECC)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Compression) as usize - ptr as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_SET_DRIVE_PARAMETERS),
      "::",
      stringify!(Compression)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataPadding) as usize - ptr as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_SET_DRIVE_PARAMETERS),
      "::",
      stringify!(DataPadding)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ReportSetmarks) as usize - ptr as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_SET_DRIVE_PARAMETERS),
      "::",
      stringify!(ReportSetmarks)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EOTWarningZoneSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_SET_DRIVE_PARAMETERS),
      "::",
      stringify!(EOTWarningZoneSize)
    )
  );
}
pub type TAPE_SET_DRIVE_PARAMETERS = _TAPE_SET_DRIVE_PARAMETERS;
pub type PTAPE_SET_DRIVE_PARAMETERS = *mut _TAPE_SET_DRIVE_PARAMETERS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TAPE_GET_MEDIA_PARAMETERS {
  pub Capacity: LARGE_INTEGER,
  pub Remaining: LARGE_INTEGER,
  pub BlockSize: DWORD,
  pub PartitionCount: DWORD,
  pub WriteProtected: BOOLEAN,
}
#[test]
fn bindgen_test_layout__TAPE_GET_MEDIA_PARAMETERS() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_GET_MEDIA_PARAMETERS> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_GET_MEDIA_PARAMETERS>(),
    32usize,
    concat!("Size of: ", stringify!(_TAPE_GET_MEDIA_PARAMETERS))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_GET_MEDIA_PARAMETERS>(),
    8usize,
    concat!("Alignment of ", stringify!(_TAPE_GET_MEDIA_PARAMETERS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_MEDIA_PARAMETERS),
      "::",
      stringify!(Capacity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Remaining) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_MEDIA_PARAMETERS),
      "::",
      stringify!(Remaining)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BlockSize) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_MEDIA_PARAMETERS),
      "::",
      stringify!(BlockSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PartitionCount) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_MEDIA_PARAMETERS),
      "::",
      stringify!(PartitionCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).WriteProtected) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_GET_MEDIA_PARAMETERS),
      "::",
      stringify!(WriteProtected)
    )
  );
}
pub type TAPE_GET_MEDIA_PARAMETERS = _TAPE_GET_MEDIA_PARAMETERS;
pub type PTAPE_GET_MEDIA_PARAMETERS = *mut _TAPE_GET_MEDIA_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_SET_MEDIA_PARAMETERS {
  pub BlockSize: DWORD,
}
#[test]
fn bindgen_test_layout__TAPE_SET_MEDIA_PARAMETERS() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_SET_MEDIA_PARAMETERS> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_SET_MEDIA_PARAMETERS>(),
    4usize,
    concat!("Size of: ", stringify!(_TAPE_SET_MEDIA_PARAMETERS))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_SET_MEDIA_PARAMETERS>(),
    4usize,
    concat!("Alignment of ", stringify!(_TAPE_SET_MEDIA_PARAMETERS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BlockSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_SET_MEDIA_PARAMETERS),
      "::",
      stringify!(BlockSize)
    )
  );
}
pub type TAPE_SET_MEDIA_PARAMETERS = _TAPE_SET_MEDIA_PARAMETERS;
pub type PTAPE_SET_MEDIA_PARAMETERS = *mut _TAPE_SET_MEDIA_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_CREATE_PARTITION {
  pub Method: DWORD,
  pub Count: DWORD,
  pub Size: DWORD,
}
#[test]
fn bindgen_test_layout__TAPE_CREATE_PARTITION() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_CREATE_PARTITION> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_CREATE_PARTITION>(),
    12usize,
    concat!("Size of: ", stringify!(_TAPE_CREATE_PARTITION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_CREATE_PARTITION>(),
    4usize,
    concat!("Alignment of ", stringify!(_TAPE_CREATE_PARTITION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Method) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_CREATE_PARTITION),
      "::",
      stringify!(Method)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_CREATE_PARTITION),
      "::",
      stringify!(Count)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_CREATE_PARTITION),
      "::",
      stringify!(Size)
    )
  );
}
pub type TAPE_CREATE_PARTITION = _TAPE_CREATE_PARTITION;
pub type PTAPE_CREATE_PARTITION = *mut _TAPE_CREATE_PARTITION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_WMI_OPERATIONS {
  pub Method: DWORD,
  pub DataBufferSize: DWORD,
  pub DataBuffer: PVOID,
}
#[test]
fn bindgen_test_layout__TAPE_WMI_OPERATIONS() {
  const UNINIT: ::std::mem::MaybeUninit<_TAPE_WMI_OPERATIONS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TAPE_WMI_OPERATIONS>(),
    16usize,
    concat!("Size of: ", stringify!(_TAPE_WMI_OPERATIONS))
  );
  assert_eq!(
    ::std::mem::align_of::<_TAPE_WMI_OPERATIONS>(),
    8usize,
    concat!("Alignment of ", stringify!(_TAPE_WMI_OPERATIONS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Method) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_WMI_OPERATIONS),
      "::",
      stringify!(Method)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataBufferSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_WMI_OPERATIONS),
      "::",
      stringify!(DataBufferSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DataBuffer) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TAPE_WMI_OPERATIONS),
      "::",
      stringify!(DataBuffer)
    )
  );
}
pub type TAPE_WMI_OPERATIONS = _TAPE_WMI_OPERATIONS;
pub type PTAPE_WMI_OPERATIONS = *mut _TAPE_WMI_OPERATIONS;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveProblemNone: _TAPE_DRIVE_PROBLEM_TYPE = 0;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadWriteWarning: _TAPE_DRIVE_PROBLEM_TYPE = 1;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadWriteError: _TAPE_DRIVE_PROBLEM_TYPE = 2;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadWarning: _TAPE_DRIVE_PROBLEM_TYPE = 3;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveWriteWarning: _TAPE_DRIVE_PROBLEM_TYPE = 4;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadError: _TAPE_DRIVE_PROBLEM_TYPE = 5;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveWriteError: _TAPE_DRIVE_PROBLEM_TYPE = 6;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveHardwareError: _TAPE_DRIVE_PROBLEM_TYPE = 7;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveUnsupportedMedia: _TAPE_DRIVE_PROBLEM_TYPE = 8;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveScsiConnectionError: _TAPE_DRIVE_PROBLEM_TYPE = 9;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveTimetoClean: _TAPE_DRIVE_PROBLEM_TYPE = 10;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveCleanDriveNow: _TAPE_DRIVE_PROBLEM_TYPE = 11;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveMediaLifeExpired: _TAPE_DRIVE_PROBLEM_TYPE = 12;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveSnappedTape: _TAPE_DRIVE_PROBLEM_TYPE = 13;
pub type _TAPE_DRIVE_PROBLEM_TYPE = ::std::os::raw::c_int;
pub use self::_TAPE_DRIVE_PROBLEM_TYPE as TAPE_DRIVE_PROBLEM_TYPE;
pub type UOW = GUID;
pub type PUOW = *mut GUID;
pub type CRM_PROTOCOL_ID = GUID;
pub type PCRM_PROTOCOL_ID = *mut GUID;
pub type NOTIFICATION_MASK = ULONG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION {
  pub TransactionKey: PVOID,
  pub TransactionNotification: ULONG,
  pub TmVirtualClock: LARGE_INTEGER,
  pub ArgumentLength: ULONG,
}
#[test]
fn bindgen_test_layout__TRANSACTION_NOTIFICATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_NOTIFICATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_NOTIFICATION>(),
    32usize,
    concat!("Size of: ", stringify!(_TRANSACTION_NOTIFICATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_NOTIFICATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_TRANSACTION_NOTIFICATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TransactionKey) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION),
      "::",
      stringify!(TransactionKey)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TransactionNotification) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION),
      "::",
      stringify!(TransactionNotification)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TmVirtualClock) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION),
      "::",
      stringify!(TmVirtualClock)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ArgumentLength) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION),
      "::",
      stringify!(ArgumentLength)
    )
  );
}
pub type TRANSACTION_NOTIFICATION = _TRANSACTION_NOTIFICATION;
pub type PTRANSACTION_NOTIFICATION = *mut _TRANSACTION_NOTIFICATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
  pub EnlistmentId: GUID,
  pub UOW: UOW,
}
#[test]
fn bindgen_test_layout__TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT>(),
    32usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnlistmentId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT),
      "::",
      stringify!(EnlistmentId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UOW) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT),
      "::",
      stringify!(UOW)
    )
  );
}
pub type TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT =
  *mut _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
  pub TmIdentity: GUID,
  pub Flags: ULONG,
}
#[test]
fn bindgen_test_layout__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT>(),
    20usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TmIdentity) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT),
      "::",
      stringify!(TmIdentity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT),
      "::",
      stringify!(Flags)
    )
  );
}
pub type TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT =
  *mut _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
pub type SAVEPOINT_ID = ULONG;
pub type PSAVEPOINT_ID = *mut ULONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
  pub SavepointId: SAVEPOINT_ID,
}
#[test]
fn bindgen_test_layout__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SavepointId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT),
      "::",
      stringify!(SavepointId)
    )
  );
}
pub type TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT =
  *mut _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
  pub PropagationCookie: ULONG,
  pub UOW: GUID,
  pub TmIdentity: GUID,
  pub BufferLength: ULONG,
}
#[test]
fn bindgen_test_layout__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT>(),
    40usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).PropagationCookie) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT),
      "::",
      stringify!(PropagationCookie)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UOW) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT),
      "::",
      stringify!(UOW)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TmIdentity) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT),
      "::",
      stringify!(TmIdentity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BufferLength) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT),
      "::",
      stringify!(BufferLength)
    )
  );
}
pub type TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT =
  *mut _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
  pub MarshalCookie: ULONG,
  pub UOW: GUID,
}
#[test]
fn bindgen_test_layout__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT>(),
    20usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MarshalCookie) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT),
      "::",
      stringify!(MarshalCookie)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UOW) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT),
      "::",
      stringify!(UOW)
    )
  );
}
pub type TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT =
  *mut _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
pub type TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT =
  *mut TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KCRM_MARSHAL_HEADER {
  pub VersionMajor: ULONG,
  pub VersionMinor: ULONG,
  pub NumProtocols: ULONG,
  pub Unused: ULONG,
}
#[test]
fn bindgen_test_layout__KCRM_MARSHAL_HEADER() {
  const UNINIT: ::std::mem::MaybeUninit<_KCRM_MARSHAL_HEADER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KCRM_MARSHAL_HEADER>(),
    16usize,
    concat!("Size of: ", stringify!(_KCRM_MARSHAL_HEADER))
  );
  assert_eq!(
    ::std::mem::align_of::<_KCRM_MARSHAL_HEADER>(),
    4usize,
    concat!("Alignment of ", stringify!(_KCRM_MARSHAL_HEADER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VersionMajor) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_MARSHAL_HEADER),
      "::",
      stringify!(VersionMajor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VersionMinor) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_MARSHAL_HEADER),
      "::",
      stringify!(VersionMinor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumProtocols) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_MARSHAL_HEADER),
      "::",
      stringify!(NumProtocols)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Unused) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_MARSHAL_HEADER),
      "::",
      stringify!(Unused)
    )
  );
}
pub type KCRM_MARSHAL_HEADER = _KCRM_MARSHAL_HEADER;
pub type PKCRM_MARSHAL_HEADER = *mut _KCRM_MARSHAL_HEADER;
pub type PRKCRM_MARSHAL_HEADER = *mut _KCRM_MARSHAL_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KCRM_TRANSACTION_BLOB {
  pub UOW: UOW,
  pub TmIdentity: GUID,
  pub IsolationLevel: ULONG,
  pub IsolationFlags: ULONG,
  pub Timeout: ULONG,
  pub Description: [WCHAR; 64usize],
}
#[test]
fn bindgen_test_layout__KCRM_TRANSACTION_BLOB() {
  const UNINIT: ::std::mem::MaybeUninit<_KCRM_TRANSACTION_BLOB> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KCRM_TRANSACTION_BLOB>(),
    172usize,
    concat!("Size of: ", stringify!(_KCRM_TRANSACTION_BLOB))
  );
  assert_eq!(
    ::std::mem::align_of::<_KCRM_TRANSACTION_BLOB>(),
    4usize,
    concat!("Alignment of ", stringify!(_KCRM_TRANSACTION_BLOB))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UOW) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_TRANSACTION_BLOB),
      "::",
      stringify!(UOW)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TmIdentity) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_TRANSACTION_BLOB),
      "::",
      stringify!(TmIdentity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IsolationLevel) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_TRANSACTION_BLOB),
      "::",
      stringify!(IsolationLevel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IsolationFlags) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_TRANSACTION_BLOB),
      "::",
      stringify!(IsolationFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Timeout) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_TRANSACTION_BLOB),
      "::",
      stringify!(Timeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Description) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_TRANSACTION_BLOB),
      "::",
      stringify!(Description)
    )
  );
}
pub type KCRM_TRANSACTION_BLOB = _KCRM_TRANSACTION_BLOB;
pub type PKCRM_TRANSACTION_BLOB = *mut _KCRM_TRANSACTION_BLOB;
pub type PRKCRM_TRANSACTION_BLOB = *mut _KCRM_TRANSACTION_BLOB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KCRM_PROTOCOL_BLOB {
  pub ProtocolId: CRM_PROTOCOL_ID,
  pub StaticInfoLength: ULONG,
  pub TransactionIdInfoLength: ULONG,
  pub Unused1: ULONG,
  pub Unused2: ULONG,
}
#[test]
fn bindgen_test_layout__KCRM_PROTOCOL_BLOB() {
  const UNINIT: ::std::mem::MaybeUninit<_KCRM_PROTOCOL_BLOB> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KCRM_PROTOCOL_BLOB>(),
    32usize,
    concat!("Size of: ", stringify!(_KCRM_PROTOCOL_BLOB))
  );
  assert_eq!(
    ::std::mem::align_of::<_KCRM_PROTOCOL_BLOB>(),
    4usize,
    concat!("Alignment of ", stringify!(_KCRM_PROTOCOL_BLOB))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ProtocolId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_PROTOCOL_BLOB),
      "::",
      stringify!(ProtocolId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StaticInfoLength) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_PROTOCOL_BLOB),
      "::",
      stringify!(StaticInfoLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TransactionIdInfoLength) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_PROTOCOL_BLOB),
      "::",
      stringify!(TransactionIdInfoLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Unused1) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_PROTOCOL_BLOB),
      "::",
      stringify!(Unused1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Unused2) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_KCRM_PROTOCOL_BLOB),
      "::",
      stringify!(Unused2)
    )
  );
}
pub type KCRM_PROTOCOL_BLOB = _KCRM_PROTOCOL_BLOB;
pub type PKCRM_PROTOCOL_BLOB = *mut _KCRM_PROTOCOL_BLOB;
pub type PRKCRM_PROTOCOL_BLOB = *mut _KCRM_PROTOCOL_BLOB;
pub const _TRANSACTION_OUTCOME_TransactionOutcomeUndetermined: _TRANSACTION_OUTCOME = 1;
pub const _TRANSACTION_OUTCOME_TransactionOutcomeCommitted: _TRANSACTION_OUTCOME = 2;
pub const _TRANSACTION_OUTCOME_TransactionOutcomeAborted: _TRANSACTION_OUTCOME = 3;
pub type _TRANSACTION_OUTCOME = ::std::os::raw::c_int;
pub use self::_TRANSACTION_OUTCOME as TRANSACTION_OUTCOME;
pub const _TRANSACTION_STATE_TransactionStateNormal: _TRANSACTION_STATE = 1;
pub const _TRANSACTION_STATE_TransactionStateIndoubt: _TRANSACTION_STATE = 2;
pub const _TRANSACTION_STATE_TransactionStateCommittedNotify: _TRANSACTION_STATE = 3;
pub type _TRANSACTION_STATE = ::std::os::raw::c_int;
pub use self::_TRANSACTION_STATE as TRANSACTION_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_BASIC_INFORMATION {
  pub TransactionId: GUID,
  pub State: DWORD,
  pub Outcome: DWORD,
}
#[test]
fn bindgen_test_layout__TRANSACTION_BASIC_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_BASIC_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_BASIC_INFORMATION>(),
    24usize,
    concat!("Size of: ", stringify!(_TRANSACTION_BASIC_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_BASIC_INFORMATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_TRANSACTION_BASIC_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TransactionId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_BASIC_INFORMATION),
      "::",
      stringify!(TransactionId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_BASIC_INFORMATION),
      "::",
      stringify!(State)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Outcome) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_BASIC_INFORMATION),
      "::",
      stringify!(Outcome)
    )
  );
}
pub type TRANSACTION_BASIC_INFORMATION = _TRANSACTION_BASIC_INFORMATION;
pub type PTRANSACTION_BASIC_INFORMATION = *mut _TRANSACTION_BASIC_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
  pub TmIdentity: GUID,
  pub VirtualClock: LARGE_INTEGER,
}
#[test]
fn bindgen_test_layout__TRANSACTIONMANAGER_BASIC_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTIONMANAGER_BASIC_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTIONMANAGER_BASIC_INFORMATION>(),
    24usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTIONMANAGER_BASIC_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTIONMANAGER_BASIC_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTIONMANAGER_BASIC_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TmIdentity) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTIONMANAGER_BASIC_INFORMATION),
      "::",
      stringify!(TmIdentity)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VirtualClock) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTIONMANAGER_BASIC_INFORMATION),
      "::",
      stringify!(VirtualClock)
    )
  );
}
pub type TRANSACTIONMANAGER_BASIC_INFORMATION = _TRANSACTIONMANAGER_BASIC_INFORMATION;
pub type PTRANSACTIONMANAGER_BASIC_INFORMATION = *mut _TRANSACTIONMANAGER_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTIONMANAGER_LOG_INFORMATION {
  pub LogIdentity: GUID,
}
#[test]
fn bindgen_test_layout__TRANSACTIONMANAGER_LOG_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTIONMANAGER_LOG_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTIONMANAGER_LOG_INFORMATION>(),
    16usize,
    concat!("Size of: ", stringify!(_TRANSACTIONMANAGER_LOG_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTIONMANAGER_LOG_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTIONMANAGER_LOG_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LogIdentity) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTIONMANAGER_LOG_INFORMATION),
      "::",
      stringify!(LogIdentity)
    )
  );
}
pub type TRANSACTIONMANAGER_LOG_INFORMATION = _TRANSACTIONMANAGER_LOG_INFORMATION;
pub type PTRANSACTIONMANAGER_LOG_INFORMATION = *mut _TRANSACTIONMANAGER_LOG_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
  pub LogPathLength: DWORD,
  pub LogPath: [WCHAR; 1usize],
}
#[test]
fn bindgen_test_layout__TRANSACTIONMANAGER_LOGPATH_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTIONMANAGER_LOGPATH_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTIONMANAGER_LOGPATH_INFORMATION>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTIONMANAGER_LOGPATH_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTIONMANAGER_LOGPATH_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTIONMANAGER_LOGPATH_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LogPathLength) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTIONMANAGER_LOGPATH_INFORMATION),
      "::",
      stringify!(LogPathLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LogPath) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTIONMANAGER_LOGPATH_INFORMATION),
      "::",
      stringify!(LogPath)
    )
  );
}
pub type TRANSACTIONMANAGER_LOGPATH_INFORMATION = _TRANSACTIONMANAGER_LOGPATH_INFORMATION;
pub type PTRANSACTIONMANAGER_LOGPATH_INFORMATION = *mut _TRANSACTIONMANAGER_LOGPATH_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
  pub LastRecoveredLsn: ULONGLONG,
}
#[test]
fn bindgen_test_layout__TRANSACTIONMANAGER_RECOVERY_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTIONMANAGER_RECOVERY_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTIONMANAGER_RECOVERY_INFORMATION>(),
    8usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTIONMANAGER_RECOVERY_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTIONMANAGER_RECOVERY_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTIONMANAGER_RECOVERY_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastRecoveredLsn) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTIONMANAGER_RECOVERY_INFORMATION),
      "::",
      stringify!(LastRecoveredLsn)
    )
  );
}
pub type TRANSACTIONMANAGER_RECOVERY_INFORMATION = _TRANSACTIONMANAGER_RECOVERY_INFORMATION;
pub type PTRANSACTIONMANAGER_RECOVERY_INFORMATION = *mut _TRANSACTIONMANAGER_RECOVERY_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
  pub OldestTransactionGuid: GUID,
}
#[test]
fn bindgen_test_layout__TRANSACTIONMANAGER_OLDEST_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTIONMANAGER_OLDEST_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTIONMANAGER_OLDEST_INFORMATION>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTIONMANAGER_OLDEST_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTIONMANAGER_OLDEST_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTIONMANAGER_OLDEST_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OldestTransactionGuid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTIONMANAGER_OLDEST_INFORMATION),
      "::",
      stringify!(OldestTransactionGuid)
    )
  );
}
pub type TRANSACTIONMANAGER_OLDEST_INFORMATION = _TRANSACTIONMANAGER_OLDEST_INFORMATION;
pub type PTRANSACTIONMANAGER_OLDEST_INFORMATION = *mut _TRANSACTIONMANAGER_OLDEST_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TRANSACTION_PROPERTIES_INFORMATION {
  pub IsolationLevel: DWORD,
  pub IsolationFlags: DWORD,
  pub Timeout: LARGE_INTEGER,
  pub Outcome: DWORD,
  pub DescriptionLength: DWORD,
  pub Description: [WCHAR; 1usize],
}
#[test]
fn bindgen_test_layout__TRANSACTION_PROPERTIES_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_PROPERTIES_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_PROPERTIES_INFORMATION>(),
    32usize,
    concat!("Size of: ", stringify!(_TRANSACTION_PROPERTIES_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_PROPERTIES_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTION_PROPERTIES_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IsolationLevel) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_PROPERTIES_INFORMATION),
      "::",
      stringify!(IsolationLevel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IsolationFlags) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_PROPERTIES_INFORMATION),
      "::",
      stringify!(IsolationFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Timeout) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_PROPERTIES_INFORMATION),
      "::",
      stringify!(Timeout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Outcome) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_PROPERTIES_INFORMATION),
      "::",
      stringify!(Outcome)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DescriptionLength) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_PROPERTIES_INFORMATION),
      "::",
      stringify!(DescriptionLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Description) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_PROPERTIES_INFORMATION),
      "::",
      stringify!(Description)
    )
  );
}
pub type TRANSACTION_PROPERTIES_INFORMATION = _TRANSACTION_PROPERTIES_INFORMATION;
pub type PTRANSACTION_PROPERTIES_INFORMATION = *mut _TRANSACTION_PROPERTIES_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_BIND_INFORMATION {
  pub TmHandle: HANDLE,
}
#[test]
fn bindgen_test_layout__TRANSACTION_BIND_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_BIND_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_BIND_INFORMATION>(),
    8usize,
    concat!("Size of: ", stringify!(_TRANSACTION_BIND_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_BIND_INFORMATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_TRANSACTION_BIND_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TmHandle) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_BIND_INFORMATION),
      "::",
      stringify!(TmHandle)
    )
  );
}
pub type TRANSACTION_BIND_INFORMATION = _TRANSACTION_BIND_INFORMATION;
pub type PTRANSACTION_BIND_INFORMATION = *mut _TRANSACTION_BIND_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_ENLISTMENT_PAIR {
  pub EnlistmentId: GUID,
  pub ResourceManagerId: GUID,
}
#[test]
fn bindgen_test_layout__TRANSACTION_ENLISTMENT_PAIR() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_ENLISTMENT_PAIR> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_ENLISTMENT_PAIR>(),
    32usize,
    concat!("Size of: ", stringify!(_TRANSACTION_ENLISTMENT_PAIR))
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_ENLISTMENT_PAIR>(),
    4usize,
    concat!("Alignment of ", stringify!(_TRANSACTION_ENLISTMENT_PAIR))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnlistmentId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_ENLISTMENT_PAIR),
      "::",
      stringify!(EnlistmentId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ResourceManagerId) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_ENLISTMENT_PAIR),
      "::",
      stringify!(ResourceManagerId)
    )
  );
}
pub type TRANSACTION_ENLISTMENT_PAIR = _TRANSACTION_ENLISTMENT_PAIR;
pub type PTRANSACTION_ENLISTMENT_PAIR = *mut _TRANSACTION_ENLISTMENT_PAIR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_ENLISTMENTS_INFORMATION {
  pub NumberOfEnlistments: DWORD,
  pub EnlistmentPair: [TRANSACTION_ENLISTMENT_PAIR; 1usize],
}
#[test]
fn bindgen_test_layout__TRANSACTION_ENLISTMENTS_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_ENLISTMENTS_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_ENLISTMENTS_INFORMATION>(),
    36usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTION_ENLISTMENTS_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_ENLISTMENTS_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTION_ENLISTMENTS_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfEnlistments) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_ENLISTMENTS_INFORMATION),
      "::",
      stringify!(NumberOfEnlistments)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnlistmentPair) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_ENLISTMENTS_INFORMATION),
      "::",
      stringify!(EnlistmentPair)
    )
  );
}
pub type TRANSACTION_ENLISTMENTS_INFORMATION = _TRANSACTION_ENLISTMENTS_INFORMATION;
pub type PTRANSACTION_ENLISTMENTS_INFORMATION = *mut _TRANSACTION_ENLISTMENTS_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
  pub SuperiorEnlistmentPair: TRANSACTION_ENLISTMENT_PAIR,
}
#[test]
fn bindgen_test_layout__TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION>(),
    32usize,
    concat!(
      "Size of: ",
      stringify!(_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).SuperiorEnlistmentPair) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION),
      "::",
      stringify!(SuperiorEnlistmentPair)
    )
  );
}
pub type TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
pub type PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION =
  *mut _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RESOURCEMANAGER_BASIC_INFORMATION {
  pub ResourceManagerId: GUID,
  pub DescriptionLength: DWORD,
  pub Description: [WCHAR; 1usize],
}
#[test]
fn bindgen_test_layout__RESOURCEMANAGER_BASIC_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_RESOURCEMANAGER_BASIC_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_RESOURCEMANAGER_BASIC_INFORMATION>(),
    24usize,
    concat!("Size of: ", stringify!(_RESOURCEMANAGER_BASIC_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_RESOURCEMANAGER_BASIC_INFORMATION>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_RESOURCEMANAGER_BASIC_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ResourceManagerId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_RESOURCEMANAGER_BASIC_INFORMATION),
      "::",
      stringify!(ResourceManagerId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DescriptionLength) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_RESOURCEMANAGER_BASIC_INFORMATION),
      "::",
      stringify!(DescriptionLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Description) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_RESOURCEMANAGER_BASIC_INFORMATION),
      "::",
      stringify!(Description)
    )
  );
}
pub type RESOURCEMANAGER_BASIC_INFORMATION = _RESOURCEMANAGER_BASIC_INFORMATION;
pub type PRESOURCEMANAGER_BASIC_INFORMATION = *mut _RESOURCEMANAGER_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
  pub IoCompletionPortHandle: HANDLE,
  pub CompletionKey: ULONG_PTR,
}
#[test]
fn bindgen_test_layout__RESOURCEMANAGER_COMPLETION_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_RESOURCEMANAGER_COMPLETION_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_RESOURCEMANAGER_COMPLETION_INFORMATION>(),
    16usize,
    concat!(
      "Size of: ",
      stringify!(_RESOURCEMANAGER_COMPLETION_INFORMATION)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_RESOURCEMANAGER_COMPLETION_INFORMATION>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_RESOURCEMANAGER_COMPLETION_INFORMATION)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).IoCompletionPortHandle) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_RESOURCEMANAGER_COMPLETION_INFORMATION),
      "::",
      stringify!(IoCompletionPortHandle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CompletionKey) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_RESOURCEMANAGER_COMPLETION_INFORMATION),
      "::",
      stringify!(CompletionKey)
    )
  );
}
pub type RESOURCEMANAGER_COMPLETION_INFORMATION = _RESOURCEMANAGER_COMPLETION_INFORMATION;
pub type PRESOURCEMANAGER_COMPLETION_INFORMATION = *mut _RESOURCEMANAGER_COMPLETION_INFORMATION;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionBasicInformation:
  _TRANSACTION_INFORMATION_CLASS = 0;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionPropertiesInformation:
  _TRANSACTION_INFORMATION_CLASS = 1;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionEnlistmentInformation:
  _TRANSACTION_INFORMATION_CLASS = 2;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionSuperiorEnlistmentInformation:
  _TRANSACTION_INFORMATION_CLASS = 3;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionBindInformation:
  _TRANSACTION_INFORMATION_CLASS = 4;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionDTCPrivateInformation:
  _TRANSACTION_INFORMATION_CLASS = 5;
pub type _TRANSACTION_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_TRANSACTION_INFORMATION_CLASS as TRANSACTION_INFORMATION_CLASS;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerBasicInformation:
  _TRANSACTIONMANAGER_INFORMATION_CLASS = 0;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerLogInformation:
  _TRANSACTIONMANAGER_INFORMATION_CLASS = 1;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerLogPathInformation:
  _TRANSACTIONMANAGER_INFORMATION_CLASS = 2;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerRecoveryInformation:
  _TRANSACTIONMANAGER_INFORMATION_CLASS = 4;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerOnlineProbeInformation:
  _TRANSACTIONMANAGER_INFORMATION_CLASS = 3;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerOldestTransactionInformation:
  _TRANSACTIONMANAGER_INFORMATION_CLASS = 5;
pub type _TRANSACTIONMANAGER_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_TRANSACTIONMANAGER_INFORMATION_CLASS as TRANSACTIONMANAGER_INFORMATION_CLASS;
pub const _RESOURCEMANAGER_INFORMATION_CLASS_ResourceManagerBasicInformation:
  _RESOURCEMANAGER_INFORMATION_CLASS = 0;
pub const _RESOURCEMANAGER_INFORMATION_CLASS_ResourceManagerCompletionInformation:
  _RESOURCEMANAGER_INFORMATION_CLASS = 1;
pub type _RESOURCEMANAGER_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_RESOURCEMANAGER_INFORMATION_CLASS as RESOURCEMANAGER_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENLISTMENT_BASIC_INFORMATION {
  pub EnlistmentId: GUID,
  pub TransactionId: GUID,
  pub ResourceManagerId: GUID,
}
#[test]
fn bindgen_test_layout__ENLISTMENT_BASIC_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_ENLISTMENT_BASIC_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ENLISTMENT_BASIC_INFORMATION>(),
    48usize,
    concat!("Size of: ", stringify!(_ENLISTMENT_BASIC_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_ENLISTMENT_BASIC_INFORMATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_ENLISTMENT_BASIC_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).EnlistmentId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENLISTMENT_BASIC_INFORMATION),
      "::",
      stringify!(EnlistmentId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TransactionId) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENLISTMENT_BASIC_INFORMATION),
      "::",
      stringify!(TransactionId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ResourceManagerId) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENLISTMENT_BASIC_INFORMATION),
      "::",
      stringify!(ResourceManagerId)
    )
  );
}
pub type ENLISTMENT_BASIC_INFORMATION = _ENLISTMENT_BASIC_INFORMATION;
pub type PENLISTMENT_BASIC_INFORMATION = *mut _ENLISTMENT_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENLISTMENT_CRM_INFORMATION {
  pub CrmTransactionManagerId: GUID,
  pub CrmResourceManagerId: GUID,
  pub CrmEnlistmentId: GUID,
}
#[test]
fn bindgen_test_layout__ENLISTMENT_CRM_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_ENLISTMENT_CRM_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_ENLISTMENT_CRM_INFORMATION>(),
    48usize,
    concat!("Size of: ", stringify!(_ENLISTMENT_CRM_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_ENLISTMENT_CRM_INFORMATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_ENLISTMENT_CRM_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CrmTransactionManagerId) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENLISTMENT_CRM_INFORMATION),
      "::",
      stringify!(CrmTransactionManagerId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CrmResourceManagerId) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENLISTMENT_CRM_INFORMATION),
      "::",
      stringify!(CrmResourceManagerId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CrmEnlistmentId) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_ENLISTMENT_CRM_INFORMATION),
      "::",
      stringify!(CrmEnlistmentId)
    )
  );
}
pub type ENLISTMENT_CRM_INFORMATION = _ENLISTMENT_CRM_INFORMATION;
pub type PENLISTMENT_CRM_INFORMATION = *mut _ENLISTMENT_CRM_INFORMATION;
pub const _ENLISTMENT_INFORMATION_CLASS_EnlistmentBasicInformation: _ENLISTMENT_INFORMATION_CLASS =
  0;
pub const _ENLISTMENT_INFORMATION_CLASS_EnlistmentRecoveryInformation:
  _ENLISTMENT_INFORMATION_CLASS = 1;
pub const _ENLISTMENT_INFORMATION_CLASS_EnlistmentCrmInformation: _ENLISTMENT_INFORMATION_CLASS = 2;
pub type _ENLISTMENT_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_ENLISTMENT_INFORMATION_CLASS as ENLISTMENT_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_LIST_ENTRY {
  pub UOW: UOW,
}
#[test]
fn bindgen_test_layout__TRANSACTION_LIST_ENTRY() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_LIST_ENTRY> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_LIST_ENTRY>(),
    16usize,
    concat!("Size of: ", stringify!(_TRANSACTION_LIST_ENTRY))
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_LIST_ENTRY>(),
    4usize,
    concat!("Alignment of ", stringify!(_TRANSACTION_LIST_ENTRY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UOW) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_LIST_ENTRY),
      "::",
      stringify!(UOW)
    )
  );
}
pub type TRANSACTION_LIST_ENTRY = _TRANSACTION_LIST_ENTRY;
pub type PTRANSACTION_LIST_ENTRY = *mut _TRANSACTION_LIST_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_LIST_INFORMATION {
  pub NumberOfTransactions: DWORD,
  pub TransactionInformation: [TRANSACTION_LIST_ENTRY; 1usize],
}
#[test]
fn bindgen_test_layout__TRANSACTION_LIST_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TRANSACTION_LIST_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TRANSACTION_LIST_INFORMATION>(),
    20usize,
    concat!("Size of: ", stringify!(_TRANSACTION_LIST_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TRANSACTION_LIST_INFORMATION>(),
    4usize,
    concat!("Alignment of ", stringify!(_TRANSACTION_LIST_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).NumberOfTransactions) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_LIST_INFORMATION),
      "::",
      stringify!(NumberOfTransactions)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).TransactionInformation) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TRANSACTION_LIST_INFORMATION),
      "::",
      stringify!(TransactionInformation)
    )
  );
}
pub type TRANSACTION_LIST_INFORMATION = _TRANSACTION_LIST_INFORMATION;
pub type PTRANSACTION_LIST_INFORMATION = *mut _TRANSACTION_LIST_INFORMATION;
pub const _KTMOBJECT_TYPE_KTMOBJECT_TRANSACTION: _KTMOBJECT_TYPE = 0;
pub const _KTMOBJECT_TYPE_KTMOBJECT_TRANSACTION_MANAGER: _KTMOBJECT_TYPE = 1;
pub const _KTMOBJECT_TYPE_KTMOBJECT_RESOURCE_MANAGER: _KTMOBJECT_TYPE = 2;
pub const _KTMOBJECT_TYPE_KTMOBJECT_ENLISTMENT: _KTMOBJECT_TYPE = 3;
pub const _KTMOBJECT_TYPE_KTMOBJECT_INVALID: _KTMOBJECT_TYPE = 4;
pub type _KTMOBJECT_TYPE = ::std::os::raw::c_int;
pub use self::_KTMOBJECT_TYPE as KTMOBJECT_TYPE;
pub type PKTMOBJECT_TYPE = *mut _KTMOBJECT_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KTMOBJECT_CURSOR {
  pub LastQuery: GUID,
  pub ObjectIdCount: DWORD,
  pub ObjectIds: [GUID; 1usize],
}
#[test]
fn bindgen_test_layout__KTMOBJECT_CURSOR() {
  const UNINIT: ::std::mem::MaybeUninit<_KTMOBJECT_CURSOR> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_KTMOBJECT_CURSOR>(),
    36usize,
    concat!("Size of: ", stringify!(_KTMOBJECT_CURSOR))
  );
  assert_eq!(
    ::std::mem::align_of::<_KTMOBJECT_CURSOR>(),
    4usize,
    concat!("Alignment of ", stringify!(_KTMOBJECT_CURSOR))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LastQuery) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KTMOBJECT_CURSOR),
      "::",
      stringify!(LastQuery)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectIdCount) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_KTMOBJECT_CURSOR),
      "::",
      stringify!(ObjectIdCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectIds) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_KTMOBJECT_CURSOR),
      "::",
      stringify!(ObjectIds)
    )
  );
}
pub type KTMOBJECT_CURSOR = _KTMOBJECT_CURSOR;
pub type PKTMOBJECT_CURSOR = *mut _KTMOBJECT_CURSOR;
pub type TP_VERSION = DWORD;
pub type PTP_VERSION = *mut DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_CALLBACK_INSTANCE {
  _unused: [u8; 0],
}
pub type TP_CALLBACK_INSTANCE = _TP_CALLBACK_INSTANCE;
pub type PTP_CALLBACK_INSTANCE = *mut _TP_CALLBACK_INSTANCE;
pub type PTP_SIMPLE_CALLBACK =
  ::std::option::Option<unsafe extern "C" fn(Instance: PTP_CALLBACK_INSTANCE, Context: PVOID)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_POOL {
  _unused: [u8; 0],
}
pub type TP_POOL = _TP_POOL;
pub type PTP_POOL = *mut _TP_POOL;
pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_HIGH: _TP_CALLBACK_PRIORITY = 0;
pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_NORMAL: _TP_CALLBACK_PRIORITY = 1;
pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_LOW: _TP_CALLBACK_PRIORITY = 2;
pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_INVALID: _TP_CALLBACK_PRIORITY = 3;
pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_COUNT: _TP_CALLBACK_PRIORITY = 3;
pub type _TP_CALLBACK_PRIORITY = ::std::os::raw::c_int;
pub use self::_TP_CALLBACK_PRIORITY as TP_CALLBACK_PRIORITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_POOL_STACK_INFORMATION {
  pub StackReserve: SIZE_T,
  pub StackCommit: SIZE_T,
}
#[test]
fn bindgen_test_layout__TP_POOL_STACK_INFORMATION() {
  const UNINIT: ::std::mem::MaybeUninit<_TP_POOL_STACK_INFORMATION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TP_POOL_STACK_INFORMATION>(),
    16usize,
    concat!("Size of: ", stringify!(_TP_POOL_STACK_INFORMATION))
  );
  assert_eq!(
    ::std::mem::align_of::<_TP_POOL_STACK_INFORMATION>(),
    8usize,
    concat!("Alignment of ", stringify!(_TP_POOL_STACK_INFORMATION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StackReserve) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_POOL_STACK_INFORMATION),
      "::",
      stringify!(StackReserve)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).StackCommit) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_POOL_STACK_INFORMATION),
      "::",
      stringify!(StackCommit)
    )
  );
}
pub type TP_POOL_STACK_INFORMATION = _TP_POOL_STACK_INFORMATION;
pub type PTP_POOL_STACK_INFORMATION = *mut _TP_POOL_STACK_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_CLEANUP_GROUP {
  _unused: [u8; 0],
}
pub type TP_CLEANUP_GROUP = _TP_CLEANUP_GROUP;
pub type PTP_CLEANUP_GROUP = *mut _TP_CLEANUP_GROUP;
pub type PTP_CLEANUP_GROUP_CANCEL_CALLBACK =
  ::std::option::Option<unsafe extern "C" fn(ObjectContext: PVOID, CleanupContext: PVOID)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TP_CALLBACK_ENVIRON_V3 {
  pub Version: TP_VERSION,
  pub Pool: PTP_POOL,
  pub CleanupGroup: PTP_CLEANUP_GROUP,
  pub CleanupGroupCancelCallback: PTP_CLEANUP_GROUP_CANCEL_CALLBACK,
  pub RaceDll: PVOID,
  pub ActivationContext: *mut _ACTIVATION_CONTEXT,
  pub FinalizationCallback: PTP_SIMPLE_CALLBACK,
  pub u: _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1,
  pub CallbackPriority: TP_CALLBACK_PRIORITY,
  pub Size: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1 {
  pub Flags: DWORD,
  pub s: _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1 {
  pub _bitfield_align_1: [u32; 0],
  pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1)
    )
  );
}
impl _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1 {
  #[inline]
  pub fn LongFunction(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_LongFunction(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(0usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Persistent(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
  }
  #[inline]
  pub fn set_Persistent(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(1usize, 1u8, val as u64)
    }
  }
  #[inline]
  pub fn Private(&self) -> DWORD {
    unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
  }
  #[inline]
  pub fn set_Private(&mut self, val: DWORD) {
    unsafe {
      let val: u32 = ::std::mem::transmute(val);
      self._bitfield_1.set(2usize, 30u8, val as u64)
    }
  }
  #[inline]
  pub fn new_bitfield_1(
    LongFunction: DWORD,
    Persistent: DWORD,
    Private: DWORD,
  ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
    let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
    __bindgen_bitfield_unit.set(0usize, 1u8, {
      let LongFunction: u32 = unsafe { ::std::mem::transmute(LongFunction) };
      LongFunction as u64
    });
    __bindgen_bitfield_unit.set(1usize, 1u8, {
      let Persistent: u32 = unsafe { ::std::mem::transmute(Persistent) };
      Persistent as u64
    });
    __bindgen_bitfield_unit.set(2usize, 30u8, {
      let Private: u32 = unsafe { ::std::mem::transmute(Private) };
      Private as u64
    });
    __bindgen_bitfield_unit
  }
}
#[test]
fn bindgen_test_layout__TP_CALLBACK_ENVIRON_V3__bindgen_ty_1() {
  const UNINIT: ::std::mem::MaybeUninit<_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1>(),
    4usize,
    concat!(
      "Size of: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1),
      "::",
      stringify!(s)
    )
  );
}
#[test]
fn bindgen_test_layout__TP_CALLBACK_ENVIRON_V3() {
  const UNINIT: ::std::mem::MaybeUninit<_TP_CALLBACK_ENVIRON_V3> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TP_CALLBACK_ENVIRON_V3>(),
    72usize,
    concat!("Size of: ", stringify!(_TP_CALLBACK_ENVIRON_V3))
  );
  assert_eq!(
    ::std::mem::align_of::<_TP_CALLBACK_ENVIRON_V3>(),
    8usize,
    concat!("Alignment of ", stringify!(_TP_CALLBACK_ENVIRON_V3))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3),
      "::",
      stringify!(Version)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Pool) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3),
      "::",
      stringify!(Pool)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CleanupGroup) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3),
      "::",
      stringify!(CleanupGroup)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CleanupGroupCancelCallback) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3),
      "::",
      stringify!(CleanupGroupCancelCallback)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RaceDll) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3),
      "::",
      stringify!(RaceDll)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ActivationContext) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3),
      "::",
      stringify!(ActivationContext)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FinalizationCallback) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3),
      "::",
      stringify!(FinalizationCallback)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3),
      "::",
      stringify!(u)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CallbackPriority) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3),
      "::",
      stringify!(CallbackPriority)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_TP_CALLBACK_ENVIRON_V3),
      "::",
      stringify!(Size)
    )
  );
}
pub type TP_CALLBACK_ENVIRON_V3 = _TP_CALLBACK_ENVIRON_V3;
pub type TP_CALLBACK_ENVIRON = TP_CALLBACK_ENVIRON_V3;
pub type PTP_CALLBACK_ENVIRON = *mut TP_CALLBACK_ENVIRON_V3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_WORK {
  _unused: [u8; 0],
}
pub type TP_WORK = _TP_WORK;
pub type PTP_WORK = *mut _TP_WORK;
pub type PTP_WORK_CALLBACK = ::std::option::Option<
  unsafe extern "C" fn(Instance: PTP_CALLBACK_INSTANCE, Context: PVOID, Work: PTP_WORK),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_TIMER {
  _unused: [u8; 0],
}
pub type TP_TIMER = _TP_TIMER;
pub type PTP_TIMER = *mut _TP_TIMER;
pub type PTP_TIMER_CALLBACK = ::std::option::Option<
  unsafe extern "C" fn(Instance: PTP_CALLBACK_INSTANCE, Context: PVOID, Timer: PTP_TIMER),
>;
pub type TP_WAIT_RESULT = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_WAIT {
  _unused: [u8; 0],
}
pub type TP_WAIT = _TP_WAIT;
pub type PTP_WAIT = *mut _TP_WAIT;
pub type PTP_WAIT_CALLBACK = ::std::option::Option<
  unsafe extern "C" fn(
    Instance: PTP_CALLBACK_INSTANCE,
    Context: PVOID,
    Wait: PTP_WAIT,
    WaitResult: TP_WAIT_RESULT,
  ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_IO {
  _unused: [u8; 0],
}
pub type TP_IO = _TP_IO;
pub type PTP_IO = *mut _TP_IO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TEB {
  _unused: [u8; 0],
}
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
pub type LRESULT = LONG_PTR;
pub type SPHANDLE = *mut HANDLE;
pub type LPHANDLE = *mut HANDLE;
pub type HGLOBAL = HANDLE;
pub type HLOCAL = HANDLE;
pub type GLOBALHANDLE = HANDLE;
pub type LOCALHANDLE = HANDLE;
pub type FARPROC = ::std::option::Option<unsafe extern "C" fn() -> INT_PTR>;
pub type NEARPROC = ::std::option::Option<unsafe extern "C" fn() -> INT_PTR>;
pub type PROC = ::std::option::Option<unsafe extern "C" fn() -> INT_PTR>;
pub type ATOM = WORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HKEY__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HKEY__() {
  const UNINIT: ::std::mem::MaybeUninit<HKEY__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HKEY__>(),
    4usize,
    concat!("Size of: ", stringify!(HKEY__))
  );
  assert_eq!(
    ::std::mem::align_of::<HKEY__>(),
    4usize,
    concat!("Alignment of ", stringify!(HKEY__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HKEY__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HKEY = *mut HKEY__;
pub type PHKEY = *mut HKEY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HMETAFILE__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HMETAFILE__() {
  const UNINIT: ::std::mem::MaybeUninit<HMETAFILE__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HMETAFILE__>(),
    4usize,
    concat!("Size of: ", stringify!(HMETAFILE__))
  );
  assert_eq!(
    ::std::mem::align_of::<HMETAFILE__>(),
    4usize,
    concat!("Alignment of ", stringify!(HMETAFILE__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HMETAFILE__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HMETAFILE = *mut HMETAFILE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HINSTANCE__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HINSTANCE__() {
  const UNINIT: ::std::mem::MaybeUninit<HINSTANCE__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HINSTANCE__>(),
    4usize,
    concat!("Size of: ", stringify!(HINSTANCE__))
  );
  assert_eq!(
    ::std::mem::align_of::<HINSTANCE__>(),
    4usize,
    concat!("Alignment of ", stringify!(HINSTANCE__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HINSTANCE__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HINSTANCE = *mut HINSTANCE__;
pub type HMODULE = HINSTANCE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HRGN__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HRGN__() {
  const UNINIT: ::std::mem::MaybeUninit<HRGN__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HRGN__>(),
    4usize,
    concat!("Size of: ", stringify!(HRGN__))
  );
  assert_eq!(
    ::std::mem::align_of::<HRGN__>(),
    4usize,
    concat!("Alignment of ", stringify!(HRGN__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HRGN__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HRGN = *mut HRGN__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HRSRC__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HRSRC__() {
  const UNINIT: ::std::mem::MaybeUninit<HRSRC__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HRSRC__>(),
    4usize,
    concat!("Size of: ", stringify!(HRSRC__))
  );
  assert_eq!(
    ::std::mem::align_of::<HRSRC__>(),
    4usize,
    concat!("Alignment of ", stringify!(HRSRC__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HRSRC__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HRSRC = *mut HRSRC__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSPRITE__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HSPRITE__() {
  const UNINIT: ::std::mem::MaybeUninit<HSPRITE__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HSPRITE__>(),
    4usize,
    concat!("Size of: ", stringify!(HSPRITE__))
  );
  assert_eq!(
    ::std::mem::align_of::<HSPRITE__>(),
    4usize,
    concat!("Alignment of ", stringify!(HSPRITE__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HSPRITE__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HSPRITE = *mut HSPRITE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HLSURF__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HLSURF__() {
  const UNINIT: ::std::mem::MaybeUninit<HLSURF__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HLSURF__>(),
    4usize,
    concat!("Size of: ", stringify!(HLSURF__))
  );
  assert_eq!(
    ::std::mem::align_of::<HLSURF__>(),
    4usize,
    concat!("Alignment of ", stringify!(HLSURF__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HLSURF__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HLSURF = *mut HLSURF__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSTR__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HSTR__() {
  const UNINIT: ::std::mem::MaybeUninit<HSTR__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HSTR__>(),
    4usize,
    concat!("Size of: ", stringify!(HSTR__))
  );
  assert_eq!(
    ::std::mem::align_of::<HSTR__>(),
    4usize,
    concat!("Alignment of ", stringify!(HSTR__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HSTR__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HSTR = *mut HSTR__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HTASK__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HTASK__() {
  const UNINIT: ::std::mem::MaybeUninit<HTASK__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HTASK__>(),
    4usize,
    concat!("Size of: ", stringify!(HTASK__))
  );
  assert_eq!(
    ::std::mem::align_of::<HTASK__>(),
    4usize,
    concat!("Alignment of ", stringify!(HTASK__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HTASK__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HTASK = *mut HTASK__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWINSTA__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HWINSTA__() {
  const UNINIT: ::std::mem::MaybeUninit<HWINSTA__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HWINSTA__>(),
    4usize,
    concat!("Size of: ", stringify!(HWINSTA__))
  );
  assert_eq!(
    ::std::mem::align_of::<HWINSTA__>(),
    4usize,
    concat!("Alignment of ", stringify!(HWINSTA__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HWINSTA__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HWINSTA = *mut HWINSTA__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HKL__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HKL__() {
  const UNINIT: ::std::mem::MaybeUninit<HKL__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HKL__>(),
    4usize,
    concat!("Size of: ", stringify!(HKL__))
  );
  assert_eq!(
    ::std::mem::align_of::<HKL__>(),
    4usize,
    concat!("Alignment of ", stringify!(HKL__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HKL__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HKL = *mut HKL__;
pub type HFILE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILETIME {
  pub dwLowDateTime: DWORD,
  pub dwHighDateTime: DWORD,
}
#[test]
fn bindgen_test_layout__FILETIME() {
  const UNINIT: ::std::mem::MaybeUninit<_FILETIME> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_FILETIME>(),
    8usize,
    concat!("Size of: ", stringify!(_FILETIME))
  );
  assert_eq!(
    ::std::mem::align_of::<_FILETIME>(),
    4usize,
    concat!("Alignment of ", stringify!(_FILETIME))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwLowDateTime) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILETIME),
      "::",
      stringify!(dwLowDateTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwHighDateTime) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_FILETIME),
      "::",
      stringify!(dwHighDateTime)
    )
  );
}
pub type FILETIME = _FILETIME;
pub type PFILETIME = *mut _FILETIME;
pub type LPFILETIME = *mut _FILETIME;
pub type DEVPROPTYPE = ULONG;
pub type PDEVPROPTYPE = *mut ULONG;
pub type DEVPROP_BOOLEAN = CHAR;
pub type PDEVPROP_BOOLEAN = *mut CHAR;
pub type DEVPROPGUID = GUID;
pub type PDEVPROPGUID = *mut GUID;
pub type DEVPROPID = ULONG;
pub type PDEVPROPID = *mut ULONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DEVPROPKEY {
  pub fmtid: DEVPROPGUID,
  pub pid: DEVPROPID,
}
#[test]
fn bindgen_test_layout__DEVPROPKEY() {
  const UNINIT: ::std::mem::MaybeUninit<_DEVPROPKEY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DEVPROPKEY>(),
    20usize,
    concat!("Size of: ", stringify!(_DEVPROPKEY))
  );
  assert_eq!(
    ::std::mem::align_of::<_DEVPROPKEY>(),
    4usize,
    concat!("Alignment of ", stringify!(_DEVPROPKEY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fmtid) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROPKEY),
      "::",
      stringify!(fmtid)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROPKEY),
      "::",
      stringify!(pid)
    )
  );
}
pub type DEVPROPKEY = _DEVPROPKEY;
pub type PDEVPROPKEY = *mut _DEVPROPKEY;
pub const _DEVPROPSTORE_DEVPROP_STORE_SYSTEM: _DEVPROPSTORE = 0;
pub const _DEVPROPSTORE_DEVPROP_STORE_USER: _DEVPROPSTORE = 1;
pub type _DEVPROPSTORE = ::std::os::raw::c_int;
pub use self::_DEVPROPSTORE as DEVPROPSTORE;
pub type PDEVPROPSTORE = *mut _DEVPROPSTORE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DEVPROPCOMPKEY {
  pub Key: DEVPROPKEY,
  pub Store: DEVPROPSTORE,
  pub LocaleName: PCWSTR,
}
#[test]
fn bindgen_test_layout__DEVPROPCOMPKEY() {
  const UNINIT: ::std::mem::MaybeUninit<_DEVPROPCOMPKEY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DEVPROPCOMPKEY>(),
    32usize,
    concat!("Size of: ", stringify!(_DEVPROPCOMPKEY))
  );
  assert_eq!(
    ::std::mem::align_of::<_DEVPROPCOMPKEY>(),
    8usize,
    concat!("Alignment of ", stringify!(_DEVPROPCOMPKEY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Key) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROPCOMPKEY),
      "::",
      stringify!(Key)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Store) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROPCOMPKEY),
      "::",
      stringify!(Store)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LocaleName) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROPCOMPKEY),
      "::",
      stringify!(LocaleName)
    )
  );
}
pub type DEVPROPCOMPKEY = _DEVPROPCOMPKEY;
pub type PDEVPROPCOMPKEY = *mut _DEVPROPCOMPKEY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DEVPROPERTY {
  pub CompKey: DEVPROPCOMPKEY,
  pub Type: DEVPROPTYPE,
  pub BufferSize: ULONG,
  pub Buffer: PVOID,
}
#[test]
fn bindgen_test_layout__DEVPROPERTY() {
  const UNINIT: ::std::mem::MaybeUninit<_DEVPROPERTY> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DEVPROPERTY>(),
    48usize,
    concat!("Size of: ", stringify!(_DEVPROPERTY))
  );
  assert_eq!(
    ::std::mem::align_of::<_DEVPROPERTY>(),
    8usize,
    concat!("Alignment of ", stringify!(_DEVPROPERTY))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CompKey) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROPERTY),
      "::",
      stringify!(CompKey)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROPERTY),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BufferSize) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROPERTY),
      "::",
      stringify!(BufferSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROPERTY),
      "::",
      stringify!(Buffer)
    )
  );
}
pub type DEVPROPERTY = _DEVPROPERTY;
pub type PDEVPROPERTY = *mut _DEVPROPERTY;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_MODIFIER_NOT: _DEVPROP_OPERATOR = 65536;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE: _DEVPROP_OPERATOR = 131072;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_NONE: _DEVPROP_OPERATOR = 0;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_EXISTS: _DEVPROP_OPERATOR = 1;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_NOT_EXISTS: _DEVPROP_OPERATOR = 65537;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_EQUALS: _DEVPROP_OPERATOR = 2;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_NOT_EQUALS: _DEVPROP_OPERATOR = 65538;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_GREATER_THAN: _DEVPROP_OPERATOR = 3;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_LESS_THAN: _DEVPROP_OPERATOR = 4;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_GREATER_THAN_EQUALS: _DEVPROP_OPERATOR = 5;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_LESS_THAN_EQUALS: _DEVPROP_OPERATOR = 6;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_EQUALS_IGNORE_CASE: _DEVPROP_OPERATOR = 131074;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE: _DEVPROP_OPERATOR = 196610;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_BITWISE_AND: _DEVPROP_OPERATOR = 7;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_BITWISE_OR: _DEVPROP_OPERATOR = 8;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_BEGINS_WITH: _DEVPROP_OPERATOR = 9;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_ENDS_WITH: _DEVPROP_OPERATOR = 10;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_CONTAINS: _DEVPROP_OPERATOR = 11;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE: _DEVPROP_OPERATOR = 131081;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE: _DEVPROP_OPERATOR = 131082;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE: _DEVPROP_OPERATOR = 131083;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_LIST_CONTAINS: _DEVPROP_OPERATOR = 4096;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH: _DEVPROP_OPERATOR = 8192;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH: _DEVPROP_OPERATOR = 12288;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS: _DEVPROP_OPERATOR = 16384;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE: _DEVPROP_OPERATOR = 135168;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE:
  _DEVPROP_OPERATOR = 139264;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE: _DEVPROP_OPERATOR =
  143360;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE: _DEVPROP_OPERATOR =
  147456;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_AND_OPEN: _DEVPROP_OPERATOR = 1048576;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_AND_CLOSE: _DEVPROP_OPERATOR = 2097152;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_OR_OPEN: _DEVPROP_OPERATOR = 3145728;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_OR_CLOSE: _DEVPROP_OPERATOR = 4194304;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_NOT_OPEN: _DEVPROP_OPERATOR = 5242880;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_NOT_CLOSE: _DEVPROP_OPERATOR = 6291456;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_ARRAY_CONTAINS: _DEVPROP_OPERATOR = 268435456;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_MASK_EVAL: _DEVPROP_OPERATOR = 4095;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_MASK_LIST: _DEVPROP_OPERATOR = 61440;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_MASK_MODIFIER: _DEVPROP_OPERATOR = 983040;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_MASK_NOT_LOGICAL: _DEVPROP_OPERATOR = -267386881;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_MASK_LOGICAL: _DEVPROP_OPERATOR = 267386880;
pub const _DEVPROP_OPERATOR_DEVPROP_OPERATOR_MASK_ARRAY: _DEVPROP_OPERATOR = -268435456;
pub type _DEVPROP_OPERATOR = ::std::os::raw::c_int;
pub use self::_DEVPROP_OPERATOR as DEVPROP_OPERATOR;
pub type PDEVPROP_OPERATOR = *mut _DEVPROP_OPERATOR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DEVPROP_FILTER_EXPRESSION {
  pub Operator: DEVPROP_OPERATOR,
  pub Property: winapi::shared::devpropdef::DEVPROPERTY,
}
#[test]
fn bindgen_test_layout__DEVPROP_FILTER_EXPRESSION() {
  const UNINIT: ::std::mem::MaybeUninit<_DEVPROP_FILTER_EXPRESSION> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DEVPROP_FILTER_EXPRESSION>(),
    56usize,
    concat!("Size of: ", stringify!(_DEVPROP_FILTER_EXPRESSION))
  );
  assert_eq!(
    ::std::mem::align_of::<_DEVPROP_FILTER_EXPRESSION>(),
    8usize,
    concat!("Alignment of ", stringify!(_DEVPROP_FILTER_EXPRESSION))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Operator) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROP_FILTER_EXPRESSION),
      "::",
      stringify!(Operator)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Property) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEVPROP_FILTER_EXPRESSION),
      "::",
      stringify!(Property)
    )
  );
}
pub type DEVPROP_FILTER_EXPRESSION = _DEVPROP_FILTER_EXPRESSION;
pub type PDEVPROP_FILTER_EXPRESSION = *mut _DEVPROP_FILTER_EXPRESSION;
pub const _DEV_OBJECT_TYPE_DevObjectTypeUnknown: _DEV_OBJECT_TYPE = 0;
pub const _DEV_OBJECT_TYPE_DevObjectTypeDeviceInterface: _DEV_OBJECT_TYPE = 1;
pub const _DEV_OBJECT_TYPE_DevObjectTypeDeviceContainer: _DEV_OBJECT_TYPE = 2;
pub const _DEV_OBJECT_TYPE_DevObjectTypeDevice: _DEV_OBJECT_TYPE = 3;
pub const _DEV_OBJECT_TYPE_DevObjectTypeDeviceInterfaceClass: _DEV_OBJECT_TYPE = 4;
pub const _DEV_OBJECT_TYPE_DevObjectTypeAEP: _DEV_OBJECT_TYPE = 5;
pub const _DEV_OBJECT_TYPE_DevObjectTypeAEPContainer: _DEV_OBJECT_TYPE = 6;
pub const _DEV_OBJECT_TYPE_DevObjectTypeDeviceInstallerClass: _DEV_OBJECT_TYPE = 7;
pub const _DEV_OBJECT_TYPE_DevObjectTypeDeviceInterfaceDisplay: _DEV_OBJECT_TYPE = 8;
pub const _DEV_OBJECT_TYPE_DevObjectTypeDeviceContainerDisplay: _DEV_OBJECT_TYPE = 9;
pub const _DEV_OBJECT_TYPE_DevObjectTypeAEPService: _DEV_OBJECT_TYPE = 10;
pub const _DEV_OBJECT_TYPE_DevObjectTypeDevicePanel: _DEV_OBJECT_TYPE = 11;
pub type _DEV_OBJECT_TYPE = ::std::os::raw::c_int;
pub use self::_DEV_OBJECT_TYPE as DEV_OBJECT_TYPE;
pub type PDEV_OBJECT_TYPE = *mut _DEV_OBJECT_TYPE;
pub const _DEV_QUERY_FLAGS_DevQueryFlagNone: _DEV_QUERY_FLAGS = 0;
pub const _DEV_QUERY_FLAGS_DevQueryFlagUpdateResults: _DEV_QUERY_FLAGS = 1;
pub const _DEV_QUERY_FLAGS_DevQueryFlagAllProperties: _DEV_QUERY_FLAGS = 2;
pub const _DEV_QUERY_FLAGS_DevQueryFlagLocalize: _DEV_QUERY_FLAGS = 4;
pub const _DEV_QUERY_FLAGS_DevQueryFlagAsyncClose: _DEV_QUERY_FLAGS = 8;
pub type _DEV_QUERY_FLAGS = ::std::os::raw::c_int;
pub use self::_DEV_QUERY_FLAGS as DEV_QUERY_FLAGS;
pub type PDEV_QUERY_FLAGS = *mut _DEV_QUERY_FLAGS;
pub const _DEV_QUERY_STATE_DevQueryStateInitialized: _DEV_QUERY_STATE = 0;
pub const _DEV_QUERY_STATE_DevQueryStateEnumCompleted: _DEV_QUERY_STATE = 1;
pub const _DEV_QUERY_STATE_DevQueryStateAborted: _DEV_QUERY_STATE = 2;
pub const _DEV_QUERY_STATE_DevQueryStateClosed: _DEV_QUERY_STATE = 3;
pub type _DEV_QUERY_STATE = ::std::os::raw::c_int;
pub use self::_DEV_QUERY_STATE as DEV_QUERY_STATE;
pub type PDEV_QUERY_STATE = *mut _DEV_QUERY_STATE;
pub const _DEV_QUERY_RESULT_ACTION_DevQueryResultStateChange: _DEV_QUERY_RESULT_ACTION = 0;
pub const _DEV_QUERY_RESULT_ACTION_DevQueryResultAdd: _DEV_QUERY_RESULT_ACTION = 1;
pub const _DEV_QUERY_RESULT_ACTION_DevQueryResultUpdate: _DEV_QUERY_RESULT_ACTION = 2;
pub const _DEV_QUERY_RESULT_ACTION_DevQueryResultRemove: _DEV_QUERY_RESULT_ACTION = 3;
pub type _DEV_QUERY_RESULT_ACTION = ::std::os::raw::c_int;
pub use self::_DEV_QUERY_RESULT_ACTION as DEV_QUERY_RESULT_ACTION;
pub type PDEV_QUERY_RESULT_ACTION = *mut _DEV_QUERY_RESULT_ACTION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DEV_OBJECT {
  pub ObjectType: DEV_OBJECT_TYPE,
  pub pszObjectId: PCWSTR,
  pub cPropertyCount: ULONG,
  pub pProperties: *const DEVPROPERTY,
}
#[test]
fn bindgen_test_layout__DEV_OBJECT() {
  const UNINIT: ::std::mem::MaybeUninit<_DEV_OBJECT> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DEV_OBJECT>(),
    32usize,
    concat!("Size of: ", stringify!(_DEV_OBJECT))
  );
  assert_eq!(
    ::std::mem::align_of::<_DEV_OBJECT>(),
    8usize,
    concat!("Alignment of ", stringify!(_DEV_OBJECT))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ObjectType) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_OBJECT),
      "::",
      stringify!(ObjectType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pszObjectId) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_OBJECT),
      "::",
      stringify!(pszObjectId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cPropertyCount) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_OBJECT),
      "::",
      stringify!(cPropertyCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pProperties) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_OBJECT),
      "::",
      stringify!(pProperties)
    )
  );
}
pub type DEV_OBJECT = _DEV_OBJECT;
pub type PDEV_OBJECT = *mut _DEV_OBJECT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DEV_QUERY_RESULT_ACTION_DATA {
  pub Action: DEV_QUERY_RESULT_ACTION,
  pub Data: _DEV_QUERY_RESULT_ACTION_DATA__DEV_QUERY_RESULT_UPDATE_PAYLOAD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DEV_QUERY_RESULT_ACTION_DATA__DEV_QUERY_RESULT_UPDATE_PAYLOAD {
  pub State: DEV_QUERY_STATE,
  pub DeviceObject: DEV_OBJECT,
}
#[test]
fn bindgen_test_layout__DEV_QUERY_RESULT_ACTION_DATA__DEV_QUERY_RESULT_UPDATE_PAYLOAD() {
  const UNINIT: ::std::mem::MaybeUninit<
    _DEV_QUERY_RESULT_ACTION_DATA__DEV_QUERY_RESULT_UPDATE_PAYLOAD,
  > = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DEV_QUERY_RESULT_ACTION_DATA__DEV_QUERY_RESULT_UPDATE_PAYLOAD>(),
    32usize,
    concat!(
      "Size of: ",
      stringify!(_DEV_QUERY_RESULT_ACTION_DATA__DEV_QUERY_RESULT_UPDATE_PAYLOAD)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<_DEV_QUERY_RESULT_ACTION_DATA__DEV_QUERY_RESULT_UPDATE_PAYLOAD>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(_DEV_QUERY_RESULT_ACTION_DATA__DEV_QUERY_RESULT_UPDATE_PAYLOAD)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_QUERY_RESULT_ACTION_DATA__DEV_QUERY_RESULT_UPDATE_PAYLOAD),
      "::",
      stringify!(State)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).DeviceObject) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_QUERY_RESULT_ACTION_DATA__DEV_QUERY_RESULT_UPDATE_PAYLOAD),
      "::",
      stringify!(DeviceObject)
    )
  );
}
#[test]
fn bindgen_test_layout__DEV_QUERY_RESULT_ACTION_DATA() {
  const UNINIT: ::std::mem::MaybeUninit<_DEV_QUERY_RESULT_ACTION_DATA> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DEV_QUERY_RESULT_ACTION_DATA>(),
    40usize,
    concat!("Size of: ", stringify!(_DEV_QUERY_RESULT_ACTION_DATA))
  );
  assert_eq!(
    ::std::mem::align_of::<_DEV_QUERY_RESULT_ACTION_DATA>(),
    8usize,
    concat!("Alignment of ", stringify!(_DEV_QUERY_RESULT_ACTION_DATA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Action) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_QUERY_RESULT_ACTION_DATA),
      "::",
      stringify!(Action)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_QUERY_RESULT_ACTION_DATA),
      "::",
      stringify!(Data)
    )
  );
}
pub type DEV_QUERY_RESULT_ACTION_DATA = _DEV_QUERY_RESULT_ACTION_DATA;
pub type PDEV_QUERY_RESULT_ACTION_DATA = *mut _DEV_QUERY_RESULT_ACTION_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DEV_QUERY_PARAMETER {
  pub Key: DEVPROPKEY,
  pub Type: DEVPROPTYPE,
  pub BufferSize: ULONG,
  pub Buffer: PVOID,
}
#[test]
fn bindgen_test_layout__DEV_QUERY_PARAMETER() {
  const UNINIT: ::std::mem::MaybeUninit<_DEV_QUERY_PARAMETER> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_DEV_QUERY_PARAMETER>(),
    40usize,
    concat!("Size of: ", stringify!(_DEV_QUERY_PARAMETER))
  );
  assert_eq!(
    ::std::mem::align_of::<_DEV_QUERY_PARAMETER>(),
    8usize,
    concat!("Alignment of ", stringify!(_DEV_QUERY_PARAMETER))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Key) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_QUERY_PARAMETER),
      "::",
      stringify!(Key)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_QUERY_PARAMETER),
      "::",
      stringify!(Type)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BufferSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_QUERY_PARAMETER),
      "::",
      stringify!(BufferSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_DEV_QUERY_PARAMETER),
      "::",
      stringify!(Buffer)
    )
  );
}
pub type DEV_QUERY_PARAMETER = _DEV_QUERY_PARAMETER;
pub type PDEV_QUERY_PARAMETER = *mut _DEV_QUERY_PARAMETER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HDEVQUERY__ {
  pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HDEVQUERY__() {
  const UNINIT: ::std::mem::MaybeUninit<HDEVQUERY__> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<HDEVQUERY__>(),
    4usize,
    concat!("Size of: ", stringify!(HDEVQUERY__))
  );
  assert_eq!(
    ::std::mem::align_of::<HDEVQUERY__>(),
    4usize,
    concat!("Alignment of ", stringify!(HDEVQUERY__))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(HDEVQUERY__),
      "::",
      stringify!(unused)
    )
  );
}
pub type HDEVQUERY = *mut HDEVQUERY__;
pub type PHDEVQUERY = *mut HDEVQUERY;
pub type PDEV_QUERY_RESULT_CALLBACK = ::std::option::Option<
  unsafe extern "C" fn(
    hDevQuery: HDEVQUERY,
    pContext: PVOID,
    pActionData: *const DEV_QUERY_RESULT_ACTION_DATA,
  ),
>;
extern "C" {
  pub fn DevCreateObjectQuery(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: ULONG,
    cRequestedProperties: ULONG,
    pRequestedProperties: *const DEVPROPCOMPKEY,
    cFilterExpressionCount: ULONG,
    pFilter: *const DEVPROP_FILTER_EXPRESSION,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: PVOID,
    phDevQuery: PHDEVQUERY,
  ) -> HRESULT;
}
extern "C" {
  pub fn DevCreateObjectQueryEx(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: ULONG,
    cRequestedProperties: ULONG,
    pRequestedProperties: *const DEVPROPCOMPKEY,
    cFilterExpressionCount: ULONG,
    pFilter: *const DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: ULONG,
    pExtendedParameters: *const DEV_QUERY_PARAMETER,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: PVOID,
    phDevQuery: PHDEVQUERY,
  ) -> HRESULT;
}
extern "C" {
  pub fn DevCreateObjectQueryFromId(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: PCWSTR,
    QueryFlags: ULONG,
    cRequestedProperties: ULONG,
    pRequestedProperties: *const DEVPROPCOMPKEY,
    cFilterExpressionCount: ULONG,
    pFilter: *const DEVPROP_FILTER_EXPRESSION,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: PVOID,
    phDevQuery: PHDEVQUERY,
  ) -> HRESULT;
}
extern "C" {
  pub fn DevCreateObjectQueryFromIdEx(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: PCWSTR,
    QueryFlags: ULONG,
    cRequestedProperties: ULONG,
    pRequestedProperties: *const DEVPROPCOMPKEY,
    cFilterExpressionCount: ULONG,
    pFilter: *const DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: ULONG,
    pExtendedParameters: *const DEV_QUERY_PARAMETER,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: PVOID,
    phDevQuery: PHDEVQUERY,
  ) -> HRESULT;
}
extern "C" {
  pub fn DevCreateObjectQueryFromIds(
    ObjectType: DEV_OBJECT_TYPE,
    pszzObjectIds: PCZZWSTR,
    QueryFlags: ULONG,
    cRequestedProperties: ULONG,
    pRequestedProperties: *const DEVPROPCOMPKEY,
    cFilterExpressionCount: ULONG,
    pFilter: *const DEVPROP_FILTER_EXPRESSION,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: PVOID,
    phDevQuery: PHDEVQUERY,
  ) -> HRESULT;
}
extern "C" {
  pub fn DevCreateObjectQueryFromIdsEx(
    ObjectType: DEV_OBJECT_TYPE,
    pszzObjectIds: PCZZWSTR,
    QueryFlags: ULONG,
    cRequestedProperties: ULONG,
    pRequestedProperties: *const DEVPROPCOMPKEY,
    cFilterExpressionCount: ULONG,
    pFilter: *const DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: ULONG,
    pExtendedParameters: *const DEV_QUERY_PARAMETER,
    pCallback: PDEV_QUERY_RESULT_CALLBACK,
    pContext: PVOID,
    phDevQuery: PHDEVQUERY,
  ) -> HRESULT;
}
extern "C" {
  pub fn DevCloseObjectQuery(hDevQuery: HDEVQUERY);
}
extern "C" {
  pub fn DevGetObjects(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: ULONG,
    cRequestedProperties: ULONG,
    pRequestedProperties: *const DEVPROPCOMPKEY,
    cFilterExpressionCount: ULONG,
    pFilter: *const DEVPROP_FILTER_EXPRESSION,
    pcObjectCount: PULONG,
    ppObjects: *mut *const DEV_OBJECT,
  ) -> HRESULT;
}
extern "C" {
  pub fn DevGetObjectsEx(
    ObjectType: DEV_OBJECT_TYPE,
    QueryFlags: ULONG,
    cRequestedProperties: ULONG,
    pRequestedProperties: *const DEVPROPCOMPKEY,
    cFilterExpressionCount: ULONG,
    pFilter: *const DEVPROP_FILTER_EXPRESSION,
    cExtendedParameterCount: ULONG,
    pExtendedParameters: *const DEV_QUERY_PARAMETER,
    pcObjectCount: PULONG,
    ppObjects: *mut *const DEV_OBJECT,
  ) -> HRESULT;
}
extern "C" {
  pub fn DevFreeObjects(cObjectCount: ULONG, pObjects: *const DEV_OBJECT);
}
extern "C" {
  pub fn DevGetObjectProperties(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: PCWSTR,
    QueryFlags: ULONG,
    cRequestedProperties: ULONG,
    pRequestedProperties: *const DEVPROPCOMPKEY,
    pcPropertyCount: PULONG,
    ppProperties: *mut *const DEVPROPERTY,
  ) -> HRESULT;
}
extern "C" {
  pub fn DevGetObjectPropertiesEx(
    ObjectType: DEV_OBJECT_TYPE,
    pszObjectId: PCWSTR,
    QueryFlags: ULONG,
    cRequestedProperties: ULONG,
    pRequestedProperties: *const DEVPROPCOMPKEY,
    cExtendedParameterCount: ULONG,
    pExtendedParameters: *const DEV_QUERY_PARAMETER,
    pcPropertyCount: PULONG,
    ppProperties: *mut *const DEVPROPERTY,
  ) -> HRESULT;
}
extern "C" {
  pub fn DevFreeObjectProperties(cPropertyCount: ULONG, pProperties: *const DEVPROPERTY);
}
extern "C" {
  pub fn DevFindProperty(
    pKey: *const DEVPROPKEY,
    Store: DEVPROPSTORE,
    pszLocaleName: PCWSTR,
    cProperties: ULONG,
    pProperties: *const DEVPROPERTY,
  ) -> *const DEVPROPERTY;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
  pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACTIVATION_CONTEXT {
  pub _address: u8,
}
